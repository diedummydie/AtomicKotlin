<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="VERSION" value="13" />
      <option name="myUserTests">
        <map />
      </option>
      <option name="course">
        <EduCourse>
          <option name="authors">
            <list />
          </option>
          <option name="compatible" value="true" />
          <option name="courseMode" value="Study" />
          <option name="courseType" value="PyCharm" />
          <option name="createDate" value="1532511155000" />
          <option name="customPresentableName" />
          <option name="description" value="The examples and exercises accompanying the AtomicKotlin book" />
          <option name="fromZip" value="false" />
          <option name="id" value="20403" />
          <option name="index" value="-1" />
          <option name="instructors">
            <list />
          </option>
          <option name="language" value="kotlin" />
          <option name="languageCode" value="en" />
          <option name="loadSolutions" value="true" />
          <option name="name" value="AtomicKotlin" />
          <option name="public" value="true" />
          <option name="sectionIds">
            <list />
          </option>
          <option name="stepikChangeStatus" value="Up to date" />
          <option name="type" value="pycharm7 kotlin" />
          <option name="updateDate" value="1539354233000" />
          <option name="items">
            <list>
              <Section>
                <option name="courseId" value="20403" />
                <option name="customPresentableName" />
                <option name="id" value="31874" />
                <option name="index" value="1" />
                <option name="name" value="Programming Basics" />
                <option name="position" value="1" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1539354233000" />
                <option name="items">
                  <list>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="116075" />
                      <option name="index" value="1" />
                      <option name="name" value="Hello, World!" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570194000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Hello, World!&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/103796/step/1&quot;&gt;Read &amp;quot;Hello, World!&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="stepId" value="399520" />
                            <option name="stepikChangeStatus" value="Info and Content changed" />
                            <option name="files">
                              <map>
                                <entry key="src/EmptyProgram.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/EmptyProgram.kt" />
                                      <option name="text" value="// HelloWorld/EmptyProgram.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  // Program code here ...&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/HelloWorld.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/HelloWorld.kt" />
                                      <option name="text" value="// HelloWorld/HelloWorld.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  println(&quot;Hello, world!&quot;)&#10;}&#10;/* Output:&#10;Hello, world!&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570191000" />
                          </TheoryTask>
                          <OutputTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Hello, World! (#1)&lt;/h2&gt;&lt;p&gt;Create and run a program that displays the phrase &amp;quot;Hello, Kotlin!&amp;quot; on the console.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Hello%2C+World%21+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="stepId" value="399521" />
                            <option name="stepikChangeStatus" value="Info and Content changed" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="57" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="25" />
                                            <option name="offset" value="57" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="println(&quot;Hello, Kotlin!&quot;)" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Solved" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package helloWorld1&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    TODO()&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/output.txt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/output.txt" />
                                      <option name="text" value="Hello, Kotlin!&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570192000" />
                          </OutputTask>
                          <OutputTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Hello, World! (#2)&lt;/h2&gt;&lt;p&gt;Display the same phrase &amp;quot;Hello, Kotlin!&amp;quot; on the console, but &amp;quot;Kotlin&amp;quot; should&#10;appear on the next line. You can display two separate strings to achieve that:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Hello,&#10;Kotlin!&#10;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Try replacing &lt;code&gt;println()&lt;/code&gt; with &lt;code&gt;print()&lt;/code&gt; and see what changes.&lt;/p&gt;&lt;p&gt;Note that tests for all the following tasks assume that you use &lt;code&gt;println()&lt;/code&gt;,&#10;not &lt;code&gt;print()&lt;/code&gt;,  as a default way to display the data on the console.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Hello%2C+World%21+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="stepId" value="399522" />
                            <option name="stepikChangeStatus" value="Info and Content changed" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="57" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="40" />
                                            <option name="offset" value="57" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="println(&quot;Hello,&quot;)&#10;    println(&quot;Kotlin!&quot;)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Solved" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package helloWorld2&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    TODO()&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/output.txt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/output.txt" />
                                      <option name="text" value="Hello,&#10;Kotlin!&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570193000" />
                          </OutputTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: Run&lt;/h2&gt;&lt;p&gt;IntelliJ IDEA is a powerful tool which allows you to carry out common actions&#10;in an efficient way. Running the &lt;code&gt;main()&lt;/code&gt; function is an example of such an&#10;action, and IntelliJ IDEA allows you to do that by clicking a shortcut. A&#10;shortcut is a special key combination that causes a specific command to be&#10;executed. Throughout this course, you'll learn common shortcuts.&lt;/p&gt;&lt;p&gt;IntelliJ Idea is a &lt;em&gt;keyboard-centric IDE&lt;/em&gt;, which means you can perform all&#10;actions using only the keyboard. We recommend learning to do everything&#10;with keyboard shortcuts.&lt;/p&gt;&lt;p&gt;Click on the icon next to the &lt;code&gt;main()&lt;/code&gt; function to see what shortcut is&#10;used by your operating system to run &lt;code&gt;main()&lt;/code&gt;. The key combination appears &#10;right after &lt;code&gt;run 'TaskKt'&lt;/code&gt;. Run the &lt;code&gt;main()&lt;/code&gt; function by first choosing &#10;&lt;code&gt;run 'TaskKt'&lt;/code&gt;, then pressing the shortcut.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Hello%2C+World%21+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="stepId" value="399523" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package helloWorld3&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(&quot;Hello, Kotlin!&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package helloWorld3&#10;&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570194000" />
                          </IdeTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: Basic Editing&lt;/h2&gt;&lt;p&gt;In IntelliJ IDEA you can use typical OS shortcuts to perform basic editing,&#10;like &amp;quot;copy&amp;quot;, &amp;quot;paste&amp;quot; or &amp;quot;undo&amp;quot; operations:&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Operation&lt;/th&gt;&lt;th&gt;Shortcut&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Cut&lt;/td&gt;&lt;td&gt;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:$Paste;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Cut a current line or a selected code block to the Clipboard.&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;intellij-row-even&quot;&gt;&lt;td&gt;Copy&lt;/td&gt;&lt;td&gt;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:$Copy;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Copy a current line or a selected code block to the Clipboard.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Paste&lt;/td&gt;&lt;td&gt;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:$Paste;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Paste from the Clipboard to the caret location.&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;intellij-row-even&quot;&gt;&lt;td&gt;Undo&lt;/td&gt;&lt;td&gt;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:$Undo;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Undo last operation.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Redo&lt;/td&gt;&lt;td&gt;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:$Redo;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Redo last undone operation.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;To select text, press Shift (⇧) while moving the caret around the text. &#10;Then you can move the caret up, down, left or right with selection, or move it to the end or&#10;to the beginning of a line:&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Operation&lt;/th&gt;&lt;th&gt;Shortcut&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Up with Selection&lt;/td&gt;&lt;td&gt;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:EditorUpWithSelection;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Move the caret one line up selecting the text.&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;intellij-row-even&quot;&gt;&lt;td&gt;Right with Selection&lt;/td&gt;&lt;td&gt;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:EditorRightWithSelection;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Move the caret one character to the right selecting the text.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Move to Line End with Selection&lt;/td&gt;&lt;td&gt;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:EditorTextEndWithSelection;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Move the caret to the end of line, selecting the text.&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;intellij-row-even&quot;&gt;&lt;td&gt;Move to Line Start with Selection&lt;/td&gt;&lt;td&gt;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:EditorTextStartWithSelection;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Move the caret to the beginning of line, selecting the text.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;Duplicate the line &lt;code&gt;println(&amp;quot;Hello, Kotlin!&amp;quot;)&lt;/code&gt; in the example by selecting it &#10;and then copy-pasting it.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Hello%2C+World%21+%2F+Exercise4&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="5" />
                            <option name="name" value="Exercise 4" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="stepId" value="399525" />
                            <option name="stepikChangeStatus" value="Info and Content changed" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package helloWorld4&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(&quot;Hello, Kotlin!&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package helloWorld4&#10;&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570194000" />
                          </IdeTask>
                        </list>
                      </option>
                      <option name="unitId" value="90534" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="116077" />
                      <option name="index" value="2" />
                      <option name="name" value="var &amp; val" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570199000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;&lt;code&gt;var&lt;/code&gt; &amp;amp; &lt;code&gt;val&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/103806/step/1&quot;&gt;Read &amp;quot;&lt;code&gt;var&lt;/code&gt; &amp;amp; &lt;code&gt;val&lt;/code&gt;&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="stepId" value="399526" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/AVarIsMutable.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/AVarIsMutable.kt" />
                                      <option name="text" value="// VarAndVal/AVarIsMutable.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  var sum = 1&#10;  sum = sum + 2&#10;  sum += 3&#10;  println(sum)&#10;}&#10;/* Output:&#10;6&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Vals.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Vals.kt" />
                                      <option name="text" value="// VarAndVal/Vals.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val whole = 11&#10;  // whole = 15 // Error      // [1]&#10;  val fractional = 1.4&#10;  val words = &quot;Twas Brillig&quot;&#10;  println(whole)&#10;  println(fractional)&#10;  println(words)&#10;}&#10;/* Output:&#10;11&#10;1.4&#10;Twas Brillig&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Vars.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Vars.kt" />
                                      <option name="text" value="// VarAndVal/Vars.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  var whole = 11          // [1]&#10;  var fractional = 1.4    // [2]&#10;  var words = &quot;A value&quot;   // [3]&#10;  println(whole)&#10;  println(fractional)&#10;  println(words)&#10;}&#10;/* Output:&#10;11&#10;1.4&#10;A value&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570196000" />
                          </TheoryTask>
                          <OutputTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;&lt;code&gt;var&lt;/code&gt; &amp;amp; &lt;code&gt;val&lt;/code&gt; (#1)&lt;/h2&gt;&lt;p&gt;Declare a &lt;code&gt;val answer&lt;/code&gt; and set its value to &lt;code&gt;42&lt;/code&gt;.&#10;On the next line, try to reassign the &lt;code&gt;answer&lt;/code&gt; to &lt;code&gt;43&lt;/code&gt;.&#10;What error does the compiler produce?&#10;Fix the error by replacing &lt;code&gt;val&lt;/code&gt; with &lt;code&gt;var&lt;/code&gt;.&#10;Display the value of &lt;code&gt;answer&lt;/code&gt; on the console.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+var+%26+val+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="stepId" value="399527" />
                            <option name="stepikChangeStatus" value="Info and Content changed" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="56" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="51" />
                                            <option name="offset" value="56" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="var answer = 42&#10;    answer = 43&#10;    println(answer)" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Solved" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package varandval1&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    TODO()&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/output.txt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/output.txt" />
                                      <option name="text" value="43&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570197000" />
                          </OutputTask>
                          <OutputTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;&lt;code&gt;var&lt;/code&gt; &amp;amp; &lt;code&gt;val&lt;/code&gt; (#2)&lt;/h2&gt;&lt;p&gt;Declare two &lt;code&gt;var&lt;/code&gt;s: &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;. Swap their contents (you can first try saying&#10;&lt;code&gt;x = y&lt;/code&gt;, &lt;code&gt;y = x&lt;/code&gt; and then fix the erroneous solution):&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;var x = 1&#10;var y = 2&#10;// swap&#10;println(x) // 2&#10;println(y) // 1&#10;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Your code should remain unchanged for different initializers, like &lt;code&gt;var x =&#10;&amp;quot;first&amp;quot;&lt;/code&gt;, &lt;code&gt;var y = &amp;quot;second&amp;quot;&lt;/code&gt;. Thus saying just &lt;code&gt;x = 2&lt;/code&gt;, &lt;code&gt;y = 1&lt;/code&gt; is not the&#10;expected solution.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+var+%26+val+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399528" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="You may need to introduce a third auxiliary `val`." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="84" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="84" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="val tmp = x&#10;    x = y&#10;    y = tmp" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package varandval2&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    var x = 1&#10;    var y = 2&#10;    TODO()&#10;    println(x)&#10;    println(y)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/output.txt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/output.txt" />
                                      <option name="text" value="2&#10;1&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570198000" />
                          </OutputTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: Tool Windows&lt;/h2&gt;&lt;p&gt;The &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Project&lt;/code&gt;&lt;/span&gt; window showing the course structure &#10;on the left and &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Task description&lt;/code&gt;&lt;/span&gt; window on the &#10;right are called &lt;em&gt;tool windows&lt;/em&gt;. You can adjust their size by clicking on the &#10;boundary and moving it. You can hide the tool window from the view temporarily&#10;to make better use of the screen: click the &amp;quot;hide&amp;quot; button (the one with an &#10;arrow)  at the top right corner of the tool window. To show it again, choose &#10;its name by clicking  on the right or left side of the screen or by choosing it&#10;in the &lt;span class=&quot;control&quot;&gt;&lt;code&gt;View | Tool Windows&lt;/code&gt;&lt;/span&gt; application menu.&lt;/p&gt;&lt;p&gt;Hide the &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Task description&lt;/code&gt;&lt;/span&gt; tool window and &#10;then open it again.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+var+%26+val+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399529" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package varandval3&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(&quot;Hello, Kotlin!&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package varandval3&#10;&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570199000" />
                          </IdeTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: Project Tool Window&lt;/h2&gt;&lt;p&gt;The icons at the top of the &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Project&lt;/code&gt;&lt;/span&gt; Tool Window&#10;allow to perform several convenient operations.&#10;For example, you can locate the currently opened file in the &#10;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Project&lt;/code&gt;&lt;/span&gt; Tool Window by clicking on the&#10;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Scroll from Source&lt;/code&gt;&lt;/span&gt; icon.&lt;/p&gt;&lt;p&gt;Alternatively, press &lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:SelectIn;&lt;/span&gt; or choose&#10;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Navigate | Select in...&lt;/code&gt;&lt;/span&gt; from the menu above. &#10;Then choose &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Project View&lt;/code&gt;&lt;/span&gt; in the open menu.&lt;/p&gt;&lt;p&gt;Press the &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Collapse All&lt;/code&gt;&lt;/span&gt; button on the &#10;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Project&lt;/code&gt;&lt;/span&gt; Tool Window to hide all the&#10;project content, then open the current file by trying all the options listed&#10;above.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+var+%26+val+%2F+Exercise4&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="5" />
                            <option name="name" value="Exercise 4" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399530" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package varandval4&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(&quot;Hello, Kotlin!&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package varandval4&#10;&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570199000" />
                          </IdeTask>
                        </list>
                      </option>
                      <option name="unitId" value="90535" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="116079" />
                      <option name="index" value="3" />
                      <option name="name" value="Data Types" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570203000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Data Types&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/104305/step/1&quot;&gt;Read &amp;quot;Data Types&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399532" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Inference.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Inference.kt" />
                                      <option name="text" value="// DataTypes/Inference.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val n = 1 + 1.2&#10;  println(n)&#10;}&#10;/* Output:&#10;2.2&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/StringPlusNumber.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/StringPlusNumber.kt" />
                                      <option name="text" value="// DataTypes/StringPlusNumber.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  println(&quot;Sally&quot; + 5.9)&#10;}&#10;/* Output:&#10;Sally5.9&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Types.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Types.kt" />
                                      <option name="text" value="// DataTypes/Types.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val whole: Int = 11              // [1]&#10;  val fractional: Double = 1.4     // [2]&#10;  // true or false:&#10;  val trueOrFalse: Boolean = true  // [3]&#10;  val words: String = &quot;A value&quot;    // [4]&#10;  val character: Char = 'z'        // [5]&#10;  val lines: String = &quot;&quot;&quot;Triple quotes let&#10;you have many lines&#10;in your string&quot;&quot;&quot;                  // [6]&#10;&#10;  println(whole)&#10;  println(fractional)&#10;  println(trueOrFalse)&#10;  println(words)&#10;  println(character)&#10;  println(lines)&#10;}&#10;/* Output:&#10;11&#10;1.4&#10;true&#10;A value&#10;z&#10;Triple quotes let&#10;you have many lines&#10;in your string&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570201000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Data Types (#1)&lt;/h2&gt;&lt;p&gt;Declare a &lt;code&gt;var&lt;/code&gt; &lt;code&gt;answer&lt;/code&gt; of type &lt;code&gt;Int&lt;/code&gt; and set its value to &lt;code&gt;42&lt;/code&gt;. In&#10;the next line try to reassign &lt;code&gt;answer&lt;/code&gt; to the string &amp;quot;unknown&amp;quot;. What error does&#10;the compiler produce?&lt;/p&gt;&lt;p&gt;Remove the &lt;code&gt;Int&lt;/code&gt; type specification. Does the error change?&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Data+Types+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399533" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="55" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="55" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="var answer = 42&#10;    // Type mismatch error&#10;//  answer = &quot;unknown&quot;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package dataTypes&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    TODO()&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package dataTypes" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570202000" />
                          </EduTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: &amp;quot;Specify Type&amp;quot; Intention&lt;/h2&gt;&lt;p&gt;IntelliJ IDEA helps you automatically add type specifications for &lt;code&gt;val&lt;/code&gt;s and &#10;&lt;code&gt;var&lt;/code&gt;s. Put the caret right after &lt;code&gt;s&lt;/code&gt; and press&#10;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:ShowIntentionActions;&lt;/span&gt;. This is &#10;the shortcut for &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Show intention actions&lt;/code&gt;&lt;/span&gt;. &#10;Choose &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Specify type explicitly&lt;/code&gt;&lt;/span&gt; in the dropdown menu.&lt;/p&gt;&lt;p&gt;Different intention actions are available in different contexts, depending on&#10;where you put the caret.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Data+Types+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399534" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package dataTypes2&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val s = &quot;Sally&quot; + 5.9&#10;    println(s)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package dataTypes2" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570203000" />
                          </IdeTask>
                        </list>
                      </option>
                      <option name="unitId" value="90537" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="116081" />
                      <option name="index" value="4" />
                      <option name="name" value="Functions" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570208000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Functions&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/104306/step/1&quot;&gt;Read &amp;quot;Functions&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399536" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/MultiplyByFour.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/MultiplyByFour.kt" />
                                      <option name="text" value="// Functions/MultiplyByFour.kt&#10;&#10;fun multiplyByFour(x: Int) = x * 4&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val result: Int = multiplyByFour(5)&#10;  println(result)&#10;}&#10;/* Output:&#10;20&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/MultiplyByThree.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/MultiplyByThree.kt" />
                                      <option name="text" value="// Functions/MultiplyByThree.kt&#10;&#10;fun multiplyByThree(x: Int): Int = x * 3&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  println(multiplyByThree(5))&#10;}&#10;/* Output:&#10;15&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/MultiplyByTwo.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/MultiplyByTwo.kt" />
                                      <option name="text" value="// Functions/MultiplyByTwo.kt&#10;&#10;fun multiplyByTwo(x: Int): Int {  // [1]&#10;  println(&quot;Inside multiplyByTwo&quot;) // [2]&#10;  return x * 2&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val r = multiplyByTwo(5)        // [3]&#10;  println(r)&#10;}&#10;/* Output:&#10;Inside multiplyByTwo&#10;10&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/SayHello.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/SayHello.kt" />
                                      <option name="text" value="// Functions/SayHello.kt&#10;&#10;fun sayHello() {&#10;  println(&quot;Hallo!&quot;)&#10;}&#10;&#10;fun sayGoodbye(): Unit {&#10;  println(&quot;Auf Wiedersehen!&quot;)&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  sayHello()&#10;  sayGoodbye()&#10;}&#10;/* Output:&#10;Hallo!&#10;Auf Wiedersehen!&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570205000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Functions (#1)&lt;/h2&gt;&lt;p&gt;Create a function &lt;code&gt;getSquare()&lt;/code&gt; that takes an &lt;code&gt;Int&lt;/code&gt; argument and&#10;returns its square.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Functions+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399537" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="49" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="49" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="i * i" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package functions1&#10;&#10;fun getSquare(i: Int): Int = TODO()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(getSquare(2))  // 4&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package functions1&#10;&#10;import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class TestFunctions1 {&#10;    private fun testFunction(i: Int) {&#10;        Assert.assertEquals(&quot;getSquare($i) should return ${i * i}&quot;,&#10;                i * i, getSquare(i))&#10;    }&#10;&#10;    @Test fun test1() = testFunction(5)&#10;&#10;    @Test fun test2() = testFunction(-3)&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570206000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Functions (#2)&lt;/h2&gt;&lt;p&gt;Create a function &lt;code&gt;getSum()&lt;/code&gt; that takes three &lt;code&gt;Double&lt;/code&gt; arguments&#10;and returns their sum.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Functions+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399538" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="74" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="74" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="a + b + c" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package functions2&#10;&#10;fun getSum(a: Double, b: Double, c: Double): Double = TODO()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(getSum(1.0, 2.2, 3.4))  // 6.6&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package functions2&#10;&#10;import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class TestFunctions2 {&#10;    private fun checkFunction(a: Double, b: Double, c: Double) {&#10;        val sum = a + b + c&#10;        Assert.assertEquals(&quot;getSum($a, $b, $c) should return $sum&quot;,&#10;                sum, getSum(a, b, c), 0.000001)&#10;    }&#10;&#10;    @Test fun test1() = checkFunction(1.0, 2.1, 6.9)&#10;&#10;    @Test fun test2() = checkFunction(0.0, 42.0, -42.0)&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570206000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Functions (#3)&lt;/h2&gt;&lt;p&gt;Create a function &lt;code&gt;duplicate()&lt;/code&gt; that takes a &lt;code&gt;String&lt;/code&gt; argument&#10;and returns that &lt;code&gt;String&lt;/code&gt; repeated twice.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Functions+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399539" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="55" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="55" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="s + s" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package functions3&#10;&#10;fun duplicate(s: String): String = TODO()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(duplicate(&quot;abc&quot;))  // abcabc&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package functions3&#10;&#10;import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class TestFunctions3 {&#10;    private fun checkFunction(s: String) {&#10;        Assert.assertEquals(&quot;&quot;&quot;duplicate($s) should return &quot;$s$s&quot;&quot;&quot;&quot;,&#10;                duplicate(s), &quot;$s$s&quot;)&#10;    }&#10;&#10;    @Test fun test1() = checkFunction(&quot;abc&quot;)&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570207000" />
                          </EduTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: More Intentions&lt;/h2&gt;&lt;p&gt;You can automatically convert a function with a block body to a function with&#10;an expression body, and vice versa. Put the caret somewhere on the &lt;code&gt;return&lt;/code&gt; &#10;keyword, press &lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:ShowIntentionActions;&lt;/span&gt; &#10;to call the intention actions menu, and choose&#10;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Convert to expression body&lt;/code&gt;&lt;/span&gt;. &#10;After the conversion the type remains highlighted, which is&#10;convenient because you can either remove the type declaration by pressing&#10;&lt;code&gt;Delete&lt;/code&gt; or leave it by navigating the caret to the right.&lt;/p&gt;&lt;p&gt;To apply the reverse intention, press &#10;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:ShowIntentionActions;&lt;/span&gt; &#10;on the equal sign on the function with expression body and choose the&#10;reverse conversion.&lt;/p&gt;&lt;p&gt;Apply &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Convert to expression body&lt;/code&gt;&lt;/span&gt;, and then &#10;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Convert to block body&lt;/code&gt;&lt;/span&gt; intention actions.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Functions+%2F+Exercise4&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="5" />
                            <option name="name" value="Exercise 4" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399542" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package functions4&#10;&#10;fun foo(): String {&#10;    return &quot;abc&quot;&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(foo())&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package functions4" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570208000" />
                          </IdeTask>
                        </list>
                      </option>
                      <option name="unitId" value="90540" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="116084" />
                      <option name="index" value="5" />
                      <option name="name" value="if Expressions" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570213000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;&lt;code&gt;if&lt;/code&gt; Expressions&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/104307/step/1&quot;&gt;Read &amp;quot;&lt;code&gt;if&lt;/code&gt; Expressions&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399543" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/If1.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/If1.kt" />
                                      <option name="text" value="// IfExpressions/If1.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  if (1 &gt; 0)&#10;    println(&quot;It's true!&quot;)&#10;  if (10 &lt; 11) {&#10;    println(&quot;10 &lt; 11&quot;)&#10;    println(&quot;ten is less than eleven&quot;)&#10;  }&#10;}&#10;/* Output:&#10;It's true!&#10;10 &lt; 11&#10;ten is less than eleven&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/If2.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/If2.kt" />
                                      <option name="text" value="// IfExpressions/If2.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val x: Boolean = 1 &gt;= 1&#10;  if (x)&#10;    println(&quot;It's true!&quot;)&#10;}&#10;/* Output:&#10;It's true!&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/If3.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/If3.kt" />
                                      <option name="text" value="// IfExpressions/If3.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val n: Int = -11&#10;  if (n &gt; 0)&#10;    println(&quot;It's positive&quot;)&#10;  else&#10;    println(&quot;It's negative or zero&quot;)&#10;}&#10;/* Output:&#10;It's negative or zero&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/If4.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/If4.kt" />
                                      <option name="text" value="// IfExpressions/If4.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val n: Int = -11&#10;  if (n &gt; 0)&#10;    println(&quot;It's positive&quot;)&#10;  else if (n == 0)&#10;    println(&quot;It's zero&quot;)&#10;  else&#10;    println(&quot;It's negative&quot;)&#10;}&#10;/* Output:&#10;It's negative&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/If5.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/If5.kt" />
                                      <option name="text" value="// IfExpressions/If5.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val y: Boolean = false&#10;  if (!y)&#10;    println(&quot;!y is true&quot;)&#10;}&#10;/* Output:&#10;!y is true&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/If6.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/If6.kt" />
                                      <option name="text" value="// IfExpressions/If6.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val result = if (99 &gt; 100) 4 else 42&#10;  println(result)&#10;}&#10;/* Output:&#10;42&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/OneOrTheOther.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/OneOrTheOther.kt" />
                                      <option name="text" value="// IfExpressions/OneOrTheOther.kt&#10;&#10;fun oneOrTheOther(exp: Boolean): String =&#10;  if (exp)&#10;    &quot;True!&quot; // No 'return' necessary&#10;  else&#10;    &quot;False&quot;&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val x = 1&#10;  println(oneOrTheOther(x == 1))&#10;  println(oneOrTheOther(x == 2))&#10;}&#10;/* Output:&#10;True!&#10;False&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/TrueOrFalse.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/TrueOrFalse.kt" />
                                      <option name="text" value="// IfExpressions/TrueOrFalse.kt&#10;&#10;fun trueOrFalse(exp: Boolean): String {&#10;  if (exp)&#10;    return &quot;It's true!&quot;          // [1]&#10;  return &quot;It's false&quot;&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val b = 1&#10;  println(trueOrFalse(b &lt; 3))&#10;  println(trueOrFalse(b &gt;= 3))&#10;}&#10;/* Output:&#10;It's true!&#10;It's false&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570210000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;&lt;code&gt;if&lt;/code&gt; Expressions (#1)&lt;/h2&gt;&lt;p&gt;Create a function &lt;code&gt;checkSign()&lt;/code&gt; that checks whether an integer number is&#10;positive, negative or zero, and returns one of the strings &amp;quot;positive&amp;quot;,&#10;&amp;quot;negative&amp;quot; or &amp;quot;zero&amp;quot; as a result.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+if+Expressions+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399544" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="61" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="61" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="&#10;        if (number &gt; 0)&#10;            &quot;positive&quot;&#10;        else if (number &lt; 0)&#10;            &quot;negative&quot;&#10;        else&#10;            &quot;zero&quot;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package ifExpressions1&#10;&#10;fun checkSign(number: Int): String = TODO()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(checkSign(-19))  // negative&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package ifExpressions1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestIfExpressions1 {&#10;    private fun checkFunction(number: Int, sign: String) {&#10;        Assert.assertEquals(&quot;&quot;&quot;checkSign($number) should return &quot;$sign&quot;&quot;&quot;&quot;,&#10;                sign, checkSign(number))&#10;    }&#10;&#10;    @Test fun test1Positive() = checkFunction(10, &quot;positive&quot;)&#10;&#10;    @Test fun test2Zero() = checkFunction(0, &quot;zero&quot;)&#10;&#10;    @Test fun test3Negative() = checkFunction(-10, &quot;negative&quot;)&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570211000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;&lt;code&gt;if&lt;/code&gt; Expressions (#2)&lt;/h2&gt;&lt;p&gt;Create a function &lt;code&gt;abs()&lt;/code&gt; that returns the absolute value of its argument:&#10;for example, &lt;code&gt;abs(3)&lt;/code&gt; is &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;abs(-5)&lt;/code&gt; is &lt;code&gt;5&lt;/code&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+if+Expressions+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399545" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="52" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="52" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="&#10;        if (number &gt; 0) number else -number" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package ifExpressions2&#10;&#10;fun abs(number: Int): Int = TODO()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(abs(-19))  // 19&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package ifExpressions2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestIfExpressions2 {&#10;    private fun checkFunction(number: Int) {&#10;        val abs = if (number &gt; 0) number else -number&#10;        Assert.assertEquals(&quot;abs($number) should return $abs&quot;,&#10;                abs, abs(number))&#10;    }&#10;&#10;    @Test fun testAbs1() = checkFunction(1)&#10;&#10;    @Test fun testAbs2() = checkFunction(-3)&#10;&#10;    @Test fun testAbs3() = checkFunction(-1001)&#10;&#10;    @Test fun testAbs4() = checkFunction(0)&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570212000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;&lt;code&gt;if&lt;/code&gt; Expressions (#3)&lt;/h2&gt;&lt;p&gt;Create a function &lt;code&gt;findMax()&lt;/code&gt; that finds the maximum between two integer arguments.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+if+Expressions+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399546" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="68" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="68" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="&#10;        if (first &gt; second) first else second" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package ifExpressions3&#10;&#10;fun findMax(first: Int, second: Int): Int = TODO()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(findMax(-1, 4))  // 4&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package ifExpressions3&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestIfExpressions3 {&#10;    private fun checkFunction(first: Int, second: Int) {&#10;        val max = if (first &gt; second) first else second&#10;        Assert.assertEquals(&quot;findMax($first, $second) should return $max&quot;,&#10;                max, findMax(first, second))&#10;    }&#10;&#10;    @Test fun testMax1() = checkFunction(1, 2)&#10;&#10;    @Test fun testMax2() = checkFunction(-1001, 22)&#10;&#10;    @Test fun testMax3() = checkFunction(-3, -3)&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570212000" />
                          </EduTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: Navigating to a Function&lt;/h2&gt;&lt;p&gt;You can easily see how a function is defined. To navigate to a function&#10;definition, put the caret on the usage and press&#10;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:GotoDeclaration;&lt;/span&gt;. &#10;Alternatively, you may choose &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Navigate&lt;/code&gt;&lt;/span&gt; &#10;in the application menu, and then &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Declaration&lt;/code&gt;&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;Put the caret on the &lt;code&gt;oneOrTheOther()&lt;/code&gt; function usage in &lt;code&gt;main()&lt;/code&gt; and navigate&#10;to the function definition. Your caret should move to the &lt;code&gt;oneOrTheOther()&lt;/code&gt;&#10;function definition.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+if+Expressions+%2F+Exercise4&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="5" />
                            <option name="name" value="Exercise 4" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399548" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package ifExpressions4&#10;&#10;fun oneOrTheOther(exp: Boolean) =&#10;        if (exp)&#10;            &quot;True!&quot;&#10;        else&#10;            &quot;False&quot;&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val x = 1&#10;    println(oneOrTheOther(x == 1))  // True!&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package ifExpressions4" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570213000" />
                          </IdeTask>
                        </list>
                      </option>
                      <option name="unitId" value="90542" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="116087" />
                      <option name="index" value="6" />
                      <option name="name" value="String Templates" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1539354233000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;String Templates&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/104308/step/1&quot;&gt;Read &amp;quot;String Templates&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399550" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/ExpressionInTemplate.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ExpressionInTemplate.kt" />
                                      <option name="text" value="// StringTemplates/ExpressionInTemplate.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val condition = true&#10;  println(&#10;    &quot;${if (condition) 'a' else 'b'}&quot;)  // [1]&#10;  val x = 11&#10;  println(&quot;$x + 4 = ${x + 4}&quot;)&#10;}&#10;/* Output:&#10;a&#10;11 + 4 = 15&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/StringConcatenation.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/StringConcatenation.kt" />
                                      <option name="text" value="// StringTemplates/StringConcatenation.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val s = &quot;hi\n&quot;                // [1]&#10;  val n = 11&#10;  val d = 3.14&#10;  println(&quot;first: &quot; + s + &quot;second: &quot; +&#10;    n + &quot;, third: &quot; + d)&#10;}&#10;/* Output:&#10;first: hi&#10;second: 11, third: 3.14&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/StringTemplates.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/StringTemplates.kt" />
                                      <option name="text" value="// StringTemplates/StringTemplates.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val answer = 42&#10;  println(&quot;Found $answer!&quot;)     // [1]&#10;  println(&quot;printing a $1&quot;)      // [2]&#10;}&#10;/* Output:&#10;Found 42!&#10;printing a $1&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/TripleQuotes.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/TripleQuotes.kt" />
                                      <option name="text" value="// StringTemplates/TripleQuotes.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val s = &quot;value&quot;&#10;  println(&quot;s = \&quot;$s\&quot;.&quot;)&#10;  println(&quot;&quot;&quot;s = &quot;$s&quot;.&quot;&quot;&quot;)&#10;}&#10;/* Output:&#10;s = &quot;value&quot;.&#10;s = &quot;value&quot;.&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570215000" />
                          </TheoryTask>
                          <OutputTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;String Templates (#1)&lt;/h2&gt;&lt;p&gt;Display the result of the function &lt;code&gt;findMax()&lt;/code&gt; in the form &amp;quot;The maximum between x&#10;and y is max.&amp;quot; with values of the corresponding &lt;code&gt;val&lt;/code&gt;s instead of &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;&#10;and &lt;code&gt;max&lt;/code&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+String+Templates+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399551" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="70" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="70" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="if Expressions" />
                                                <option name="placeholderIndex" value="0" />
                                                <option name="sectionName" value="Programming Basics" />
                                                <option name="taskName" value="Exercise 3" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="&#10;        if (first &gt; second) first else second" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="153" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="153" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="&#10;    val max = findMax(first, second)&#10;    println(&quot;The maximum between $first and $second is $max.&quot;)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package stringTemplates1&#10;&#10;fun findMax(first: Int, second: Int): Int = TODO()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val first = 17&#10;    val second = 31&#10;    TODO()&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/output.txt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/output.txt" />
                                      <option name="text" value="The maximum between 17 and 31 is 31.&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1539354233000" />
                          </OutputTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;String Templates (#2)&lt;/h2&gt;&lt;p&gt;Implement the &lt;code&gt;record()&lt;/code&gt; function that constructs a string in a form:&#10;&lt;code&gt;index. [status] message&lt;/code&gt;&lt;/p&gt;&lt;p&gt;It should add a line break at the end of the string.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+String+Templates+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399552" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="100" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="100" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="&quot;$index. [$status] $message\n&quot;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package stringTemplates2&#10;&#10;fun record(index: Int, status: String, message: String): String =&#10;        TODO()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    print(record(1, &quot;OK&quot;, &quot;Everything is fine.&quot;))&#10;    print(record(2, &quot;Fail&quot;, &quot;Something has broken.&quot;))&#10;}&#10;&#10;/* Output:&#10;1. [OK] Everything is fine.&#10;2. [Fail] Something has broken.&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package stringTemplates2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestStringTemplates2 {&#10;    private fun checkRecord(index: Int, status: String, message: String) {&#10;        val record = &quot;$index. [$status] $message\n&quot;&#10;        Assert.assertEquals(&quot;&quot;&quot;record($index, &quot;$status&quot;, &quot;$message&quot;) should return $record&quot;&quot;&quot;,&#10;                record, record(index, status, message))&#10;    }&#10;&#10;    @Test fun testRecord1() = checkRecord(1, &quot;OK&quot;, &quot;Everything is fine.&quot;)&#10;&#10;    @Test fun testRecord2() = checkRecord(2, &quot;Fail&quot;, &quot;Something has broken.&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570216000" />
                          </EduTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: Search and Replace&lt;/h2&gt;&lt;p&gt;You can search and then replace any text in a file.&#10;Press &lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:Find;&lt;/span&gt; for &lt;code&gt;Find&lt;/code&gt; and &#10;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:Replace;&lt;/span&gt; for &lt;code&gt;Replace&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Alternatively, you can choose &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Edit&lt;/code&gt;&lt;/span&gt; menu item&#10;from the application menu, then choose&#10;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Find&lt;/code&gt;&lt;/span&gt; from the list below, and then&#10;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Find...&lt;/code&gt;&lt;/span&gt; one more time. &#10;By choosing &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Replace...&lt;/code&gt;&lt;/span&gt; &#10;instead of &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Find...&lt;/code&gt;&lt;/span&gt; you can specify the&#10;replacement string.&lt;/p&gt;&lt;p&gt;Replace all the &lt;code&gt;foo&lt;/code&gt; expressions in the file with &lt;code&gt;bar&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Note that you can press &lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:Find;&lt;/span&gt;, &#10;start typing, then press &lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:Replace;&lt;/span&gt;&#10;and the history is preserved.&#10;Pressing &lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:Replace;&lt;/span&gt; adds field,&#10;where you can type the replace string.&lt;/p&gt;&lt;p&gt;Click on the small arrow to the left of the typing window to see the search history.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+String+Templates+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399553" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package stringTemplates3&#10;&#10;// foo&#10;fun foo() = 1&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(foo())&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package stringTemplates3" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570218000" />
                          </IdeTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: Rename&lt;/h2&gt;&lt;p&gt;The IDE simplifies a lot of typical actions. For instance, suppose you want&#10;to rename a declaration. Inventing a good name for a &lt;code&gt;val&lt;/code&gt; or a function is&#10;difficult, so it's often an iterative process. You may create and use a&#10;function, but then think up a better name for it.&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Find&lt;/code&gt;&lt;/span&gt; and &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Replace&lt;/code&gt;&lt;/span&gt;&#10;may lead to unexpected results, because the name might&#10;appear in different contexts, for instance inside strings or comments. In the&#10;code example you may see the &lt;code&gt;answer&lt;/code&gt; as a name of &lt;code&gt;val&lt;/code&gt;, which is a part of the&#10;string literal as well. If we're talking about renaming functions, it's even&#10;more complicated, because the function might be used in many files, and doing&#10;rename properly in many places by hand is a complicated task.&lt;/p&gt;&lt;p&gt;IDE allows to rename a declaration automatically.&#10;Put the caret on the &lt;code&gt;val&lt;/code&gt; name and press &#10;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:RenameElement;&lt;/span&gt;.&#10;Alternatively, you may choose &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Refactor&lt;/code&gt;&lt;/span&gt;&#10;from the application menu, then choose &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Rename&lt;/code&gt;&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;Rename the &lt;code&gt;val&lt;/code&gt; name to &lt;code&gt;result&lt;/code&gt; without renaming &amp;quot;answer&amp;quot; in the string&#10;literal.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+String+Templates+%2F+Exercise4&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="5" />
                            <option name="name" value="Exercise 4" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399554" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package stringTemplates4&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val answer = 42&#10;    println(&quot;The answer is $answer&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package stringTemplates4&#10;&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570219000" />
                          </IdeTask>
                        </list>
                      </option>
                      <option name="unitId" value="90545" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="116088" />
                      <option name="index" value="7" />
                      <option name="name" value="Number Types" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570224000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Number Types&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/104309/step/1&quot;&gt;Read &amp;quot;Number Types&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399555" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/BMI.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/BMI.kt" />
                                      <option name="text" value="// NumberTypes/BMI.kt&#10;&#10;fun bmiStatus(&#10;  kg: Double,&#10;  heightM: Double&#10;): String {&#10;  val bmi = kg / (heightM * heightM)    // [1]&#10;  return if (bmi &lt; 18.5) &quot;Underweight&quot;&#10;    else if (bmi &lt; 25) &quot;Normal weight&quot;&#10;    else &quot;Overweight&quot;&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val kg = 72.57 // 160 lbs&#10;  val heightM = 1.727 // 68 inches&#10;  val status = bmiStatus(kg, heightM)&#10;  println(status)&#10;}&#10;/* Output:&#10;Normal weight&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/BiggestLong.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/BiggestLong.kt" />
                                      <option name="text" value="// NumberTypes/BiggestLong.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  println(Long.MAX_VALUE)&#10;}&#10;/* Output:&#10;9223372036854775807&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/InferInt.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/InferInt.kt" />
                                      <option name="text" value="// NumberTypes/InferInt.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val million = 1_000_000  // Infers Int&#10;  println(million)&#10;}&#10;/* Output:&#10;1000000&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/IntDivisionTruncates.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/IntDivisionTruncates.kt" />
                                      <option name="text" value="// NumberTypes/IntDivisionTruncates.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val numerator: Int = 19&#10;  val denominator: Int = 10&#10;  println(numerator / denominator)&#10;}&#10;/* Output:&#10;1&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/IntegerMath.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/IntegerMath.kt" />
                                      <option name="text" value="// NumberTypes/IntegerMath.kt&#10;&#10;fun bmiStatusInt(&#10;  lbs: Int,&#10;  height: Int&#10;): String {&#10;  val bmi =&#10;    lbs / (height * height) * 703.07 // [1]&#10;  return if (bmi &lt; 18.5) &quot;Underweight&quot;&#10;    else if (bmi &lt; 25) &quot;Normal weight&quot;&#10;    else &quot;Overweight&quot;&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val lbs = 160&#10;  val height = 68&#10;  val status = bmiStatusInt(lbs, height)&#10;  println(status)&#10;}&#10;/* Output:&#10;Underweight&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/IntegerOverflow.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/IntegerOverflow.kt" />
                                      <option name="text" value="// NumberTypes/IntegerOverflow.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val i: Int = Int.MAX_VALUE&#10;  println(i + i)&#10;}&#10;/* Output:&#10;-2&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/LongConstants.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/LongConstants.kt" />
                                      <option name="text" value="// NumberTypes/LongConstants.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val i = 0          // Infers Int&#10;  val l1 = 0L        // L creates Long&#10;  val l2: Long = 0   // Explicit type&#10;  println(&quot;$l1 $l2&quot;)&#10;}&#10;/* Output:&#10;0 0&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Modulus.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Modulus.kt" />
                                      <option name="text" value="// NumberTypes/Modulus.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val numerator: Int = 19&#10;  val denominator: Int = 10&#10;  println(numerator % denominator)&#10;}&#10;/* Output:&#10;9&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/OpOrder.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/OpOrder.kt" />
                                      <option name="text" value="// NumberTypes/OpOrder.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  println(45 + 5 * 6)&#10;}&#10;/* Output:&#10;75&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/OpOrderParens.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/OpOrderParens.kt" />
                                      <option name="text" value="// NumberTypes/OpOrderParens.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  println( (45 + 5) * 6 )&#10;}&#10;/* Output:&#10;300&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/UsingLongs.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/UsingLongs.kt" />
                                      <option name="text" value="// NumberTypes/UsingLongs.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val i = Int.MAX_VALUE&#10;  println(0L + i + i)              // [1]&#10;  println(1_000_000 * 1_000_000L)  // [2]&#10;}&#10;/* Output:&#10;4294967294&#10;1000000000000&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570221000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Number Types (#1)&lt;/h2&gt;&lt;p&gt;Make sure you understand how arithmetical operations work. Write down your&#10;answers to the following expressions and then check yourself using Kotlin:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;val a = 11 / 3&#10;val b = 11 % 3&#10;val c = a * 3 + b&#10;val d = 6 / 5.0&#10;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that the &lt;code&gt;val&lt;/code&gt;s &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt; have type &lt;code&gt;Int&lt;/code&gt;, while the &lt;code&gt;val&lt;/code&gt;&#10;&lt;code&gt;d&lt;/code&gt; has type &lt;code&gt;Double&lt;/code&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Number+Types+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399556" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="1" />
                                                <option name="offset" value="40" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="1" />
                                            <option name="offset" value="40" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="0" />
                                            <option name="possibleAnswer" value="3" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="1" />
                                                <option name="offset" value="61" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="1" />
                                            <option name="offset" value="61" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="0" />
                                            <option name="possibleAnswer" value="2" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="2" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="1" />
                                                <option name="offset" value="85" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="1" />
                                            <option name="offset" value="85" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="0" />
                                            <option name="possibleAnswer" value="11" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="3" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="3" />
                                                <option name="offset" value="107" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="3" />
                                            <option name="offset" value="107" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="0.0" />
                                            <option name="possibleAnswer" value="1.2" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package numberTypes1&#10;&#10;// 11 / 3&#10;val a = 0&#10;&#10;// 11 % 3&#10;val b = 0&#10;&#10;// a * 3 + b&#10;val c = 0&#10;&#10;// 6 / 5.0&#10;val d = 0.0" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package numberTypes1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestNumberTypes1 {&#10;    @Test fun testA() {&#10;        Assert.assertEquals(3, a)&#10;    }&#10;&#10;    @Test fun testB() {&#10;        Assert.assertEquals(2, b)&#10;    }&#10;&#10;    @Test fun testC() {&#10;        Assert.assertEquals(11, c)&#10;    }&#10;&#10;    @Test fun testD() {&#10;        Assert.assertEquals(1.2, d.toDouble(), 0.0001)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570221000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Number Types (#2)&lt;/h2&gt;&lt;p&gt;Check which of the following values can't be stored in an &lt;code&gt;Int&lt;/code&gt; type: a&#10;million (10&lt;sup&gt;6&lt;/sup&gt;), a billion (10&lt;sup&gt;9&lt;/sup&gt;), a trillion&#10;(10&lt;sup&gt;12&lt;/sup&gt;), a quintillion (10&lt;sup&gt;18&lt;/sup&gt;).&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Number+Types+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399558" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="1" />
                                                <option name="offset" value="98" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="1" />
                                            <option name="offset" value="98" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="0" />
                                            <option name="possibleAnswer" value="1_000_000_000" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="126" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="126" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="&quot;Int&quot;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="2" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="1" />
                                                <option name="offset" value="149" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="1" />
                                            <option name="offset" value="149" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="0" />
                                            <option name="possibleAnswer" value="1_000_000_000_000" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="3" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="178" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="178" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="&quot;Long&quot;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="4" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="1" />
                                                <option name="offset" value="204" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="1" />
                                            <option name="offset" value="204" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="0" />
                                            <option name="possibleAnswer" value="1_000_000_000_000_000_000" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="5" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="236" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="236" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="&quot;Long&quot;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package numberTypes2&#10;&#10;val million: Int = 1_000_000&#10;val millionType: String = &quot;Int&quot;&#10;&#10;val billion = 0&#10;val billionType: String = TODO()&#10;&#10;val trillion = 0&#10;val trillionType: String = TODO()&#10;&#10;val quintillion = 0&#10;val quintillionType: String = TODO()" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package numberTypes2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestNumberTypes2 {&#10;    @Test&#10;    fun test1Million() {&#10;        Assert.assertEquals(1_000_000, million)&#10;    }&#10;&#10;    @Test&#10;    fun test2Billion() {&#10;        Assert.assertEquals(1_000_000_000, billion)&#10;    }&#10;&#10;    @Test&#10;    fun test3Trillion() {&#10;        Assert.assertEquals(1_000_000_000_000, trillion)&#10;    }&#10;&#10;    @Test&#10;    fun test4Quintillion() {&#10;        Assert.assertEquals(1_000_000_000_000_000_000, quintillion)&#10;    }&#10;&#10;    @Test&#10;    fun test5MillionType() {&#10;        Assert.assertEquals(&quot;Int&quot;, millionType)&#10;    }&#10;&#10;    @Test&#10;    fun test6BillionType() {&#10;        Assert.assertEquals(&quot;Int&quot;, billionType)&#10;    }&#10;&#10;    @Test&#10;    fun test7TrillionType() {&#10;        Assert.assertEquals(&quot;Long&quot;, trillionType)&#10;    }&#10;&#10;    @Test&#10;    fun test8QuintillionType() {&#10;        Assert.assertEquals(&quot;Long&quot;, quintillionType)&#10;    }&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570222000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Number Types (#3)&lt;/h2&gt;&lt;p&gt;Create two functions: the first converts Fahrenheit to Celsius, and the second&#10;converts Celsius to Fahrenheit. To convert Fahrenheit to Celsius first subtract&#10;&lt;code&gt;32&lt;/code&gt;, then multiply by &lt;code&gt;5/9&lt;/code&gt;. If you get &lt;code&gt;0&lt;/code&gt;, check to make sure you didn't do&#10;integer math. For the second conversion first multiply by &lt;code&gt;9/5&lt;/code&gt;, then add &lt;code&gt;32&lt;/code&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Number+Types+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399560" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="79" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="79" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="(f - 32) * (5.0 / 9)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="144" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="144" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="c * (9.0 / 5) + 32" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package numberTypes3&#10;&#10;fun convertFahrenheitToCelsius(f: Int): Double =&#10;        TODO()&#10;&#10;fun convertCelsiusToFahrenheit(c: Int): Double =&#10;        TODO()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(convertFahrenheitToCelsius(68)) // 20.0&#10;    println(convertCelsiusToFahrenheit(20)) // 68.0&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package numberTypes3&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestNumberTypes3 {&#10;    private fun checkFahrenheitToCelsius(C: Double, F: Int) {&#10;        Assert.assertEquals(&quot;$F F should be $C C&quot;,&#10;                C, convertFahrenheitToCelsius(F), 0.0001)&#10;    }&#10;&#10;    private fun checkCelsiusToFahrenheit(F: Double, C: Int) {&#10;        Assert.assertEquals(&quot;$C C should be $F F&quot;,&#10;                F, convertCelsiusToFahrenheit(C), 0.0001)&#10;    }&#10;&#10;    @Test fun test1FahrenheitToCelsius() = checkFahrenheitToCelsius(-15.0, 5)&#10;&#10;    @Test fun test2FahrenheitToCelsius() = checkFahrenheitToCelsius(37.7778, 100)&#10;&#10;    @Test fun test3CelsiusToFahrenheit() = checkCelsiusToFahrenheit(5.0, -15)&#10;&#10;    @Test fun test4CelsiusToFahrenheit() = checkCelsiusToFahrenheit(68.0, 20)&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570223000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Number Types (#4)&lt;/h2&gt;&lt;p&gt;Create a function that converts a period of time given in a number of hours,&#10;minutes and seconds into milliseconds. (One second is a thousand&#10;milliseconds). For instance, one hour and a half is &lt;code&gt;5_400_000&lt;/code&gt; milliseconds.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Number+Types+%2F+Exercise4&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="5" />
                            <option name="name" value="Exercise 4" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399561" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="104" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="104" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="(((hours * 60L + minutes) * 60) + seconds) * 1000" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package numberTypes4&#10;&#10;fun convertToMilliseconds(hours: Int, minutes: Int, seconds: Int): Long =&#10;        TODO()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(convertToMilliseconds(1, 30, 0))&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package numberTypes4&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestNumberTypes4 {&#10;    @Test fun test1() {&#10;        Assert.assertEquals(&quot;One hour and a half is 5_400_000 milliseconds&quot;,&#10;                5_400_000, convertToMilliseconds(1, 30, 0))&#10;    }&#10;&#10;    @Test fun test2() {&#10;        Assert.assertEquals(&quot;One billion hours is 3_600_000_000_000_000 milliseconds &quot; +&#10;                &quot;(note that only Long variable can store this value)&quot;,&#10;                3_600_000_000_000_000, convertToMilliseconds(1_000_000_000, 0, 0))&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570224000" />
                          </EduTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: Find Action&lt;/h2&gt;&lt;p&gt;Memorizing the shortcuts for the different actions takes time.&#10;After a while, you'll learn automatically the ones that you use often, &#10;but remembering all of them is almost impossible.&lt;/p&gt;&lt;p&gt;To solve this, IntelliJ IDEA provides a universal way to call an action by its&#10;name. Simply press &lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:GotoAction;&lt;/span&gt;. &#10;Alternatively, you may choose &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Help | Find Action&lt;/code&gt;&lt;/span&gt;&#10;on the main menu.&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Find action&lt;/code&gt;&lt;/span&gt;&#10;allows you to enter the name you're looking for. You may type&#10;only a part of the name, and IntelliJ shows all the names that fit.&lt;/p&gt;&lt;p&gt;Try typing the names of actions that we've seen so far:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Specify type explicitly&lt;/code&gt;&lt;/span&gt;;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Rename&lt;/code&gt;&lt;/span&gt;;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Convert to expression/block body&lt;/code&gt;&lt;/span&gt;;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Navigate to declaration&lt;/code&gt;&lt;/span&gt;. &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;You can display the intention actions by calling the action &#10;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Show intention actions&lt;/code&gt;&lt;/span&gt;,&#10;but it's such a common operation that it's better to memorize a&#10;shortcut for it.&lt;/p&gt;&lt;p&gt;Rename &lt;code&gt;val x&lt;/code&gt; and specify its type explicitly by calling&#10;corresponding actions using &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Find action&lt;/code&gt;&lt;/span&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Number+Types+%2F+Exercise5&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="6" />
                            <option name="name" value="Exercise 5" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399562" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package numberTypes5&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val x = 10&#10;    println(x + 1)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package numberTypes5" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570224000" />
                          </IdeTask>
                        </list>
                      </option>
                      <option name="unitId" value="90548" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="116092" />
                      <option name="index" value="8" />
                      <option name="name" value="Booleans" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570228000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Booleans&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/104310/step/1&quot;&gt;Read &amp;quot;Booleans&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399564" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Booleans1.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Booleans1.kt" />
                                      <option name="text" value="// Booleans/Booleans1.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val hour = 6&#10;  val open = 9&#10;  val closed = 20&#10;  println(&quot;Operating hours: $open - $closed&quot;)&#10;  val isOpen =&#10;    if (hour &gt;= open &amp;&amp; hour &lt;= closed) // [1]&#10;      true&#10;    else&#10;      false&#10;  println(&quot;Open: $isOpen&quot;)&#10;}&#10;/* Output:&#10;Operating hours: 9 - 20&#10;Open: false&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Booleans2.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Booleans2.kt" />
                                      <option name="text" value="// Booleans/Booleans2.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val hour = 6&#10;  val open = 9&#10;  val closed = 20&#10;  println(&quot;Operating hours: $open - $closed&quot;)&#10;  val isOpen = hour &gt;= open &amp;&amp; hour &lt;= closed&#10;  println(&quot;Open: $isOpen&quot;)&#10;}&#10;/* Output:&#10;Operating hours: 9 - 20&#10;Open: false&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Booleans3.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Booleans3.kt" />
                                      <option name="text" value="// Booleans/Booleans3.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val hour = 6&#10;  val open = 9&#10;  val closed = 20&#10;  println(&quot;Operating hours: $open - $closed&quot;)&#10;  val isClosed = hour &lt; open || hour &gt; closed&#10;  println(&quot;Closed: $isClosed&quot;)&#10;}&#10;/* Output:&#10;Operating hours: 9 - 20&#10;Closed: true&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/EvaluationOrder.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/EvaluationOrder.kt" />
                                      <option name="text" value="// Booleans/EvaluationOrder.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val sunny = true&#10;  val hoursSleep = 6&#10;  val exercise = false&#10;  val temp = 55&#10;&#10;  // [1]:&#10;  val happy1 = sunny &amp;&amp; temp &gt; 50 ||&#10;    exercise &amp;&amp; hoursSleep &gt; 7&#10;  println(happy1)&#10;&#10;  // [2]:&#10;  val sameHappy1 = (sunny &amp;&amp; temp &gt; 50) ||&#10;    (exercise &amp;&amp; hoursSleep &gt; 7)&#10;  println(sameHappy1)&#10;&#10;  // [3]:&#10;  val notSame =&#10;    (sunny &amp;&amp; temp &gt; 50 || exercise) &amp;&amp;&#10;      hoursSleep &gt; 7&#10;  println(notSame)&#10;}&#10;/* Output:&#10;true&#10;true&#10;false&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570226000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Booleans (#1)&lt;/h2&gt;&lt;p&gt;Write down your guesses to the answers for the following boolean expressions&#10;and then check yourself using Kotlin:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;val a = (178 +  131 &amp;gt; 209 + 99) &amp;amp;&amp;amp; false&#10;val b = 1 &amp;gt; 2 || 1 &amp;lt; 2&#10;val c = (111 - 101 &amp;gt;= 10) &amp;amp;&amp;amp; (11.0 &amp;gt; 10.99) &amp;amp;&amp;amp; true&#10;&lt;/code&gt;&lt;/pre&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Booleans+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399565" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="71" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="71" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="false" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="114" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="114" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="true" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="2" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="186" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="186" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="true" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package booleans1&#10;&#10;// (178 + 131 &gt; 209 + 99) &amp;&amp; false&#10;val a: Boolean = TODO()&#10;&#10;// 1 &gt; 2 || 1 &lt; 2&#10;val b: Boolean = TODO()&#10;&#10;// (111 - 101 &gt;= 10) &amp;&amp; (11.0 &gt; 10.99) &amp;&amp; true&#10;val c: Boolean = TODO()" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package booleans1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestBooleans1 {&#10;    @Test fun testA() {&#10;        Assert.assertFalse(a)&#10;    }&#10;&#10;    @Test fun testB() {&#10;        Assert.assertTrue(b)&#10;    }&#10;&#10;    @Test fun testC() {&#10;        Assert.assertTrue(c)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570227000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Booleans (#2)&lt;/h2&gt;&lt;p&gt;Using only &lt;code&gt;if&lt;/code&gt; expressions, implement the &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; functions, taking two&#10;Boolean arguments and returning the same results as the built-in &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt;&#10;operators.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Booleans+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399567" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="72" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="72" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="if (b1) b2 else false" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="132" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="132" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="if (b1) true else b2" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package booleans2&#10;&#10;fun and(b1: Boolean, b2: Boolean): Boolean =&#10;        TODO()&#10;&#10;fun or(b1: Boolean, b2: Boolean): Boolean =&#10;        TODO()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(and(true, true)) // true&#10;    println(or(true, false)) // true&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package booleans2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestBooleans2 {&#10;&#10;    private fun checkAnd(b1: Boolean, b2: Boolean) {&#10;        Assert.assertEquals(&quot;and($b1, $b2) should be ${b1 &amp;&amp; b2}&quot;, b1 &amp;&amp; b2, and(b1, b2))&#10;    }&#10;&#10;    private fun checkOr(b1: Boolean, b2: Boolean) {&#10;        Assert.assertEquals(&quot;or($b1, $b2) should be ${b1 || b2}&quot;, b1 || b2, or(b1, b2))&#10;    }&#10;&#10;    @Test fun testAnd1() = checkAnd(true, true)&#10;&#10;    @Test fun testAnd2() = checkAnd(true, false)&#10;&#10;    @Test fun testAnd3() = checkAnd(false, true)&#10;&#10;    @Test fun testAnd4() = checkAnd(false, false)&#10;&#10;    @Test fun testOr1() = checkOr(true, true)&#10;&#10;    @Test fun testOr2() = checkOr(true, false)&#10;&#10;    @Test fun testOr3() = checkOr(false, true)&#10;&#10;    @Test fun testOr4() = checkOr(false, false)&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570228000" />
                          </EduTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: Navigating Back and Forward&lt;/h2&gt;&lt;p&gt;You can easily navigate to a function declared in another file or to a function&#10;in a library. In this case, it's convenient to navigate backward afterward.&lt;/p&gt;&lt;p&gt;You navigate backward by pressing &lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:Back;&lt;/span&gt;,&#10;to navigate again forward press &lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:Forward;&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;Alternatively, you may choose &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Navigate | Back&lt;/code&gt;&lt;/span&gt; &#10;in the application menu, and &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Navigate | Forward&lt;/code&gt;&lt;/span&gt;.&#10;You can also choose to navigate to &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Last Edit Location&lt;/code&gt;&lt;/span&gt;&#10;in the same menu.&lt;/p&gt;&lt;p&gt;Navigate to the &lt;code&gt;foo()&lt;/code&gt; function definition, then back. After that navigate to&#10;the &lt;code&gt;println()&lt;/code&gt; function definition and back.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Booleans+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399568" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Foo.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Foo.kt" />
                                      <option name="text" value="package booleans3&#10;&#10;fun foo(): Boolean = true" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package booleans3&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(foo())&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package booleans3" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570228000" />
                          </IdeTask>
                        </list>
                      </option>
                      <option name="unitId" value="90551" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="116095" />
                      <option name="index" value="9" />
                      <option name="name" value="Repetition with while" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570233000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Repetition with &lt;code&gt;while&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/103808/step/1&quot;&gt;Read &amp;quot;Repetition with &lt;code&gt;while&lt;/code&gt;&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399570" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/AssignmentOperators.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/AssignmentOperators.kt" />
                                      <option name="text" value="// RepetitionWithWhile/AssignmentOperators.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  var n = 10&#10;  val d = 3&#10;  print(n)&#10;  while (n &gt; d) {&#10;    n -= d&#10;    print(&quot; - $d&quot;)&#10;  }&#10;  println(&quot; = $n&quot;)&#10;&#10;  var m = 10&#10;  print(m)&#10;  m %= d&#10;  println(&quot; % $d = $m&quot;)&#10;}&#10;/* Output:&#10;10 - 3 - 3 - 3 = 1&#10;10 % 3 = 1&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/DoWhileLoop.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/DoWhileLoop.kt" />
                                      <option name="text" value="// RepetitionWithWhile/DoWhileLoop.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  var i = 0&#10;  do {&#10;    print(&quot;.&quot;)&#10;    i += 10&#10;  } while (condition(i))&#10;}&#10;/* Output:&#10;..........&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/IncrementOperator.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/IncrementOperator.kt" />
                                      <option name="text" value="// RepetitionWithWhile/IncrementOperator.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  var i = 0&#10;  while (i &lt; 4) {&#10;    print(&quot;.&quot;)&#10;    i++&#10;  }&#10;}&#10;/* Output:&#10;....&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/WhileLoop.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/WhileLoop.kt" />
                                      <option name="text" value="// RepetitionWithWhile/WhileLoop.kt&#10;&#10;fun condition(i: Int) = i &lt; 100&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  var i = 0&#10;  while (condition(i)) {&#10;    print(&quot;.&quot;)&#10;    i += 10       // [1]&#10;  }&#10;}&#10;/* Output:&#10;..........&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570230000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Repetition with &lt;code&gt;while&lt;/code&gt; (#1)&lt;/h2&gt;&lt;p&gt;Using a &lt;code&gt;while&lt;/code&gt; loop create a function that sums up the numbers up to a given&#10;number, which you pass as the argument.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Repetition+with+while+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399571" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="62" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="62" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="var sum = 0&#10;    var i = 0&#10;    while (i &lt;= number) {&#10;        sum += i&#10;        i++&#10;    }&#10;    return sum" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package repetitionwithwhile1&#10;&#10;fun sum(number: Int): Int {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(sum(10))  // 55&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package repetitionwithwhile1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestRepetitionWithWhile {&#10;    private fun checkSum(i: Int) {&#10;        val expectedSum = (1..i).sum()&#10;        Assert.assertEquals(&quot;sum($i) should be $expectedSum&quot;, expectedSum, sum(i))&#10;    }&#10;&#10;    @Test fun testSum1() = checkSum(1)&#10;&#10;    @Test fun testSum2() = checkSum(2)&#10;&#10;    @Test fun testSum3() = checkSum(5)&#10;&#10;    @Test fun testSum4() = checkSum(10)&#10;&#10;    @Test fun testSum5() = checkSum(100)&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570231000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Repetition with &lt;code&gt;while&lt;/code&gt; (#2)&lt;/h2&gt;&lt;p&gt;Using a &lt;code&gt;while&lt;/code&gt; loop create a function that sums up only even numbers up to a&#10;given number, which you provide as the argument.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Repetition+with+while+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399572" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="63" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="63" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="&#10;    var result = 0&#10;    var i = 0&#10;    while (i &lt;= n) {&#10;        if (i % 2 == 0) {&#10;            result += i&#10;        }&#10;        i++&#10;    }&#10;    return result" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package repetitionwithwhile2&#10;&#10;fun sumOfEven(n: Int): Int {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(sumOfEven(10))  // 30&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package repetitionwithwhile2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestSumOfEven {&#10;    @Test fun test1() {&#10;        Assert.assertEquals(&quot;sumOfEven(1) should be 0&quot;,&#10;            0, sumOfEven(1))&#10;    }&#10;&#10;    @Test fun test2() {&#10;        Assert.assertEquals(&quot;sumOfEven(2) should be 2&quot;,&#10;            2, sumOfEven(2))&#10;    }&#10;&#10;    @Test fun test3() {&#10;        Assert.assertEquals(&quot;sumOfEven(4) should be 6&quot;,&#10;            6, sumOfEven(4))&#10;    }&#10;&#10;    @Test fun test4() {&#10;        Assert.assertEquals(&quot;sumOfEven(20) should be 110&quot;,&#10;            110, sumOfEven(20))&#10;    }&#10;&#10;    @Test fun test5() {&#10;        Assert.assertEquals(&quot;sumOfEven(21) should be 110&quot;,&#10;            110, sumOfEven(21))&#10;    }&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570232000" />
                          </EduTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: Moving the Caret&lt;/h2&gt;&lt;p&gt;You can move the caret over the words. The same works for selecting text:&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Operation&lt;/th&gt;&lt;th&gt;Shortcut&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Move to Next Word&lt;/td&gt;&lt;td&gt;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:EditorNextWord;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Move the caret to the next word.&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;intellij-row-even&quot;&gt;&lt;td&gt;Move to Previous Word&lt;/td&gt;&lt;td&gt;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:EditorPreviousWord;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Move the caret to the previous word.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Move to Next Word with Selection&lt;/td&gt;&lt;td&gt;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:EditorNextWordWithSelection;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Move the caret to the next word, selecting it.&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;intellij-row-even&quot;&gt;&lt;td&gt;Move to Previous Word with Selection&lt;/td&gt;&lt;td&gt;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:EditorPreviousWordWithSelection;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Move the caret to the previous word, selecting it.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;Select &lt;code&gt;getFooResult()&lt;/code&gt; by moving the caret over words and extract it into  a&#10;&lt;code&gt;val foo&lt;/code&gt; by hand. Next we'll discuss how to extract a variable automatically.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Repetition+with+while+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399574" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package repetitionwithwhile3&#10;&#10;fun getFooResult(): Int = 736&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(&quot;Foo result is: ${getFooResult()}&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package repetitionwithwhile3" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570232000" />
                          </IdeTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: Extract Variable&lt;/h2&gt;&lt;p&gt;IntelliJ IDEA can extract a &lt;code&gt;val&lt;/code&gt; or &lt;code&gt;var&lt;/code&gt; automatically.&#10;Select the expression &lt;code&gt;getFooResult()&lt;/code&gt; inside a string template &#10;and then do one of the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;invoke &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Find action&lt;/code&gt;&lt;/span&gt; (by pressing &lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:GotoAction;&lt;/span&gt;), &#10;then type &lt;code&gt;Extract variable&lt;/code&gt; to find the corresponding action; &lt;/li&gt;&lt;li&gt;press &lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:IntroduceVariable;&lt;/span&gt;;&lt;/li&gt;&lt;li&gt;or choose &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Refactor | Extract | Variable...&lt;/code&gt;&lt;/span&gt; &#10;in the application menu.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Type the name of the new variable. IntelliJ IDEA tries to suggest a name&#10;based on the expression. Press &#10;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:EditorEnter;&lt;/span&gt; to finish.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Repetition+with+while+%2F+Exercise4&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="5" />
                            <option name="name" value="Exercise 4" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399575" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package repetitionwithwhile4&#10;&#10;fun getFooResult(): Int = 736&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(&quot;Foo result is: ${getFooResult()}&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package repetitionwithwhile4" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570233000" />
                          </IdeTask>
                        </list>
                      </option>
                      <option name="unitId" value="90554" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="116097" />
                      <option name="index" value="10" />
                      <option name="name" value="Looping &amp; Ranges" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570239000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Looping &amp;amp; Ranges&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/104311/step/1&quot;&gt;Read &amp;quot;Looping &amp;amp; Ranges&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399576" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/AddingIntToChar.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/AddingIntToChar.kt" />
                                      <option name="text" value="// ForAndRanges/AddingIntToChar.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val ch: Char = 'a'&#10;  println(ch + 25)&#10;  println(ch &lt; 'z')&#10;}&#10;/* Output:&#10;z&#10;true&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/DefiningRanges.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/DefiningRanges.kt" />
                                      <option name="text" value="// ForAndRanges/DefiningRanges.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val range1 = 1..10             // [1]&#10;  val range2 = 0 until 10        // [2]&#10;  println(range1)&#10;  println(range2)&#10;}&#10;/* Output:&#10;1..10&#10;0..9&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ForWithCharRange.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ForWithCharRange.kt" />
                                      <option name="text" value="// ForAndRanges/ForWithCharRange.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  for (c in 'a'..'z')&#10;    print(c)&#10;}&#10;/* Output:&#10;abcdefghijklmnopqrstuvwxyz&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ForWithRanges.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ForWithRanges.kt" />
                                      <option name="text" value="// ForAndRanges/ForWithRanges.kt&#10;&#10;fun showRange(r: IntProgression) {&#10;  for (i in r)&#10;    print(&quot;$i &quot;)&#10;  print(&quot;    // $r&quot;)&#10;  println()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  showRange(1..5)&#10;  showRange(0 until 5)&#10;  showRange(5 downTo 1)           // [1]&#10;  showRange(0..9 step 2)          // [2]&#10;  showRange(0 until 10 step 3)    // [3]&#10;  showRange(9 downTo 2 step 3)&#10;}&#10;/* Output:&#10;1 2 3 4 5     // 1..5&#10;0 1 2 3 4     // 0..4&#10;5 4 3 2 1     // 5 downTo 1 step 1&#10;0 2 4 6 8     // 0..8 step 2&#10;0 3 6 9     // 0..9 step 3&#10;9 6 3     // 9 downTo 3 step 3&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/HasChar.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/HasChar.kt" />
                                      <option name="text" value="// ForAndRanges/HasChar.kt&#10;&#10;fun hasChar(s: String, ch: Char): Boolean {&#10;  for (c in s)&#10;    if (c == ch)&#10;      return true&#10;  return false&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  println(hasChar(&quot;kotlin&quot;, 't'))&#10;  println(hasChar(&quot;kotlin&quot;, 'a'))&#10;}&#10;/* Output:&#10;true&#10;false&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/IndexIntoString.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/IndexIntoString.kt" />
                                      <option name="text" value="// ForAndRanges/IndexIntoString.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val s = &quot;abc&quot;&#10;  for (i in 0..s.lastIndex)&#10;    print(s[i] + 1)&#10;}&#10;/* Output:&#10;bcd&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/IterateOverString.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/IterateOverString.kt" />
                                      <option name="text" value="// ForAndRanges/IterateOverString.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  for (ch in &quot;Jnskhm &quot;)&#10;    print(ch + 1)&#10;}&#10;/* Output:&#10;Kotlin!&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Repeat.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Repeat.kt" />
                                      <option name="text" value="// ForAndRanges/Repeat.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  repeat(2) {&#10;    println(&quot;hi!&quot;)&#10;  }&#10;}&#10;/* Output:&#10;hi!&#10;hi!&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/RepeatThreeTimes.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/RepeatThreeTimes.kt" />
                                      <option name="text" value="// ForAndRanges/RepeatThreeTimes.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  for (i in 1..3)&#10;    println(&quot;Hey $i!&quot;)&#10;}&#10;/* Output:&#10;Hey 1!&#10;Hey 2!&#10;Hey 3!&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/SumUsingRange.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/SumUsingRange.kt" />
                                      <option name="text" value="// ForAndRanges/SumUsingRange.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  var sum = 0&#10;  for (n in 10..100)&#10;    sum += n&#10;  println(&quot;sum = $sum&quot;)&#10;}&#10;/* Output:&#10;sum = 5005&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570235000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Looping &amp;amp; Ranges (#1)&lt;/h2&gt;&lt;p&gt;Using a &lt;code&gt;for&lt;/code&gt; loop, create a function that calculates the factorial of a given&#10;number (&lt;code&gt;n! = 1 * 2 * ... * n&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;A reminder: you can put an &lt;code&gt;L&lt;/code&gt; at the end of a number literal or use &lt;code&gt;.toLong()&lt;/code&gt;&#10;to convert an integer constant or expression to type &lt;code&gt;Long&lt;/code&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Looping+%26+Ranges+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399577" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="61" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="61" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="var result = 1L&#10;    for (i in 1..n) {&#10;        result *= i&#10;    }&#10;    return result" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package loopingandRanges1&#10;&#10;fun factorial(n: Int): Long {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(factorial(10))  // 3628800&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package loopingandRanges1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestFactorial {&#10;&#10;    @Test fun test1() {&#10;        Assert.assertEquals(&quot;1! should be 1&quot;,&#10;                1, factorial(1))&#10;    }&#10;&#10;    @Test fun test2() {&#10;        Assert.assertEquals(&quot;3! should be 6&quot;,&#10;                6, factorial(3))&#10;    }&#10;&#10;    @Test fun test3() {&#10;        Assert.assertEquals(&quot;10! should be 3628800&quot;,&#10;                3628800, factorial(10))&#10;    }&#10;&#10;    @Test fun test4() {&#10;        Assert.assertEquals(&quot;20! should be 2432902008176640000&quot;,&#10;                2432902008176640000, factorial(20))&#10;    }&#10;&#10;    @Test fun test5() {&#10;        Assert.assertEquals(&quot;0! should be 1&quot;,&#10;                1, factorial(0))&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570236000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Looping &amp;amp; Ranges (#2)&lt;/h2&gt;&lt;p&gt;Using a &lt;code&gt;for&lt;/code&gt; loop, create a function that sums the factorials up to a given&#10;number, which is provided as the argument (&lt;code&gt;1! + 2! + ... + n!&lt;/code&gt;).&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Looping+%26+Ranges+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399578" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="61" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="61" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Looping &amp; Ranges" />
                                                <option name="placeholderIndex" value="0" />
                                                <option name="sectionName" value="Programming Basics" />
                                                <option name="taskName" value="Exercise 1" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="var result = 1L&#10;    for (i in 1..n) {&#10;        result *= i&#10;    }&#10;    return result" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="111" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="111" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="var result = 0L&#10;    for (i in 1..n) {&#10;        result += factorial(i)&#10;    }&#10;    return result" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package loopingandRanges2&#10;&#10;fun factorial(n: Int): Long {&#10;    TODO()&#10;}&#10;&#10;fun sumOfFactorials(n: Int): Long {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(sumOfFactorials(10))  // 4037913&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package loopingandRanges2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestSumOfFactorials {&#10;    @Test fun test1() {&#10;        Assert.assertEquals(&quot;sumOfFactorials(1) should be 1&quot;,&#10;                1, sumOfFactorials(1))&#10;    }&#10;&#10;    @Test fun test2() {&#10;        Assert.assertEquals(&quot;sumOfFactorials(3) should be 9&quot;,&#10;                9, sumOfFactorials(3))&#10;    }&#10;&#10;    @Test fun test3() {&#10;        Assert.assertEquals(&quot;sumOfFactorials(10) should be 4037913&quot;,&#10;                4037913, sumOfFactorials(10))&#10;    }&#10;&#10;    @Test fun test4() {&#10;        Assert.assertEquals(&quot;sumOfFactorials(20) should be 2561327494111820313&quot;,&#10;                2561327494111820313, sumOfFactorials(20))&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570236000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Looping &amp;amp; Ranges (#3)&lt;/h2&gt;&lt;p&gt;Using a &lt;code&gt;for&lt;/code&gt; loop, create a function that sums up only even numbers up to a&#10;given number, which is provided as the argument.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Looping+%26+Ranges+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399579" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="60" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="60" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="var result = 0&#10;    for (i in 1..n) {&#10;        if (i % 2 == 0) {&#10;            result += i&#10;        }&#10;    }&#10;    return result" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package loopingandRanges3&#10;&#10;fun sumOfEven(n: Int): Int {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(sumOfEven(10))  // 30&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package loopingandRanges3&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestSumOfEven {&#10;    @Test fun test1() {&#10;        Assert.assertEquals(&quot;sumOfEven(1) should be 0&quot;,&#10;                0, sumOfEven(1))&#10;    }&#10;&#10;    @Test fun test2() {&#10;        Assert.assertEquals(&quot;sumOfEven(2) should be 2&quot;,&#10;                2, sumOfEven(2))&#10;    }&#10;&#10;    @Test fun test3() {&#10;        Assert.assertEquals(&quot;sumOfEven(4) should be 6&quot;,&#10;                6, sumOfEven(4))&#10;    }&#10;&#10;    @Test fun test4() {&#10;        Assert.assertEquals(&quot;sumOfEven(20) should be 110&quot;,&#10;                110, sumOfEven(20))&#10;    }&#10;&#10;    @Test fun test5() {&#10;        Assert.assertEquals(&quot;sumOfEven(21) should be 110&quot;,&#10;                110, sumOfEven(21))&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570237000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Looping &amp;amp; Ranges (#4)&lt;/h2&gt;&lt;p&gt;Display half of a pyramid. For n = 6 the function &lt;code&gt;showHalfPyramid()&lt;/code&gt; should&#10;display the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#&#10;##&#10;###&#10;####&#10;#####&#10;######&#10;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Use &lt;code&gt;repeat&lt;/code&gt; instead of a &lt;code&gt;for&lt;/code&gt; loop when the index variable is not used.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Looping+%26+Ranges+%2F+Exercise4&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="5" />
                            <option name="name" value="Exercise 4" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399580" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="62" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="62" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="for (i in 1..n) {&#10;        repeat(i) {&#10;            print(&quot;#&quot;)&#10;        }&#10;        println()&#10;    }" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package loopingandRanges4&#10;&#10;fun printHalfPyramid(n: Int) {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    printHalfPyramid(4)&#10;}&#10;/* Output:&#10;#&#10;##&#10;###&#10;####&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package loopingandRanges4&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;import java.io.ByteArrayOutputStream&#10;import java.io.PrintStream&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestHalfPyramid {&#10;    private fun checkOutput(n: Int, expected: String) {&#10;        val byteArrayOutputStream = ByteArrayOutputStream()&#10;        System.setOut(PrintStream(byteArrayOutputStream))&#10;        printHalfPyramid(n)&#10;        Assert.assertEquals(&quot;Incorrect output for n = $n:&quot;,&#10;                expected, byteArrayOutputStream.toString())&#10;    }&#10;&#10;    @Test fun testPyramid1() = checkOutput(1, &quot;#\n&quot;)&#10;&#10;    @Test fun testPyramid2() = checkOutput(2,&#10;            &quot;&quot;&quot;&#10;                |#&#10;                |##&#10;                |&#10;            &quot;&quot;&quot;.trimMargin())&#10;&#10;    @Test fun testPyramid3() = checkOutput(3,&#10;            &quot;&quot;&quot;&#10;                |#&#10;                |##&#10;                |###&#10;                |&#10;            &quot;&quot;&quot;.trimMargin())&#10;&#10;    @Test fun testPyramid4() = checkOutput(4,&#10;            &quot;&quot;&quot;&#10;                |#&#10;                |##&#10;                |###&#10;                |####&#10;                |&#10;            &quot;&quot;&quot;.trimMargin())&#10;&#10;    @Test fun testPyramid6() = checkOutput(6,&#10;            &quot;&quot;&quot;&#10;                |#&#10;                |##&#10;                |###&#10;                |####&#10;                |#####&#10;                |######&#10;                |&#10;            &quot;&quot;&quot;.trimMargin())&#10;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570238000" />
                          </EduTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: &lt;code&gt;iter&lt;/code&gt; Live Template&lt;/h2&gt;&lt;p&gt;IntelliJ Idea speeds up the typing of frequent expressions by using&#10;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Live templates&lt;/code&gt;&lt;/span&gt;. &#10;Type &lt;code&gt;iter&lt;/code&gt; and then press&#10;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:ExpandLiveTemplateByTab;&lt;/span&gt;. &#10;This live template unfolds into a for expression, so you can type the expression &#10;you want to iterate over and an index variable name. &#10;IntelliJ Idea even automatically suggests the variable name that can be iterated &#10;over if it's available in the context.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;iter + tab&#10;&#10;for (i in iterable) {&#10;&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Unfold the &lt;code&gt;iter&lt;/code&gt; live template to iterate over a string in the example.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Looping+%26+Ranges+%2F+Exercise5&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="6" />
                            <option name="name" value="Exercise 5" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399582" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package loopingandRanges5&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val s = &quot;abcd&quot;&#10;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package loopingandRanges5" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570239000" />
                          </IdeTask>
                        </list>
                      </option>
                      <option name="unitId" value="90556" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="116100" />
                      <option name="index" value="11" />
                      <option name="name" value="The in Keyword" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570244000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;The &lt;code&gt;in&lt;/code&gt; Keyword&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/104312/step/1&quot;&gt;Read &amp;quot;The &lt;code&gt;in&lt;/code&gt; Keyword&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399584" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/CharRange.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/CharRange.kt" />
                                      <option name="text" value="// InKeyword/CharRange.kt&#10;&#10;fun isDigit(ch: Char) = ch in '0'..'9'&#10;&#10;fun isNotDigit(ch: Char) =&#10;  ch !in '0'..'9'                // [1]&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  println(isDigit('a'))&#10;  println(isDigit('5'))&#10;  println(isNotDigit('z'))&#10;}&#10;/* Output:&#10;false&#10;true&#10;true&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/FloatingPointRange.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/FloatingPointRange.kt" />
                                      <option name="text" value="// InKeyword/FloatingPointRange.kt&#10;&#10;fun inFloatRange(n: Double) {&#10;  val r = 1.0..10.0&#10;  println(&quot;$n in $r? ${n in r}&quot;)&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  inFloatRange(0.999999)&#10;  inFloatRange(5.0)&#10;  inFloatRange(10.0)&#10;  inFloatRange(10.0000001)&#10;}&#10;/* Output:&#10;0.999999 in 1.0..10.0? false&#10;5.0 in 1.0..10.0? true&#10;10.0 in 1.0..10.0? true&#10;10.0000001 in 1.0..10.0? false&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/InString.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/InString.kt" />
                                      <option name="text" value="// InKeyword/InString.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  println('t' in &quot;kotlin&quot;)&#10;  println('a' in &quot;kotlin&quot;)&#10;}&#10;/* Output:&#10;true&#10;false&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/IterationVsMembership.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/IterationVsMembership.kt" />
                                      <option name="text" value="// InKeyword/IterationVsMembership.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val values = 1..3&#10;  for (v in values)&#10;    println(&quot;iteration $v&quot;)&#10;  val v = 2&#10;  if (v in values)&#10;    println(&quot;$v is a member of $values&quot;)&#10;}&#10;/* Output:&#10;iteration 1&#10;iteration 2&#10;iteration 3&#10;2 is a member of 1..3&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/MembershipInRange.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/MembershipInRange.kt" />
                                      <option name="text" value="// InKeyword/MembershipInRange.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val percent = 35&#10;  println(percent in 1..100)&#10;}&#10;/* Output:&#10;true&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/MembershipUsingBounds.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/MembershipUsingBounds.kt" />
                                      <option name="text" value="// InKeyword/MembershipUsingBounds.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val percent = 35&#10;  println(0 &lt;= percent &amp;&amp; percent &lt;= 100)&#10;}&#10;/* Output:&#10;true&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/StringRange.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/StringRange.kt" />
                                      <option name="text" value="// InKeyword/StringRange.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  println(&quot;ab&quot; in &quot;aa&quot;..&quot;az&quot;)&#10;  println(&quot;ba&quot; in &quot;aa&quot;..&quot;az&quot;)&#10;}&#10;/* Output:&#10;true&#10;false&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570241000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;The &lt;code&gt;in&lt;/code&gt; Keyword (#1)&lt;/h2&gt;&lt;p&gt;Iterate over a range of characters to return a string containing all english&#10;letters in alphabetical order: &amp;quot;abc...z&amp;quot;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+The+in+Keyword+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399585" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="55" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="55" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="var s = &quot;&quot;&#10;    for (c in 'a'..'z') {&#10;        s += c&#10;    }&#10;    return s" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package theinKeyword1&#10;&#10;fun getAlphabet(): String {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(getAlphabet())  // abcdefghijklmnopqrstuvwxyz&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package theinKeyword1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestAlphabet {&#10;    @Test fun test1() {&#10;        Assert.assertEquals(&quot;abcdefghijklmnopqrstuvwxyz&quot;, getAlphabet())&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570241000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;The &lt;code&gt;in&lt;/code&gt; Keyword (#2)&lt;/h2&gt;&lt;p&gt;Rewrite the function that sums only even numbers up to a given number using&#10;&lt;code&gt;step&lt;/code&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+The+in+Keyword+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399586" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="56" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="56" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="var result = 0&#10;    for (i in 0..n step 2) {&#10;        result += i&#10;    }&#10;    return result" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package theinKeyword2&#10;&#10;fun sumOfEven(n: Int): Int {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(sumOfEven(10))  // 30&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package theinKeyword2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestSumOfEven {&#10;    @Test fun test1() {&#10;        Assert.assertEquals(&quot;sumOfEven(1) should be 0&quot;,&#10;                0, sumOfEven(1))&#10;    }&#10;&#10;    @Test fun test2() {&#10;        Assert.assertEquals(&quot;sumOfEven(2) should be 2&quot;,&#10;                2, sumOfEven(2))&#10;    }&#10;&#10;    @Test fun test3() {&#10;        Assert.assertEquals(&quot;sumOfEven(4) should be 6&quot;,&#10;                6, sumOfEven(4))&#10;    }&#10;&#10;    @Test fun test4() {&#10;        Assert.assertEquals(&quot;sumOfEven(20) should be 110&quot;,&#10;                110, sumOfEven(20))&#10;    }&#10;&#10;    @Test fun test5() {&#10;        Assert.assertEquals(&quot;sumOfEven(21) should be 110&quot;,&#10;                110, sumOfEven(21))&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570242000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;The &lt;code&gt;in&lt;/code&gt; Keyword (#3)&lt;/h2&gt;&lt;p&gt;Create a function that checks whether a character is a lowercase letter&#10;(Check that its code is between the codes for &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt;).&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+The+in+Keyword+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399587" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="60" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="60" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="ch in 'a'..'z'" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package theinKeyword3&#10;&#10;fun isLowerCase(ch: Char): Boolean = TODO()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(isLowerCase('A'))  // false&#10;    println(isLowerCase('b'))  // true&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package theinKeyword3&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestForLoops3 {&#10;    @Test fun test1LowerCaseC() {&#10;        Assert.assertTrue(&quot;'c' is a lower case letter&quot;, isLowerCase('c'))&#10;    }&#10;&#10;    @Test fun test2LowerCaseA() {&#10;        Assert.assertTrue(&quot;'a' is a lower case letter&quot;, isLowerCase('a'))&#10;    }&#10;&#10;    @Test fun test3LowerCaseZ() {&#10;        Assert.assertTrue(&quot;'z' is a lower case letter&quot;, isLowerCase('z'))&#10;    }&#10;&#10;    @Test fun test4UpperCase() {&#10;        Assert.assertFalse(&quot;'A' is an upper case letter&quot;, isLowerCase('A'))&#10;    }&#10;&#10;    @Test fun test5Digit() {&#10;        Assert.assertFalse(&quot;'1' is not a lower case letter&quot;, isLowerCase('1'))&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570243000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;The &lt;code&gt;in&lt;/code&gt; Keyword (#4)&lt;/h2&gt;&lt;p&gt;Create a function that checks whether its string argument is a valid&#10;identifier. A valid identifier is a non-empty string that starts with a letter&#10;or underscore and consists of only letters, digits and underscores.&lt;/p&gt;&lt;p&gt;Use &lt;code&gt;s.isEmpty()&lt;/code&gt; to check whether &lt;code&gt;s&lt;/code&gt; is an empty string.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+The+in+Keyword+%2F+Exercise4&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="5" />
                            <option name="name" value="Exercise 4" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399588" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="0" />
                                                <option name="offset" value="23" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="0" />
                                            <option name="offset" value="23" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="" />
                                            <option name="possibleAnswer" value="fun isValidCharacter(ch: Char): Boolean = ch == '_' ||&#10;        ch in 'a'..'z' || ch in 'A'..'Z' ||&#10;        ch in '0'..'9'" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="73" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="73" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="if (s.isEmpty() || s[0] in '0'..'9') return false&#10;    for (ch in s) {&#10;        if (!isValidCharacter(ch)) return false&#10;    }&#10;    return true" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package theinKeyword4&#10;&#10;&#10;&#10;fun isValidIdentifier(s: String): Boolean {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(isValidIdentifier(&quot;name&quot;))  // true&#10;    println(isValidIdentifier(&quot;0name&quot;))  // false&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package theinKeyword4&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestValidIdentifier {&#10;&#10;    private fun checkValidIdentifier(s: String) {&#10;        Assert.assertTrue(&quot;'$s' is a valid identifier&quot;, isValidIdentifier(s))&#10;    }&#10;&#10;    private fun checkInvalidIdentifier(s: String) {&#10;        Assert.assertFalse(&quot;'$s' is not a valid identifier&quot;, isValidIdentifier(s))&#10;    }&#10;&#10;    @Test fun test1Simple() = checkValidIdentifier(&quot;name&quot;)&#10;&#10;    @Test fun test2StartsWithUnderscore() = checkValidIdentifier(&quot;_name&quot;)&#10;&#10;    @Test fun test3Underscore() = checkValidIdentifier(&quot;_&quot;)&#10;&#10;    @Test fun test4ContainsDigits() = checkValidIdentifier(&quot;n01&quot;)&#10;&#10;    @Test fun test5UpperCase() = checkValidIdentifier(&quot;NNN&quot;)&#10;&#10;    @Test fun test6Valid() = checkValidIdentifier(&quot;_N01&quot;)&#10;&#10;    @Test fun test7Empty() = checkInvalidIdentifier(&quot;&quot;)&#10;&#10;    @Test fun test8StartsWithDigit() = checkInvalidIdentifier(&quot;1_&quot;)&#10;&#10;    @Test fun test9ContainsIllegalCharacters() = checkInvalidIdentifier(&quot;&amp;%$&quot;)&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570243000" />
                          </EduTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: &lt;code&gt;main&lt;/code&gt; Live Template&lt;/h2&gt;&lt;p&gt;&lt;code&gt;main&lt;/code&gt; is another useful live template, which unfolds the &lt;code&gt;main()&lt;/code&gt; function&#10;declaration for you automatically. Type &lt;code&gt;main&lt;/code&gt;, and then press&#10;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:ExpandLiveTemplateByTab;&lt;/span&gt;. Then call&#10;the &lt;code&gt;foo()&lt;/code&gt; function from &lt;code&gt;main()&lt;/code&gt; and run &lt;code&gt;main()&lt;/code&gt; (do you remember the&#10;shortcut for that?).&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+The+in+Keyword+%2F+Exercise5&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="6" />
                            <option name="name" value="Exercise 5" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399589" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package theinKeyword5&#10;&#10;fun foo() {&#10;    println(&quot;foo&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package theinKeyword5" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570244000" />
                          </IdeTask>
                        </list>
                      </option>
                      <option name="unitId" value="90558" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="116101" />
                      <option name="index" value="12" />
                      <option name="name" value="Expressions &amp; Statements" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570247000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Expressions &amp;amp; Statements&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/104313/step/1&quot;&gt;Read &amp;quot;Expressions &amp;amp; Statements&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399590" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/AssigningAnIf.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/AssigningAnIf.kt" />
                                      <option name="text" value="// ExpressionsStatements/AssigningAnIf.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val result1 = if (11 &gt; 42) 9 else 5&#10;&#10;  val result2 = if (1 &lt; 2) {&#10;    val a = 11&#10;    a + 42&#10;  } else 42&#10;&#10;  val result3 =&#10;    if ('x' &lt; 'y')&#10;      println(&quot;x &lt; y&quot;)&#10;    else&#10;      println(&quot;x &gt; y&quot;)&#10;&#10;  println(result1)&#10;  println(result2)&#10;  println(result3)&#10;}&#10;/* Output:&#10;x &lt; y&#10;5&#10;53&#10;kotlin.Unit&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ConfusingOperator.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ConfusingOperator.kt" />
                                      <option name="text" value="// ExpressionsStatements/ConfusingOperator.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  var i = 1&#10;  println(i++ + ++i)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ForIsAStatement.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ForIsAStatement.kt" />
                                      <option name="text" value="// ExpressionsStatements/ForIsAStatement.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  // Can't do this:&#10;  // val f = for(i in 1..10) {}&#10;  // Compiler error message:&#10;  // for is not an expression, and&#10;  // only expressions are allowed here&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/PostfixVsPrefix.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/PostfixVsPrefix.kt" />
                                      <option name="text" value="// ExpressionsStatements/PostfixVsPrefix.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  var i = 10&#10;  println(i++)&#10;  println(i)&#10;  var j = 20&#10;  println(++j)&#10;  println(j)&#10;}&#10;/* Output:&#10;10&#10;11&#10;21&#10;21&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/UnitReturnType.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/UnitReturnType.kt" />
                                      <option name="text" value="// ExpressionsStatements/UnitReturnType.kt&#10;&#10;fun unitFun() = Unit&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  println(unitFun())&#10;  val u1: Unit = println(42)&#10;  println(u1)&#10;  val u2 = println(0) // Type inference&#10;  println(u2)&#10;}&#10;/* Output:&#10;kotlin.Unit&#10;42&#10;kotlin.Unit&#10;0&#10;kotlin.Unit&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570246000" />
                          </TheoryTask>
                          <OutputTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Expressions &amp;amp; Statements (#1)&lt;/h2&gt;&lt;p&gt;Display the result of the &lt;code&gt;println(1)&lt;/code&gt; call.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Expressions+%26+Statements+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399591" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="71" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="71" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="println(println(1))" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package expressionsandStatements1&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    TODO()&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/output.txt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/output.txt" />
                                      <option name="text" value="1&#10;kotlin.Unit&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570247000" />
                          </OutputTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: Debug&lt;/h2&gt;&lt;p&gt;Debugging is a powerful way to discover what's happening in your code. You can&#10;observe intermediate states of the program and changes between these states.&lt;/p&gt;&lt;p&gt;Click on the icon next to the &lt;code&gt;main()&lt;/code&gt; function and choose &#10;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Debug&lt;/code&gt;&lt;/span&gt;.&#10;Notice there's a special shortcut for that:&#10;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:DebugClass;&lt;/span&gt;. &#10;The program just runs and displays the result, &#10;because you haven't set any points where the execution should be paused.&lt;/p&gt;&lt;p&gt;The points where you want to pause the execution to observe the state &#10;of the variables are called &lt;em&gt;breakpoints&lt;/em&gt;.&#10;To create line breakpoints in the editor first place the caret &#10;on the desired line of the source code.&#10;Then do one of the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Click the left gutter area at a line where you want to toggle a breakpoint;&lt;/li&gt;&lt;li&gt;On the main menu, choose &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Run | Toggle Line Breakpoint&lt;/code&gt;&lt;/span&gt;;&lt;/li&gt;&lt;li&gt;Press &lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:ToggleLineBreakpoint;&lt;/span&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Set breakpoints on lines 4 and 5. Then begin debugging the program again and &#10;notice how it stops at the first breakpoint. The debug window below the screen &#10;shows you the values of all the variables. Continue the process by clicking on &#10;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Resume program&lt;/code&gt;&lt;/span&gt; on the left of the debug window&#10;or pressing &lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:Resume;&lt;/span&gt;. &#10;Notice how the value of the variable &lt;code&gt;x&lt;/code&gt; changes after the assignment.&lt;/p&gt;&lt;p&gt;To stop the debugging process you can either finish the program and see&#10;the result or stop in explicitly.&#10;Press the &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Stop&lt;/code&gt;&lt;/span&gt; button to stop&#10;the debugging process.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Expressions+%26+Statements+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399592" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package expressionsandStatements2&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    var x = 1&#10;    x = 2&#10;    println(x)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package expressionsandStatements2" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570247000" />
                          </IdeTask>
                        </list>
                      </option>
                      <option name="unitId" value="90559" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="116102" />
                      <option name="index" value="13" />
                      <option name="name" value="Summary 1" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570252000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Summary 1&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/104314/step/1&quot;&gt;Read &amp;quot;Summary 1&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399593" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/BasicFunctions.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/BasicFunctions.kt" />
                                      <option name="text" value="// Summary1/BasicFunctions.kt&#10;&#10;fun cube(x: Int): Int {&#10;  return x * x * x&#10;}&#10;&#10;fun bang(s: String) = s + &quot;!&quot;&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  println(cube(3))&#10;  println(bang(&quot;pop&quot;))&#10;}&#10;/* Output:&#10;27&#10;pop!&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Booleans.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Booleans.kt" />
                                      <option name="text" value="// Summary1/Booleans.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val opens = 9&#10;  val closes = 20&#10;  println(&quot;Operating hours: $opens - $closes&quot;)&#10;  val hour = 6&#10;  println(&quot;Current time: &quot; + hour)&#10;&#10;  val isOpen = hour &gt;= opens &amp;&amp; hour &lt;= closes&#10;  println(&quot;Open: &quot; + isOpen)&#10;  println(&quot;Not open: &quot; + !isOpen)&#10;  val isClosed = hour &lt; opens || hour &gt; closes&#10;  println(&quot;Closed: &quot; + isClosed)&#10;}&#10;/* Output:&#10;Operating hours: 9 - 20&#10;Current time: 6&#10;Open: false&#10;Not open: true&#10;Closed: true&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/DoWhile.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/DoWhile.kt" />
                                      <option name="text" value="// Summary1/DoWhile.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  var i = 0&#10;  do {&#10;    print(&quot;.&quot;)&#10;    i += 10&#10;  } while (testCondition(i))&#10;}&#10;/* Output:&#10;..........&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Hello.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Hello.kt" />
                                      <option name="text" value="// Summary1/Hello.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  println(&quot;Hello, world!&quot;)&#10;}&#10;/* Output:&#10;Hello, world!&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/IfExpression.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/IfExpression.kt" />
                                      <option name="text" value="// Summary1/IfExpression.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val activity = &quot;swimming&quot;&#10;  val hour = 10&#10;&#10;  val isOpen = if (&#10;    activity == &quot;swimming&quot; ||&#10;    activity == &quot;ice skating&quot;) {&#10;    val opens = 9&#10;    val closes = 20&#10;    println(&quot;Operating hours: &quot; +&#10;      opens + &quot; - &quot; + closes)&#10;    hour &gt;= opens &amp;&amp; hour &lt;= closes&#10;  } else {&#10;    false&#10;  }&#10;  println(isOpen)&#10;}&#10;/* Output:&#10;Operating hours: 9 - 20&#10;true&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/IfResult.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/IfResult.kt" />
                                      <option name="text" value="// Summary1/IfResult.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val result = if (99 &lt; 100) 4 else 42&#10;  println(result)&#10;}&#10;/* Output:&#10;4&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Membership.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Membership.kt" />
                                      <option name="text" value="// Summary1/Membership.kt&#10;&#10;fun inNumRange(n: Int) = n in 50..100&#10;&#10;fun notLowerCase(ch: Char) = ch !in 'a'..'z'&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val i1 = 11&#10;  val i2 = 100&#10;  val c1 = 'K'&#10;  val c2 = 'k'&#10;  println(&quot;$i1 ${inNumRange(i1)}&quot;)&#10;  println(&quot;$i2 ${inNumRange(i2)}&quot;)&#10;  println(&quot;$c1 ${notLowerCase(c1)}&quot;)&#10;  println(&quot;$c2 ${notLowerCase(c2)}&quot;)&#10;}&#10;/* Output:&#10;11 false&#10;100 true&#10;K true&#10;k false&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/NumberTypes.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/NumberTypes.kt" />
                                      <option name="text" value="// Summary1/NumberTypes.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val n = 1000    // Int&#10;  val l = 1000L   // Long&#10;  val d = 1000.0  // Double&#10;  println(&quot;$n $l $d&quot;)&#10;}&#10;/* Output:&#10;1000 1000 1000.0&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Overflow.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Overflow.kt" />
                                      <option name="text" value="// Summary1/Overflow.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  println(Int.MAX_VALUE + 1)&#10;  println(Int.MAX_VALUE + 1L)&#10;}&#10;/* Output:&#10;-2147483648&#10;2147483648&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/RangeOfInt.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/RangeOfInt.kt" />
                                      <option name="text" value="// Summary1/RangeOfInt.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  for (i in 1..10)&#10;    print(&quot;$i &quot;)&#10;}&#10;/* Output:&#10;1 2 3 4 5 6 7 8 9 10&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/StrTemplates.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/StrTemplates.kt" />
                                      <option name="text" value="// Summary1/StrTemplates.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val answer = 42&#10;  println(&quot;Found $answer!&quot;)             // [1]&#10;  val condition = true&#10;  println(&#10;    &quot;${if (condition) 'a' else 'b'}&quot;)   // [2]&#10;  println(&quot;printing a $1&quot;)              // [3]&#10;}&#10;/* Output:&#10;Found 42!&#10;a&#10;printing a $1&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/StringIteration.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/StringIteration.kt" />
                                      <option name="text" value="// Summary1/StringIteration.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  for (c in &quot;Kotlin&quot;) {&#10;    print(&quot;$c &quot;)&#10;    // c += 1 // error:&#10;    // val cannot be reassigned&#10;  }&#10;}&#10;/* Output:&#10;K o t l i n&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ThreeQuotes.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ThreeQuotes.kt" />
                                      <option name="text" value="// Summary1/ThreeQuotes.kt&#10;&#10;fun json(q: String, a: Int) = &quot;&quot;&quot;{&#10;  &quot;question&quot; : &quot;$q&quot;,&#10;  &quot;answer&quot; : $a&#10;}&quot;&quot;&quot;&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  println(json(&quot;The Ultimate&quot;, 42))&#10;}&#10;/* Output:&#10;{&#10;  &quot;question&quot; : &quot;The Ultimate&quot;,&#10;  &quot;answer&quot; : 42&#10;}&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Truncation.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Truncation.kt" />
                                      <option name="text" value="// Summary1/Truncation.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val d1: Double = 3.0 + 2 / 5&#10;  println(d1)&#10;  val d2: Double = 3 + 2.0 / 5&#10;  println(d2)&#10;}&#10;/* Output:&#10;3.0&#10;3.4&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/UnitReturn.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/UnitReturn.kt" />
                                      <option name="text" value="// Summary1/UnitReturn.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val result = println(&quot;returns Unit&quot;)&#10;  println(result)&#10;}&#10;/* Output:&#10;returns Unit&#10;kotlin.Unit&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/While.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/While.kt" />
                                      <option name="text" value="// Summary1/While.kt&#10;&#10;fun testCondition(i: Int) = i &lt; 100&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  var i = 0&#10;  while (testCondition(i)) {&#10;    print(&quot;.&quot;)&#10;    i += 10&#10;  }&#10;}&#10;/* Output:&#10;..........&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570249000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Summary 1 (#1)&lt;/h2&gt;&lt;p&gt;Count the number of occurrences of a specified digit in a decimal number using the &lt;code&gt;while&lt;/code&gt; loop.&lt;/p&gt;&lt;p&gt;Each step should place the first digits of the initial number into an auxiliary&#10;&lt;code&gt;worker&lt;/code&gt; variable, while the &lt;code&gt;occurrences&lt;/code&gt; variable should contain the rest of&#10;the number's digits.&lt;/p&gt;&lt;p&gt;The table below demonstrates the values for each loop while finding occurrences&#10;of &lt;code&gt;1&lt;/code&gt; in &lt;code&gt;121341&lt;/code&gt;:&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Worker&lt;/th&gt;&lt;th&gt;Rest&lt;/th&gt;&lt;th&gt;Occurrences&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;121341&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;intellij-row-even&quot;&gt;&lt;td&gt;12134&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1213&lt;/td&gt;&lt;td&gt;41&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;intellij-row-even&quot;&gt;&lt;td&gt;121&lt;/td&gt;&lt;td&gt;341&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;/td&gt;&lt;td&gt;1341&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;intellij-row-even&quot;&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;21341&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;121341&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;code&gt;occurrences&lt;/code&gt; show how many &lt;code&gt;1&lt;/code&gt; digits are in the &lt;code&gt;rest&lt;/code&gt; number.&#10;The &lt;code&gt;rest&lt;/code&gt; number is present in the table for clarity, but you don't need to store it in a separate variable.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Summary+1+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399594" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="147" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="147" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="if (worker % 10 == digit) {&#10;            occurrences++&#10;        }&#10;        worker /= 10" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package summary1&#10;&#10;fun countDigits(number: Int, digit: Int): Int {&#10;    var worker = number&#10;    var occurrences = 0&#10;    while (worker &gt; 0) {&#10;        TODO()&#10;    }&#10;    return occurrences&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(countDigits(764241, 4)) // 2&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package summary1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestCountDigits {&#10;    private fun checkCountDigits(number: Int, digit: Int, expected: Int) {&#10;        Assert.assertEquals(&quot;Wrong number of `$digit` digits in the `$number` number&quot;,&#10;                expected, countDigits(number, digit))&#10;    }&#10;&#10;    @Test fun testCount1() = checkCountDigits(121341, 1, 3)&#10;&#10;    @Test fun testCount2() = checkCountDigits(111111, 1, 6)&#10;&#10;    @Test fun testCount3() = checkCountDigits(123456789, 1, 1)&#10;&#10;    @Test fun testCount4() = checkCountDigits(123456789, 0, 0)&#10;&#10;    @Test fun testCount5() = checkCountDigits(111222111, 2, 3)&#10;&#10;    @Test fun testCount6() = checkCountDigits(0, 5, 0)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570250000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Summary 1 (#2)&lt;/h2&gt;&lt;p&gt;Reverse a decimal number using a while loop. The auxiliary &lt;code&gt;worker&lt;/code&gt; variable&#10;can help you find the &lt;code&gt;result&lt;/code&gt; iteratively:&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Worker&lt;/th&gt;&lt;th&gt;Result&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1234&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;intellij-row-even&quot;&gt;&lt;td&gt;123&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;/td&gt;&lt;td&gt;43&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;intellij-row-even&quot;&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;432&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;4321&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Summary+1+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399596" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="61" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="61" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="var worker = number&#10;    var result = 0&#10;&#10;    while (worker &gt; 0) {&#10;        result += worker % 10&#10;        worker /= 10&#10;        if (worker != 0) {&#10;            result *= 10&#10;        }&#10;    }&#10;    return result" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package summary2&#10;&#10;fun reverseDecimal(number: Int): Int {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(reverseDecimal(1234))  // 4321&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package summary2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestReverseNumber {&#10;    private fun checkReverse(number: Int, expected: Int) {&#10;        Assert.assertEquals(&quot;Wrong reversed $number number&quot;,&#10;                expected, reverseDecimal(number))&#10;    }&#10;&#10;    @Test fun testReverse1() = checkReverse(1234, 4321)&#10;&#10;    @Test fun testReverse2() = checkReverse(10, 1)&#10;&#10;    @Test fun testReverse3() = checkReverse(123456789, 987654321)&#10;&#10;    @Test fun testReverse4() = checkReverse(111, 111)&#10;&#10;    @Test fun testReverse5() = checkReverse(0, 0)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570251000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Summary 1 (#3)&lt;/h2&gt;&lt;p&gt;Display a pyramid.&#10;For n = 6 the function &lt;code&gt;showPyramid()&lt;/code&gt; should produce the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;     #&#10;    ###&#10;   #####&#10;  #######&#10; #########&#10;###########&#10;&lt;/code&gt;&lt;/pre&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Summary+1+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399598" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="49" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="49" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="for (i in 1..n) {&#10;        repeat(n - i) {&#10;            print(' ')&#10;        }&#10;        repeat(2 * i - 1) {&#10;            print('#')&#10;        }&#10;        println()&#10;    }" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package summary3&#10;&#10;fun printPyramid(n: Int) {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    printPyramid(4)&#10;}&#10;/* Output:&#10;   #&#10;  ###&#10; #####&#10;#######&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package summary3&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;import java.io.ByteArrayOutputStream&#10;import java.io.PrintStream&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestPyramid {&#10;    private fun checkOutput(n: Int, expected: String) {&#10;        val byteArrayOutputStream = ByteArrayOutputStream()&#10;        System.setOut(PrintStream(byteArrayOutputStream))&#10;        printPyramid(n)&#10;        Assert.assertEquals(&quot;Incorrect output for n = $n:&quot;,&#10;                expected, byteArrayOutputStream.toString())&#10;    }&#10;&#10;    @Test fun testPyramid1() = checkOutput(1, &quot;#\n&quot;)&#10;&#10;    @Test fun testPyramid2() = checkOutput(2,&#10;            &quot;&quot;&quot;&#10;                | #&#10;                |###&#10;                |&#10;            &quot;&quot;&quot;.trimMargin())&#10;&#10;    @Test fun testPyramid3() = checkOutput(3,&#10;            &quot;&quot;&quot;&#10;                |  #&#10;                | ###&#10;                |#####&#10;                |&#10;            &quot;&quot;&quot;.trimMargin())&#10;&#10;    @Test fun testPyramid4() = checkOutput(4,&#10;            &quot;&quot;&quot;&#10;                |   #&#10;                |  ###&#10;                | #####&#10;                |#######&#10;                |&#10;            &quot;&quot;&quot;.trimMargin())&#10;&#10;    @Test fun testPyramid6() = checkOutput(6,&#10;            &quot;&quot;&quot;&#10;                |     #&#10;                |    ###&#10;                |   #####&#10;                |  #######&#10;                | #########&#10;                |###########&#10;                |&#10;            &quot;&quot;&quot;.trimMargin())&#10;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570251000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Summary 1 (#4)&lt;/h2&gt;&lt;p&gt;Display a table filled with numbers in a form of snake. For rows = 3, columns =&#10;3 the function &lt;code&gt;showSnake()&lt;/code&gt; should produce the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt; 0 1 2&#10; 5 4 3&#10; 6 7 8&#10;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For proper alignment use &lt;code&gt;&amp;quot;%3d&amp;quot;.format(number)&lt;/code&gt; to place additional spaces&#10;before the number.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Programming+Basics+%2F+Summary+1+%2F+Exercise4&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="5" />
                            <option name="name" value="Exercise 4" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399599" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="64" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="64" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="val width = (rows * columns).toString().length + 1&#10;    for (i in 0 until rows) {&#10;        for (j in 0 until columns) {&#10;            val value = if (i % 2 == 0) {&#10;                i * columns + j&#10;            } else {&#10;                i * columns + (columns - 1 - j)&#10;            }&#10;            print(&quot;%${width}d&quot;.format(value))&#10;        }&#10;        println()&#10;    }" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package summary4&#10;&#10;fun printSnake(rows: Int, columns: Int) {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    printSnake(4, 5)&#10;}&#10;/* Output:&#10;  0  1  2  3  4&#10;  9  8  7  6  5&#10; 10 11 12 13 14&#10; 19 18 17 16 15&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package summary4&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;import java.io.ByteArrayOutputStream&#10;import java.io.PrintStream&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestSnake {&#10;    private fun checkOutput(rows: Int, columns: Int, expected: String) {&#10;        val byteArrayOutputStream = ByteArrayOutputStream()&#10;        System.setOut(PrintStream(byteArrayOutputStream))&#10;        printSnake(rows, columns)&#10;        Assert.assertEquals(&quot;Incorrect output for rows = $rows, columns = $columns:&quot;,&#10;                expected, byteArrayOutputStream.toString())&#10;    }&#10;&#10;    @Test fun testSnake2() = checkOutput(2,2,&#10;            &quot;&quot;&quot;&#10;                | 0 1&#10;                | 3 2&#10;                |&#10;            &quot;&quot;&quot;.trimMargin())&#10;&#10;    @Test fun testSnake3() = checkOutput(3, 3,&#10;            &quot;&quot;&quot;&#10;                | 0 1 2&#10;                | 5 4 3&#10;                | 6 7 8&#10;                |&#10;            &quot;&quot;&quot;.trimMargin())&#10;&#10;    @Test fun testSnake4() = checkOutput(4, 5,&#10;            &quot;&quot;&quot;&#10;                |  0  1  2  3  4&#10;                |  9  8  7  6  5&#10;                | 10 11 12 13 14&#10;                | 19 18 17 16 15&#10;                |&#10;            &quot;&quot;&quot;.trimMargin())&#10;&#10;    @Test fun testSnake5() = checkOutput(10, 11,&#10;            &quot;&quot;&quot;&#10;                |   0   1   2   3   4   5   6   7   8   9  10&#10;                |  21  20  19  18  17  16  15  14  13  12  11&#10;                |  22  23  24  25  26  27  28  29  30  31  32&#10;                |  43  42  41  40  39  38  37  36  35  34  33&#10;                |  44  45  46  47  48  49  50  51  52  53  54&#10;                |  65  64  63  62  61  60  59  58  57  56  55&#10;                |  66  67  68  69  70  71  72  73  74  75  76&#10;                |  87  86  85  84  83  82  81  80  79  78  77&#10;                |  88  89  90  91  92  93  94  95  96  97  98&#10;                | 109 108 107 106 105 104 103 102 101 100  99&#10;                |&#10;            &quot;&quot;&quot;.trimMargin())&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570252000" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="90562" />
                    </Lesson>
                  </list>
                </option>
              </Section>
              <Section>
                <option name="courseId" value="20403" />
                <option name="customPresentableName" />
                <option name="id" value="31886" />
                <option name="index" value="2" />
                <option name="name" value="Introduction to Objects" />
                <option name="position" value="2" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1538570314000" />
                <option name="items">
                  <list>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="116105" />
                      <option name="index" value="1" />
                      <option name="name" value="Objects Everywhere" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570259000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Objects Everywhere&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/104327/step/1&quot;&gt;Read &amp;quot;Objects Everywhere&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399600" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Conversion.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Conversion.kt" />
                                      <option name="text" value="// ObjectsEverywhere/Conversion.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val s = &quot;123&quot;&#10;  println(s.toInt())&#10;  val i = 123&#10;  println(i.toString())&#10;}&#10;/* Output:&#10;123&#10;123&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/IntRanges.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/IntRanges.kt" />
                                      <option name="text" value="// ObjectsEverywhere/IntRanges.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val r1 = IntRange(0, 10)&#10;  val r2 = IntRange(5, 7)&#10;  println(r1)&#10;  println(r2)&#10;}&#10;/* Output:&#10;0..10&#10;5..7&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/NumberConversions.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/NumberConversions.kt" />
                                      <option name="text" value="// ObjectsEverywhere/NumberConversions.kt&#10;&#10;fun fraction(numerator: Long, denom: Long) =&#10;  numerator.toDouble() / denom&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val num = 1&#10;  val den = 2&#10;  val f = fraction(num.toLong(), den.toLong())&#10;  println(f)&#10;}&#10;/* Output:&#10;0.5&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/RangeSum.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/RangeSum.kt" />
                                      <option name="text" value="// ObjectsEverywhere/RangeSum.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val r = IntRange(0, 10)&#10;  println(r.sum())&#10;}&#10;/* Output:&#10;55&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Strings.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Strings.kt" />
                                      <option name="text" value="// ObjectsEverywhere/Strings.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val s = &quot;AbcD&quot;&#10;  println(s.reversed())&#10;  println(s.toLowerCase())&#10;}&#10;/* Output:&#10;DcbA&#10;abcd&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570255000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Objects Everywhere (#1)&lt;/h2&gt;&lt;p&gt;Palindromes are words or phrases that read the same forward and backward. Some&#10;examples include &amp;quot;mom&amp;quot; and &amp;quot;dad.&amp;quot; Write a function to test words or phrases for&#10;palindromes.&lt;/p&gt;&lt;p&gt;Some examples:&#10;&amp;quot;mom&amp;quot; is a palindrome&#10;&amp;quot;dad&amp;quot; is a palindrome&#10;&amp;quot;street&amp;quot; is not a palindrome&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Objects+Everywhere+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399601" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="`String`'s `reversed` member function may prove useful here.&#10;Use `==` to check whether two strings are equal." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="67" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="67" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="s.reversed() == s" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package objectsEverywhere1&#10;&#10;fun isPalindrome(s: String): Boolean = TODO()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(isPalindrome(&quot;mom&quot;))     // true&#10;    println(isPalindrome(&quot;street&quot;))  // false&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package objectsEverywhere1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestClassesAndObjects1 {&#10;&#10;    private fun checkPalindrome(s: String, expected: Boolean) {&#10;        Assert.assertEquals(&quot;&quot;&quot;Wrong result for 'isPalindrome(&quot;$s&quot;)':&quot;&quot;&quot;, expected, isPalindrome(s))&#10;    }&#10;&#10;    @Test fun testPalindrome1() = checkPalindrome(&quot;mom&quot;, true)&#10;&#10;    @Test fun testPalindrome2() = checkPalindrome(&quot;dad&quot;, true)&#10;&#10;    @Test fun testPalindrome3() = checkPalindrome(&quot;street&quot;, false)&#10;&#10;    @Test fun testPalindrome4() = checkPalindrome(&quot;brr&quot;, false)&#10;&#10;    @Test fun testPalindrome5() = checkPalindrome(&quot;A&quot;, true)&#10;&#10;    @Test fun testPalindrome6() = checkPalindrome(&quot;rr&quot;, true)&#10;&#10;    @Test fun testPalindrome7() = checkPalindrome(&quot;abccba&quot;, true)&#10;&#10;    @Test fun testPalindrome8() = checkPalindrome(&quot;abcba&quot;, true)&#10;&#10;    @Test fun testPalindrome9() = checkPalindrome(&quot;qwertyuiopoiuytrewq&quot;, true)&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570255000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Objects Everywhere (#2)&lt;/h2&gt;&lt;p&gt;Building on the previous exercise, ignore case when testing&#10;for palindromes. &amp;quot;Bob&amp;quot; should now be a palindrome.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Objects+Everywhere+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399602" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Use the `toLowerCase()` function to check whether a string with all&#10;lower case characters is a palindrome. Alternatively, you can use&#10;`toUpperCase()`.&#10;" />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="67" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="67" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Objects Everywhere" />
                                                <option name="placeholderIndex" value="0" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 1" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="s.reversed() == s" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Use the `toLowerCase()` function to check whether a string with all&#10;lower case characters is a palindrome. Alternatively, you can use&#10;`toUpperCase()`.&#10;" />
                                              </list>
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="121" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="121" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="isPalindrome(s.toLowerCase())" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package objectsEverywhere2&#10;&#10;fun isPalindrome(s: String): Boolean = TODO()&#10;&#10;fun isPalIgnoreCase(s: String): Boolean =&#10;    TODO()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(isPalIgnoreCase(&quot;Mom&quot;))  // true&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package objectsEverywhere2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestClassesAndObjects2 {&#10;&#10;    private fun checkPalindrome(s: String, expected: Boolean) {&#10;        Assert.assertEquals(&quot;&quot;&quot;Wrong result for 'isPalIgnoreCase(&quot;$s&quot;)':&quot;&quot;&quot;, expected, isPalIgnoreCase(s))&#10;    }&#10;&#10;    @Test fun testPalindrome1() = checkPalindrome(&quot;Bob&quot;, true)&#10;&#10;    @Test fun testPalindrome2() = checkPalindrome(&quot;wwW&quot;, true)&#10;&#10;    @Test fun testPalindrome3() = checkPalindrome(&quot;wWw&quot;, true)&#10;&#10;    @Test fun testPalindrome4() = checkPalindrome(&quot;no palindrome&quot;, false)&#10;&#10;    @Test fun testPalindrome5() = checkPalindrome(&quot;brr&quot;, false)&#10;&#10;    @Test fun testPalindrome6() = checkPalindrome(&quot;A&quot;, true)&#10;&#10;    @Test fun testPalindrome7() = checkPalindrome(&quot;rR&quot;, true)&#10;&#10;    @Test fun testPalindrome8() = checkPalindrome(&quot;a.&quot;, false)&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570256000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Objects Everywhere (#3)&lt;/h2&gt;&lt;p&gt;Building on the previous exercise, strip out special characters before&#10;palindrome testing.  &amp;quot;Madam I'm adam&amp;quot; should be considered a palindrome.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Objects+Everywhere+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399603" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Build an extra string consisting of letters only, and check whether it's&#10;a palindrome.&#10;Use `in` to check if a character is an alphabetical letter:&#10;`ch in 'a'..'z' || c in 'A'..'Z'`." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="67" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="67" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Objects Everywhere" />
                                                <option name="placeholderIndex" value="0" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 2" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="s.reversed() == s" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Build an extra string consisting of letters only, and check whether it's&#10;a palindrome.&#10;Use `in` to check if a character is an alphabetical letter:&#10;`ch in 'a'..'z' || c in 'A'..'Z'`." />
                                              </list>
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="125" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="125" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Objects Everywhere" />
                                                <option name="placeholderIndex" value="1" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 2" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="isPalindrome(s.toLowerCase())" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Build an extra string consisting of letters only, and check whether it's&#10;a palindrome.&#10;Use `in` to check if a character is an alphabetical letter:&#10;`ch in 'a'..'z' || c in 'A'..'Z'`." />
                                              </list>
                                            </option>
                                            <option name="index" value="2" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="182" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="182" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="var onlyLetters = &quot;&quot;&#10;    for (c in s) {&#10;        if (c in 'a'..'z' || c in 'A'..'Z') {&#10;            onlyLetters += c&#10;        }&#10;    }&#10;    return isPalIgnoreCase(onlyLetters)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package objectsEverywhere3&#10;&#10;fun isPalindrome(s: String): Boolean = TODO()&#10;&#10;fun isPalIgnoreCase(s: String): Boolean =&#10;        TODO()&#10;&#10;fun isPalIgnoreSpecial(s: String): Boolean {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(isPalIgnoreSpecial(&quot;Was It A Rat I Saw? ...&quot;))  // true&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package objectsEverywhere3&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestClassesAndObjects3 {&#10;    private fun checkPalindrome(s: String, expected: Boolean) {&#10;        Assert.assertEquals(&quot;&quot;&quot;Wrong result for isPalIgnoreSpecial(&quot;$s&quot;):&quot;&quot;&quot;, expected, isPalIgnoreSpecial(s))&#10;    }&#10;&#10;    @Test fun testPalindrome0() = checkPalindrome(&quot;AAA!&quot;, true)&#10;&#10;    @Test fun testPalindrome1() = checkPalindrome(&quot;Was It A Rat I Saw? ...&quot;, true)&#10;&#10;    @Test fun testPalindrome2() = checkPalindrome(&quot;A Man, A Plan, A Canal-Panama!&quot;, true)&#10;&#10;    @Test fun testPalindrome3() = checkPalindrome(&quot;Madam In Eden, I'm Adam&quot;, true)&#10;&#10;    @Test fun testPalindrome4() = checkPalindrome(&quot;Mr. Owl Ate My Metal Worm&quot;, true)&#10;&#10;    @Test fun testPalindrome5() = checkPalindrome(&quot;A Santa Lived As a Devil At NASA&quot;, true)&#10;&#10;    @Test fun testPalindrome6() = checkPalindrome(&quot;Dammit, I'm Mad! ...&quot;, true)&#10;&#10;    @Test fun testPalindrome7() = checkPalindrome(&quot;Do Geese See God?&quot;, true)&#10;&#10;    @Test fun testPalindrome8() = checkPalindrome(&quot;Not a palindrome!&quot;, false)&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570257000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Objects Everywhere (#4)&lt;/h2&gt;&lt;p&gt;Reverse an integer number using String conversion.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Objects+Everywhere+%2F+Exercise4&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="5" />
                            <option name="name" value="Exercise 4" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399604" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="67" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="67" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="number.toString().reversed().toInt()" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package objectsEverywhere4&#10;&#10;fun reverseDecimal(number: Int): Int = TODO()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(reverseDecimal(1234))  // 4321&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package objectsEverywhere4&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestReverseNumber {&#10;    private fun checkReverse(number: Int, expected: Int) {&#10;        Assert.assertEquals(&quot;Wrong result for reversing $number:&quot;,&#10;                expected, reverseDecimal(number))&#10;    }&#10;&#10;    @Test fun testReverse1() = checkReverse(1234, 4321)&#10;&#10;    @Test fun testReverse2() = checkReverse(10, 1)&#10;&#10;    @Test fun testReverse3() = checkReverse(123456789, 987654321)&#10;&#10;    @Test fun testReverse4() = checkReverse(111, 111)&#10;&#10;    @Test fun testReverse5() = checkReverse(0, 0)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570258000" />
                          </EduTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: Completion&lt;/h2&gt;&lt;p&gt;In Kotlin, it's easy to explore classes using IntelliJ IDEA, which has &lt;em&gt;code&#10;completion&lt;/em&gt;. IDEA attempts to complete what you're typing and show you a list&#10;of options. After you type the dot, IDEA suggests members which can be called&#10;on a given element. You can also call completion explicitly by pressing&#10;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:CodeCompletion;&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;Use &lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:EditorDown;&lt;/span&gt; and &#10;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:EditorUp;&lt;/span&gt; to select the required member &#10;and press &lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:EditorEnter;&lt;/span&gt; to paste it.&lt;/p&gt;&lt;p&gt;You can discover the possible operations on any class this way. You&#10;can type the meaningful letters of the member function or property to see all &#10;the available members starting with these letters, or simply containing &#10;these letters.&lt;/p&gt;&lt;p&gt;Type the identifier name &lt;code&gt;r&lt;/code&gt; followed by a dot, then press &#10;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:CodeCompletion;&lt;/span&gt; to see&#10;the possible completions. Choose &lt;code&gt;r.sum()&lt;/code&gt; and &lt;code&gt;s.reversed()&lt;/code&gt; by typing only&#10;the first letters and using code completion.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Objects+Everywhere+%2F+Exercise5&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="6" />
                            <option name="name" value="Exercise 5" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399605" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package objectsEverywhere5&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val r = IntRange(0, 10)&#10;&#10;    val s = &quot;abc&quot;&#10;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package objectsEverywhere5" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570259000" />
                          </IdeTask>
                        </list>
                      </option>
                      <option name="unitId" value="90563" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="116108" />
                      <option name="index" value="2" />
                      <option name="name" value="Creating Classes" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570264000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Creating Classes&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/104328/step/1&quot;&gt;Read &amp;quot;Creating Classes&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399608" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Animals.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Animals.kt" />
                                      <option name="text" value="// CreatingClasses/Animals.kt&#10;&#10;// Create some classes:&#10;class Giraffe&#10;class Bear&#10;class Hippo&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  // Create some objects:&#10;  val g1 = Giraffe()&#10;  val g2 = Giraffe()&#10;  val b = Bear()&#10;  val h = Hippo()&#10;&#10;  // Each object() is unique:&#10;  println(g1)&#10;  println(g2)&#10;  println(h)&#10;  println(b)&#10;}&#10;/* Sample output:&#10;Giraffe@28d93b30&#10;Giraffe@1b6d3586&#10;Hippo@4554617c&#10;Bear@74a14482&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Cat.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Cat.kt" />
                                      <option name="text" value="// CreatingClasses/Cat.kt&#10;&#10;class Cat {&#10;  fun meow() = &quot;mew!&quot;&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val cat = Cat()&#10;  // Call 'meow()' for 'cat':&#10;  val m1 = cat.meow()&#10;  println(m1)&#10;}&#10;/* Output:&#10;mew!&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Dog.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Dog.kt" />
                                      <option name="text" value="// CreatingClasses/Dog.kt&#10;&#10;class Dog {&#10;  fun bark() = &quot;yip!&quot;&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val dog = Dog()&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Hamster.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Hamster.kt" />
                                      <option name="text" value="// CreatingClasses/Hamster.kt&#10;&#10;class Hamster {&#10;  fun speak() = &quot;squeak! &quot;&#10;  fun exercise() =&#10;    this.speak() + // Qualified with 'this'&#10;    speak() +      // Without 'this'&#10;    &quot;Running on wheel&quot;&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val hamster = Hamster()&#10;  println(hamster.exercise())&#10;}&#10;/* Output:&#10;squeak! squeak! Running on wheel&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570261000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Creating Classes (#1)&lt;/h2&gt;&lt;p&gt;Implement an &lt;code&gt;isPalindrome()&lt;/code&gt; function taking an instance of &lt;code&gt;SimpleString&lt;/code&gt; as&#10;an argument. &lt;code&gt;SimpleString&lt;/code&gt; is a toy class used for these tasks that only has&#10;two members: &lt;code&gt;length()&lt;/code&gt; returning a length of a string  and &lt;code&gt;get(Int)&lt;/code&gt;&#10;returning a character by its index. Note that indexing starts with zero, as&#10;with regular &lt;code&gt;String&lt;/code&gt;s.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Creating+Classes+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399609" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/SimpleString.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/SimpleString.kt" />
                                      <option name="text" value="package creatingClasses1&#10;&#10;/**&#10; * The `SimpleString` class is a toy class&#10; * for representing strings used in AtomicKotlin course.&#10; */&#10;class SimpleString(private val s: String) {&#10;&#10;    /** Returns the `Char` value at the specified [index].&#10;     */&#10;    fun get(index: Int): Char = s[index]&#10;&#10;    /**&#10;     * Returns the length of this string.&#10;     */&#10;    fun length() = s.length&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Iterate over string indices (they form a range from `0` to `length - 1`)&#10;and for every index `i` make sure the character by the `i` index is the same as&#10;the character by the `length - 1 - i` index.&#10;" />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="75" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="75" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="for (i in 0 until s.length()) {&#10;        if (s.get(i) != s.get(s.length() - 1 - i)) return false&#10;    }&#10;    return true" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package creatingClasses1&#10;&#10;fun isPalindrome(s: SimpleString): Boolean {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(isPalindrome(SimpleString(&quot;mom&quot;)))&#10;    println(isPalindrome(SimpleString(&quot;mom!&quot;)))&#10;}&#10;/* Output:&#10;true&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package creatingClasses1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestSimpleStringPalindrome {&#10;    private fun checkPalindrome(s: String, expected: Boolean) {&#10;        Assert.assertEquals(&quot;&quot;&quot;Wrong result for calling isPalindrome() on SimpleString(&quot;$s&quot;):&quot;&quot;&quot;,&#10;                expected, isPalindrome(SimpleString(s)))&#10;    }&#10;&#10;    @Test fun testPalindrome1() = checkPalindrome(&quot;mom&quot;, true)&#10;&#10;    @Test fun testPalindrome2() = checkPalindrome(&quot;dad&quot;, true)&#10;&#10;    @Test fun testPalindrome3() = checkPalindrome(&quot;street&quot;, false)&#10;&#10;    @Test fun testPalindrome4() = checkPalindrome(&quot;brr&quot;, false)&#10;&#10;    @Test fun testPalindrome5() = checkPalindrome(&quot;A&quot;, true)&#10;&#10;    @Test fun testPalindrome6() = checkPalindrome(&quot;rr&quot;, true)&#10;&#10;    @Test fun testPalindrome7() = checkPalindrome(&quot;abccba&quot;, true)&#10;&#10;    @Test fun testPalindrome8() = checkPalindrome(&quot;abcba&quot;, true)&#10;&#10;    @Test fun testPalindrome9() = checkPalindrome(&quot;qwertyuiopoiuytrewq&quot;, true)&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570261000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Creating Classes (#2)&lt;/h2&gt;&lt;p&gt;Implement an &lt;code&gt;isPalIgnoreCase()&lt;/code&gt; function that takes a &lt;code&gt;SimpleString&lt;/code&gt; argument.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Creating+Classes+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399610" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/SimpleString.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/SimpleString.kt" />
                                      <option name="text" value="package creatingClasses2&#10;&#10;/**&#10; * The `SimpleString` class is a toy class&#10; * for representing strings used in AtomicKotlin course.&#10; */&#10;class SimpleString(private val s: String) {&#10;&#10;    /** Returns the `Char` value at the specified [index].&#10;     */&#10;    fun get(index: Int): Char = s[index]&#10;&#10;    /**&#10;     * Returns the length of this string.&#10;     */&#10;    fun length() = s.length&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Use `toLowerCase()` on `Char` to compare characters in lower case.&#10;" />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="78" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="78" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="for (i in 0 until s.length()) {&#10;        val first = s.get(i).toLowerCase()&#10;        val second = s.get(s.length() - 1 - i).toLowerCase()&#10;        if (first != second) return false&#10;    }&#10;    return true" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package creatingClasses2&#10;&#10;fun isPalIgnoreCase(s: SimpleString): Boolean {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(isPalIgnoreCase(SimpleString(&quot;Mom&quot;)))&#10;}&#10;/* Output:&#10;true&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package creatingClasses2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestSimpleStringPalIgnoreCase {&#10;    private fun checkPalindrome(s: String, expected: Boolean) {&#10;        Assert.assertEquals(&quot;&quot;&quot;Wrong result for calling isPalIgnoreCase() on SimpleString(&quot;$s&quot;):&quot;&quot;&quot;,&#10;                expected, isPalIgnoreCase(SimpleString(s)))&#10;    }&#10;&#10;    @Test fun testPalindrome1() = checkPalindrome(&quot;Bob&quot;, true)&#10;&#10;    @Test fun testPalindrome2() = checkPalindrome(&quot;wwW&quot;, true)&#10;&#10;    @Test fun testPalindrome3() = checkPalindrome(&quot;wWw&quot;, true)&#10;&#10;    @Test fun testPalindrome4() = checkPalindrome(&quot;no palindrome&quot;, false)&#10;&#10;    @Test fun testPalindrome5() = checkPalindrome(&quot;brr&quot;, false)&#10;&#10;    @Test fun testPalindrome6() = checkPalindrome(&quot;A&quot;, true)&#10;&#10;    @Test fun testPalindrome7() = checkPalindrome(&quot;rR&quot;, true)&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570262000" />
                          </EduTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: Quick Documentation&lt;/h2&gt;&lt;p&gt;The &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Quick Documentation&lt;/code&gt;&lt;/span&gt; action produces &#10;information about a symbol, such as a function or a class. &#10;Press &lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:QuickJavaDoc;&lt;/span&gt; when the caret &#10;is on a class or a function, and IntelliJ Idea will show you the available&#10;documentation for this function or class.&lt;/p&gt;&lt;p&gt;Call &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Quick Documentation&lt;/code&gt;&lt;/span&gt; action &#10;for the &lt;code&gt;SimpleString&lt;/code&gt; class and its &lt;code&gt;get()&lt;/code&gt; and &lt;code&gt;length()&lt;/code&gt; member functions.&lt;/p&gt;&lt;p&gt;Press &lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:EditorEscape;&lt;/span&gt; to close the &#10;quick documentation pop-up.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Creating+Classes+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399612" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/SimpleString.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/SimpleString.kt" />
                                      <option name="text" value="package creatingClasses3&#10;&#10;/**&#10; * The `SimpleString` class is a toy class&#10; * for representing strings used in AtomicKotlin course.&#10; */&#10;class SimpleString(private val s: String) {&#10;&#10;    /** Returns the `Char` value at the specified [index].&#10;     */&#10;    fun get(index: Int): Char = s[index]&#10;&#10;    /**&#10;     * Returns the length of this string.&#10;     */&#10;    fun length() = s.length&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package creatingClasses3&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val ss = SimpleString(&quot;abc&quot;)&#10;    println(ss.get(0))&#10;    println(ss.length())&#10;}&#10;/* Output:&#10;a&#10;3&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package creatingClasses3" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570263000" />
                          </IdeTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: Quick Documentation in the Completion List&lt;/h2&gt;&lt;p&gt;The &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Quick Documentation&lt;/code&gt;&lt;/span&gt; shortcut &#10;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:QuickJavaDoc;&lt;/span&gt; &#10;can be used not only in the editor but in the code completion popup list as well.&lt;/p&gt;&lt;p&gt;Using this feature, find the function for &lt;code&gt;String&lt;/code&gt; that upper-cases only its&#10;first letter, or returns the original string if it's already starts with an&#10;upper case letter.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Creating+Classes+%2F+Exercise4&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="5" />
                            <option name="name" value="Exercise 4" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399613" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="2" />
                                                <option name="offset" value="49" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="2" />
                                            <option name="offset" value="49" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="  " />
                                            <option name="possibleAnswer" value=".capitalize()" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package creatingClasses4&#10;&#10;fun task(s: String) = s  &#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(task(&quot;hi!&quot;))&#10;    println(task(&quot;Hi!&quot;))&#10;}&#10;/* Output:&#10;Hi!&#10;Hi!&#10; */" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package creatingClasses4&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestCapitalize() {&#10;    private fun testString(s: String) {&#10;        Assert.assertEquals(&quot;&quot;&quot;Wrong result for task(&quot;$s&quot;):&quot;&quot;&quot;, s.capitalize(), task(s))&#10;    }&#10;&#10;    @Test fun test1() = testString(&quot;abc&quot;)&#10;&#10;    @Test fun test2() = testString(&quot;Abc&quot;)&#10;&#10;    @Test fun test3() = testString(&quot;ABC&quot;)&#10;&#10;    @Test fun test4() = testString(&quot;aBc&quot;)&#10;&#10;    @Test fun test5() = testString(&quot;abC&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570264000" />
                          </IdeTask>
                        </list>
                      </option>
                      <option name="unitId" value="90567" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="116110" />
                      <option name="index" value="3" />
                      <option name="name" value="Properties" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570268000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Properties&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/104329/step/1&quot;&gt;Read &amp;quot;Properties&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399614" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/AnUnchangingVar.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/AnUnchangingVar.kt" />
                                      <option name="text" value="// Properties/AnUnchangingVar.kt&#10;&#10;class Sofa {&#10;  val cover: String = &quot;Loveseat cover&quot;&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  var sofa = Sofa()&#10;  // Not allowed:&#10;  // sofa.cover = &quot;New cover&quot;&#10;  // Reassigning a var:&#10;  sofa = Sofa()&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ChangingAVal.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ChangingAVal.kt" />
                                      <option name="text" value="// Properties/ChangingAVal.kt&#10;&#10;class House {&#10;  var sofa: String = &quot;&quot;&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val house = House()&#10;  house.sofa = &quot;Simple sleeper sofa: $89.00&quot;&#10;  println(house.sofa)&#10;  house.sofa = &quot;New leather sofa: $3,099.00&quot;&#10;  println(house.sofa)&#10;  // Cannot reassign the val to a new House:&#10;  // house = House()&#10;}&#10;/* Output:&#10;Simple sleeper sofa: $89.00&#10;New leather sofa: $3,099.00&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Cup.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Cup.kt" />
                                      <option name="text" value="// Properties/Cup.kt&#10;&#10;class Cup {&#10;  var percentFull = 0&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val c1 = Cup()&#10;  c1.percentFull = 50&#10;  val c2 = Cup()&#10;  c2.percentFull = 100&#10;&#10;  println(c1.percentFull)&#10;  println(c2.percentFull)&#10;}&#10;/* Output:&#10;50&#10;100&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Cup2.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Cup2.kt" />
                                      <option name="text" value="// Properties/Cup2.kt&#10;&#10;class Cup2 {&#10;  var percentFull = 0&#10;  val max = 100&#10;  fun add(increase: Int): Int {&#10;    percentFull += increase&#10;    if (percentFull &gt; max)&#10;      percentFull = max&#10;    return percentFull&#10;  }&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val cup = Cup2()&#10;  cup.add(50)&#10;  println(cup.percentFull)&#10;  cup.add(70)&#10;  println(cup.percentFull)&#10;}&#10;/* Output:&#10;50&#10;100&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/References.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/References.kt" />
                                      <option name="text" value="// Properties/References.kt&#10;&#10;class Kitchen {&#10;  var table: String = &quot;Round table&quot;&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val kitchen1 = Kitchen()&#10;  val kitchen2 = kitchen1&#10;  println(&quot;kitchen1: ${kitchen1.table}&quot;)&#10;  println(&quot;kitchen2: ${kitchen2.table}&quot;)&#10;  kitchen1.table = &quot;Square table&quot;&#10;  println(&quot;kitchen1: ${kitchen1.table}&quot;)&#10;  println(&quot;kitchen2: ${kitchen2.table}&quot;)&#10;}&#10;/* Output:&#10;kitchen1: Round table&#10;kitchen2: Round table&#10;kitchen1: Square table&#10;kitchen2: Square table&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/TopLevelProperty.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/TopLevelProperty.kt" />
                                      <option name="text" value="// Properties/TopLevelProperty.kt&#10;&#10;val constant = 42&#10;&#10;var counter = 0&#10;&#10;fun inc() {&#10;  counter++&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570265000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Properties (#1)&lt;/h2&gt;&lt;p&gt;Implement the member functions of the &lt;code&gt;Robot&lt;/code&gt; class. A &lt;code&gt;Robot&lt;/code&gt; starts in the&#10;&lt;code&gt;(0, 0)&lt;/code&gt; cell and can move to the right, to the left, down and up. Its location&#10;is stored as a pair of coordinates &lt;code&gt;(x, y)&lt;/code&gt;, where &lt;code&gt;(0, 0)&lt;/code&gt; is the top-left&#10;corner:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;(x,y)&#10;(0,0) (1,0)&#10;(0,1) (1,1)&#10;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Going right increases &lt;code&gt;x&lt;/code&gt; coordinate, going down increases &lt;code&gt;y&lt;/code&gt; coordinate,&#10;going left and up decreases &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; coordinates accordingly.&lt;/p&gt;&lt;p&gt;Implement &lt;code&gt;goRight()&lt;/code&gt;, &lt;code&gt;goLeft()&lt;/code&gt;, &lt;code&gt;goUp()&lt;/code&gt;, &lt;code&gt;goDown()&lt;/code&gt; and &lt;code&gt;getLocation()&lt;/code&gt;&#10;member functions. &lt;code&gt;getLocation()&lt;/code&gt; should return the coordinates as a string&#10;&lt;code&gt;(x, y)&lt;/code&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Properties+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399615" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="8" />
                                                <option name="offset" value="39" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="8" />
                                            <option name="offset" value="39" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="/*TODO*/" />
                                            <option name="possibleAnswer" value="var x = 0&#10;    var y = 0" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="87" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="87" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="x += steps" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="2" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="138" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="138" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="x -= steps" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="3" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="189" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="189" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="y += steps" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="4" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="238" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="238" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="y -= steps" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="5" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="284" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="284" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="&quot;($x,$y)&quot;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package properties1&#10;&#10;class Robot {&#10;    /*TODO*/&#10;&#10;    fun goRight(steps: Int) {&#10;        TODO()&#10;    }&#10;&#10;    fun goLeft(steps: Int) {&#10;        TODO()&#10;    }&#10;&#10;    fun goDown(steps: Int) {&#10;        TODO()&#10;    }&#10;&#10;    fun goUp(steps: Int) {&#10;        TODO()&#10;    }&#10;&#10;    fun getLocation(): String = TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val robot = Robot()&#10;    println(robot.getLocation())&#10;    robot.goRight(1)&#10;    println(robot.getLocation())&#10;    robot.goDown(2)&#10;    println(robot.getLocation())&#10;}&#10;/* Output:&#10;(0,0)&#10;(1,0)&#10;(1,2)&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package properties1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestRobotIntro {&#10;    class RobotHandler {&#10;        val robot: Robot = Robot()&#10;        val loggedMovements = StringBuilder()&#10;&#10;        fun goRight(steps: Int) {&#10;            robot.goRight(steps)&#10;            loggedMovements.appendln(&quot;goRight($steps)&quot;)&#10;        }&#10;&#10;        fun goLeft(steps: Int) {&#10;            robot.goLeft(steps)&#10;            loggedMovements.appendln(&quot;goLeft($steps)&quot;)&#10;&#10;        }&#10;&#10;        fun goDown(steps: Int) {&#10;            robot.goDown(steps)&#10;            loggedMovements.appendln(&quot;goDown($steps)&quot;)&#10;&#10;        }&#10;&#10;        fun goUp(steps: Int) {&#10;            robot.goUp(steps)&#10;            loggedMovements.appendln(&quot;goUp($steps)&quot;)&#10;        }&#10;    }&#10;&#10;    private fun testMovements(location: String, movements: RobotHandler.() -&gt; Unit) {&#10;        val robotHandler = RobotHandler()&#10;        robotHandler.movements()&#10;        val actualLocation = robotHandler.robot.getLocation()&#10;        val message = if (robotHandler.loggedMovements.isEmpty()) {&#10;            &quot;Initial location of the robot should be (0,0)&quot;&#10;        } else {&#10;            &quot;Wrong location after:\n&quot; + robotHandler.loggedMovements&#10;        }&#10;        Assert.assertEquals(message, location, actualLocation)&#10;    }&#10;&#10;    @Test&#10;    fun test1Initial() = testMovements(&quot;(0,0)&quot;) {}&#10;&#10;    @Test&#10;    fun test2Right() = testMovements(&quot;(1,0)&quot;) {&#10;        goRight(1)&#10;    }&#10;&#10;    @Test&#10;    fun test3Left() = testMovements(&quot;(1,0)&quot;) {&#10;        goRight(2)&#10;        goLeft(1)&#10;    }&#10;&#10;    @Test&#10;    fun test4Down() = testMovements(&quot;(0,1)&quot;) {&#10;        goDown(1)&#10;    }&#10;&#10;    @Test&#10;    fun test5Up() = testMovements(&quot;(0,1)&quot;) {&#10;        goDown(2)&#10;        goUp(1)&#10;    }&#10;&#10;    @Test&#10;    fun test6SeveralSteps() = testMovements(&quot;(3,5)&quot;) {&#10;        goRight(3)&#10;        goDown(5)&#10;    }&#10;&#10;    @Test&#10;    fun test7SeveralSteps2() = testMovements(&quot;(10,10)&quot;) {&#10;        goRight(13)&#10;        goDown(15)&#10;        goUp(5)&#10;        goLeft(3)&#10;    }&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570266000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Properties (#1)&lt;/h2&gt;&lt;p&gt;Now the field the robot can move in is constrained in size to &lt;code&gt;100 x 100&lt;/code&gt;, but&#10;at the borders of the field the robot teleports: if the robot is in the cell&#10;&lt;code&gt;(0,0)&lt;/code&gt; and goes up 1 step, he arrives at the cell &lt;code&gt;(0,99)&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;(0,0)&#10;// goUp(1)&#10;(0,99)&#10;// goLeft(10)&#10;(90,99)&#10;&lt;/code&gt;&lt;/pre&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Properties+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399616" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="12" />
                                                <option name="offset" value="35" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="12" />
                                            <option name="offset" value="35" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Properties" />
                                                <option name="placeholderIndex" value="0" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 1" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="    /*TODO*/" />
                                            <option name="possibleAnswer" value="    var x = 0&#10;    var y = 0&#10;    val fieldSize = 100&#10;&#10;    fun crossBoundary(coordinate: Int): Int {&#10;        val inBounds = coordinate % fieldSize&#10;        return if (inBounds &lt; 0) {&#10;           fieldSize + inBounds&#10;        }&#10;        else {&#10;            inBounds&#10;        }&#10;    }&#10;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="86" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="86" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Properties" />
                                                <option name="placeholderIndex" value="1" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 1" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="x += steps&#10;        x = crossBoundary(x)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="2" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="137" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="137" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Properties" />
                                                <option name="placeholderIndex" value="2" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 1" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="x -= steps&#10;        x = crossBoundary(x)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="3" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="188" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="188" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Properties" />
                                                <option name="placeholderIndex" value="3" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 1" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="y += steps&#10;        y = crossBoundary(y)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="4" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="237" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="237" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Properties" />
                                                <option name="placeholderIndex" value="4" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 1" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="y -= steps&#10;        y = crossBoundary(y)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="5" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="283" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="283" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Properties" />
                                                <option name="placeholderIndex" value="5" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 1" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="&quot;($x,$y)&quot;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package properties2&#10;&#10;class Robot {&#10;    /*TODO*/&#10;    fun goRight(steps: Int) {&#10;        TODO()&#10;    }&#10;&#10;    fun goLeft(steps: Int) {&#10;        TODO()&#10;    }&#10;&#10;    fun goDown(steps: Int) {&#10;        TODO()&#10;    }&#10;&#10;    fun goUp(steps: Int) {&#10;        TODO()&#10;    }&#10;&#10;    fun getLocation(): String = TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val robot = Robot()&#10;    println(robot.getLocation())&#10;    robot.goUp(1)&#10;    println(robot.getLocation())&#10;    robot.goLeft(10)&#10;    println(robot.getLocation())&#10;}&#10;/* Output:&#10;(0,0)&#10;(0,99)&#10;(90,99)&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package properties2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestRobotTeleportation {&#10;    class RobotHandler {&#10;        val robot: Robot = Robot()&#10;        val loggedMovements = StringBuilder()&#10;&#10;        fun goRight(steps: Int) {&#10;            robot.goRight(steps)&#10;            loggedMovements.appendln(&quot;goRight($steps)&quot;)&#10;        }&#10;&#10;        fun goLeft(steps: Int) {&#10;            robot.goLeft(steps)&#10;            loggedMovements.appendln(&quot;goLeft($steps)&quot;)&#10;&#10;        }&#10;&#10;        fun goDown(steps: Int) {&#10;            robot.goDown(steps)&#10;            loggedMovements.appendln(&quot;goDown($steps)&quot;)&#10;&#10;        }&#10;&#10;        fun goUp(steps: Int) {&#10;            robot.goUp(steps)&#10;            loggedMovements.appendln(&quot;goUp($steps)&quot;)&#10;        }&#10;    }&#10;&#10;    private fun testMovements(location: String, movements: RobotHandler.() -&gt; Unit) {&#10;        val robotHandler = RobotHandler()&#10;        robotHandler.movements()&#10;        val actualLocation = robotHandler.robot.getLocation()&#10;        val message = if (robotHandler.loggedMovements.isEmpty()) {&#10;            &quot;Initial location of the robot should be (0,0)&quot;&#10;        } else {&#10;            &quot;Wrong location after:\n&quot; + robotHandler.loggedMovements&#10;        }&#10;        Assert.assertEquals(message, location, actualLocation)&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = testMovements(&quot;(90,99)&quot;) {&#10;        goUp(1)&#10;        goLeft(10)&#10;    }&#10;&#10;    @Test&#10;    fun test2Left() = testMovements(&quot;(70,0)&quot;) {&#10;        goLeft(30)&#10;    }&#10;&#10;    @Test&#10;    fun test3Up() = testMovements(&quot;(0,99)&quot;) {&#10;        goUp(1)&#10;    }&#10;&#10;    @Test&#10;    fun test4Left() = testMovements(&quot;(70,0)&quot;) {&#10;        goLeft(130)&#10;    }&#10;&#10;    @Test&#10;    fun test5Up() = testMovements(&quot;(0,99)&quot;) {&#10;        goUp(101)&#10;    }&#10;&#10;    @Test&#10;    fun test6Right() = testMovements(&quot;(10,0)&quot;) {&#10;        goRight(110)&#10;    }&#10;&#10;    @Test&#10;    fun test7Down() = testMovements(&quot;(0,20)&quot;) {&#10;        goDown(120)&#10;    }&#10;&#10;    @Test&#10;    fun test8SeveralSteps() = testMovements(&quot;(10,10)&quot;) {&#10;        goRight(313)&#10;        goDown(415)&#10;        goUp(505)&#10;        goLeft(703)&#10;    }&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570267000" />
                          </EduTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: Extract Property&lt;/h2&gt;&lt;p&gt;Check yourself: how many times did you use the constant &lt;code&gt;100&lt;/code&gt; in the code for&#10;the previous task? When you write the code, it's better to place  constants&#10;into &lt;code&gt;val&lt;/code&gt;s, so they are easy to change if necessary. If the requirements&#10;change so that the field's size is &lt;code&gt;1000 x 1000&lt;/code&gt;, it's error-prone to change&#10;the constant more than in one place. It's too easy to change it in one place&#10;and forget to change it in the other, which can lead to difficult-to-find bugs.&lt;/p&gt;&lt;p&gt;When a constant appears in multiple places in your code, it's wise to extract&#10;it into a property. IntelliJ Idea allows you to do this automatically. Select&#10;the constant &lt;code&gt;10&lt;/code&gt; in the code sample, and call&#10;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Extract Property&lt;/code&gt;&lt;/span&gt; action.&#10;Alternatively, you can use the &#10;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:IntroduceField;&lt;/span&gt; shortcut or choose&#10;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Refactor | Extract | Property&lt;/code&gt;&lt;/span&gt; from the main&#10;menu.&lt;/p&gt;&lt;p&gt;Select &lt;code&gt;Counter&lt;/code&gt; as the target code block in the opened menu, &#10;make sure that &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Replace all occurrences(2)&lt;/code&gt;&lt;/span&gt; is&#10;chosen, then press &lt;code&gt;Enter&lt;/code&gt;. You'll see the constant is now declared as a&#10;property, which is referenced from member functions. The property is declared&#10;with the &lt;code&gt;private&lt;/code&gt; modifier, which we discuss in one of the next atoms.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Properties+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399617" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package properties3&#10;&#10;class Counter {&#10;    var value = 0&#10;&#10;    fun inc() {&#10;        value += 10&#10;    }&#10;&#10;    fun dec() {&#10;        value -= 10&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package properties3&#10;&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570268000" />
                          </IdeTask>
                        </list>
                      </option>
                      <option name="unitId" value="90568" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="116111" />
                      <option name="index" value="4" />
                      <option name="name" value="Constructors" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570272000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Constructors&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/104330/step/1&quot;&gt;Read &amp;quot;Constructors&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399618" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Arg.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Arg.kt" />
                                      <option name="text" value="// Constructors/Arg.kt&#10;&#10;class Alien(name: String) {&#10;  val greeting = &quot;Poor $name!&quot;&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val alien = Alien(&quot;Mr. Meeseeks&quot;)&#10;  println(alien.greeting)&#10;  // alien.name // Error     // [1]&#10;}&#10;/* Output:&#10;Poor Mr. Meeseeks!&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/DisplayAlienSpecies.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/DisplayAlienSpecies.kt" />
                                      <option name="text" value="// Constructors/DisplayAlienSpecies.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val alien =&#10;    AlienSpecies(&quot;Narduarvian&quot;, 2, 2, 4)&#10;  println(alien)&#10;}&#10;/* Sample output:&#10;AlienSpecies@4d7e1886&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/GoodAlien.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/GoodAlien.kt" />
                                      <option name="text" value="// Constructors/GoodAlien.kt&#10;&#10;class GoodAlien(val name: String) {&#10;  override fun toString(): String {&#10;    return &quot;GoodAlien('$name')&quot;&#10;  }&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val birdPerson = GoodAlien(&quot;Birdperson&quot;)&#10;  println(birdPerson)&#10;}&#10;/* Output:&#10;GoodAlien('Birdperson')&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/MultipleArgs.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/MultipleArgs.kt" />
                                      <option name="text" value="// Constructors/MultipleArgs.kt&#10;&#10;class AlienSpecies(&#10;  val name: String,&#10;  val eyes: Int,&#10;  val hands: Int,&#10;  val legs: Int&#10;) {&#10;  fun describe() =&#10;    &quot;$name with $eyes eyes, &quot; +&#10;    &quot;$hands hands and $legs legs&quot;&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val shim =&#10;    AlienSpecies(&quot;Shimshamian&quot;, 3, 2, 2)&#10;  val grung =&#10;    AlienSpecies(&quot;Grunglokian&quot;, 2, 4, 2)&#10;  println(shim.describe())&#10;  println(grung.describe())&#10;}&#10;/* Output:&#10;Shimshamian with 3 eyes, 2 hands and 2 legs&#10;Grunglokian with 2 eyes, 4 hands and 2 legs&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/VisibleArgs.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/VisibleArgs.kt" />
                                      <option name="text" value="// Constructors/VisibleArgs.kt&#10;&#10;class MutableNameAlien(var name: String)&#10;&#10;class FixedNameAlien(val name: String)&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val alien1 =&#10;    MutableNameAlien(&quot;Reverse Giraffe&quot;)&#10;  val alien2 =&#10;    FixedNameAlien(&quot;Krombopolis Michael&quot;)&#10;&#10;  alien1.name = &quot;Parasite&quot;&#10;  // Can't do this:&#10;  // alien2.name = &quot;Parasite&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570269000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Constructors (#1)&lt;/h2&gt;&lt;p&gt;Make &lt;code&gt;fieldSize&lt;/code&gt; and the initial coordinates the arguments of the &lt;code&gt;Robot&lt;/code&gt; class.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Constructors+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399619" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="8" />
                                                <option name="offset" value="35" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="8" />
                                            <option name="offset" value="35" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="/*TODO*/" />
                                            <option name="possibleAnswer" value="val fieldSize: Int, var x: Int, var y: Int" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="0" />
                                                <option name="offset" value="47" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="0" />
                                            <option name="offset" value="47" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Properties" />
                                                <option name="placeholderIndex" value="0" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 2" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="" />
                                            <option name="possibleAnswer" value="    fun crossBoundary(coordinate: Int): Int {&#10;        val inBounds = coordinate % fieldSize&#10;        return if (inBounds &lt; 0) {&#10;           fieldSize + inBounds&#10;        }&#10;        else {&#10;            inBounds&#10;        }&#10;    }&#10;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="2" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="86" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="86" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Properties" />
                                                <option name="placeholderIndex" value="1" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 2" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="x += steps&#10;        x = crossBoundary(x)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="3" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="137" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="137" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Properties" />
                                                <option name="placeholderIndex" value="2" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 2" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="x -= steps&#10;        x = crossBoundary(x)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="4" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="188" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="188" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Properties" />
                                                <option name="placeholderIndex" value="3" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 2" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="y += steps&#10;        y = crossBoundary(y)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="5" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="237" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="237" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Properties" />
                                                <option name="placeholderIndex" value="4" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 2" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="y -= steps&#10;        y = crossBoundary(y)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="6" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="283" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="283" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Properties" />
                                                <option name="placeholderIndex" value="5" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 2" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="&quot;($x,$y)&quot;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package constructors1&#10;&#10;class Robot(/*TODO*/) {&#10;&#10;    fun goRight(steps: Int) {&#10;        TODO()&#10;    }&#10;&#10;    fun goLeft(steps: Int) {&#10;        TODO()&#10;    }&#10;&#10;    fun goDown(steps: Int) {&#10;        TODO()&#10;    }&#10;&#10;    fun goUp(steps: Int) {&#10;        TODO()&#10;    }&#10;&#10;    fun getLocation(): String = TODO()&#10;}&#10;&#10;/*&#10;fun main(args: Array&lt;String&gt;) {&#10;    val robot = Robot(10, 1, 1)&#10;    println(robot.getLocation())&#10;    robot.goUp(2)&#10;    println(robot.getLocation())&#10;    robot.goLeft(10)&#10;    println(robot.getLocation())&#10;}&#10;*/&#10;/* Output:&#10;(1,1)&#10;(1,9)&#10;(1,9)&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package constructors1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestRobotClassArguments {&#10;    class RobotHandler(fieldSize: Int, var x: Int, var y: Int) {&#10;        val robot: Robot = Robot(fieldSize, x, y)&#10;        val loggedMovements = StringBuilder()&#10;&#10;        fun goRight(steps: Int) {&#10;            robot.goRight(steps)&#10;            loggedMovements.appendln(&quot;goRight($steps)&quot;)&#10;        }&#10;&#10;        fun goLeft(steps: Int) {&#10;            robot.goLeft(steps)&#10;            loggedMovements.appendln(&quot;goLeft($steps)&quot;)&#10;&#10;        }&#10;&#10;        fun goDown(steps: Int) {&#10;            robot.goDown(steps)&#10;            loggedMovements.appendln(&quot;goDown($steps)&quot;)&#10;&#10;        }&#10;&#10;        fun goUp(steps: Int) {&#10;            robot.goUp(steps)&#10;            loggedMovements.appendln(&quot;goUp($steps)&quot;)&#10;        }&#10;    }&#10;&#10;    private fun testMovements(location: String, fieldSize: Int, x: Int, y: Int,&#10;                              movements: RobotHandler.() -&gt; Unit) {&#10;        val robotHandler = RobotHandler(fieldSize, x, y)&#10;        robotHandler.movements()&#10;        val actualLocation = robotHandler.robot.getLocation()&#10;        val message = if (robotHandler.loggedMovements.isEmpty()) {&#10;            &quot;Initial location of the robot should be ($x,$y)&quot;&#10;        } else {&#10;            &quot;Starting location: ($x, $y), field size: $fieldSize.\n&quot; +&#10;                    &quot;Wrong location after:\n&quot; + robotHandler.loggedMovements&#10;        }&#10;        Assert.assertEquals(message, location, actualLocation)&#10;    }&#10;&#10;    @Test&#10;    fun test1Initial() = testMovements(&quot;(2,3)&quot;, 10, 2, 3) {}&#10;&#10;    @Test&#10;    fun test2Right() = testMovements(&quot;(3,3)&quot;, 10, 2, 3) {&#10;        goRight(1)&#10;    }&#10;&#10;    @Test&#10;    fun test3Circle() = testMovements(&quot;(2,3)&quot;, 10, 2, 3) {&#10;        goRight(10)&#10;        goLeft(10)&#10;        goDown(10)&#10;        goUp(10)&#10;    }&#10;}&#10;&#10;fun Robot(vararg a: Any?): Robot = TODO()" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570270000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Constructors (#1)&lt;/h2&gt;&lt;p&gt;Add a &lt;code&gt;toString()&lt;/code&gt; function that returns the string &lt;code&gt;Robot(x=...,y=...)&lt;/code&gt; &#10;where the actual values of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are substituted. For instance,&#10;it should return &lt;code&gt;Robot(x=1,y=1)&lt;/code&gt; for &lt;code&gt;x = 1&lt;/code&gt; and &lt;code&gt;y = 1&lt;/code&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Constructors+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399620" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="8" />
                                                <option name="offset" value="35" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="8" />
                                            <option name="offset" value="35" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Constructors" />
                                                <option name="placeholderIndex" value="0" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 1" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="/*TODO*/" />
                                            <option name="possibleAnswer" value="val fieldSize: Int, var x: Int, var y: Int" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="0" />
                                                <option name="offset" value="47" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="0" />
                                            <option name="offset" value="47" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Constructors" />
                                                <option name="placeholderIndex" value="1" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 1" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="" />
                                            <option name="possibleAnswer" value="    fun crossBoundary(coordinate: Int): Int {&#10;        val inBounds = coordinate % fieldSize&#10;        return if (inBounds &lt; 0) {&#10;           fieldSize + inBounds&#10;        }&#10;        else {&#10;            inBounds&#10;        }&#10;    }&#10;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="2" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="86" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="86" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Constructors" />
                                                <option name="placeholderIndex" value="2" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 1" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="x += steps&#10;        x = crossBoundary(x)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="3" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="137" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="137" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Constructors" />
                                                <option name="placeholderIndex" value="3" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 1" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="x -= steps&#10;        x = crossBoundary(x)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="4" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="188" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="188" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Constructors" />
                                                <option name="placeholderIndex" value="4" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 1" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="y += steps&#10;        y = crossBoundary(y)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="5" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="237" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="237" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Constructors" />
                                                <option name="placeholderIndex" value="5" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 1" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="y -= steps&#10;        y = crossBoundary(y)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="6" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="283" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="283" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Constructors" />
                                                <option name="placeholderIndex" value="6" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 1" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="&quot;($x,$y)&quot;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="7" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="27" />
                                                <option name="offset" value="295" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="27" />
                                            <option name="offset" value="295" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="/*Implement toString here*/" />
                                            <option name="possibleAnswer" value="override fun toString() = &quot;Robot(x=$x,y=$y)&quot;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package constructors2&#10;&#10;class Robot(/*TODO*/) {&#10;&#10;    fun goRight(steps: Int) {&#10;        TODO()&#10;    }&#10;&#10;    fun goLeft(steps: Int) {&#10;        TODO()&#10;    }&#10;&#10;    fun goDown(steps: Int) {&#10;        TODO()&#10;    }&#10;&#10;    fun goUp(steps: Int) {&#10;        TODO()&#10;    }&#10;&#10;    fun getLocation(): String = TODO()&#10;&#10;    /*Implement toString here*/&#10;}&#10;&#10;/*&#10;fun main(args: Array&lt;String&gt;) {&#10;    val robot = Robot(10, 1, 1)&#10;    println(robot)&#10;}&#10;*/&#10;/* Output:&#10;Robot(1,1)&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package constructors2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestRobotToString {&#10;    class RobotHandler(fieldSize: Int, var x: Int, var y: Int) {&#10;        val robot: Robot = Robot(fieldSize, x, y)&#10;        val loggedMovements = StringBuilder()&#10;&#10;        fun goRight(steps: Int) {&#10;            robot.goRight(steps)&#10;            loggedMovements.appendln(&quot;goRight($steps)&quot;)&#10;        }&#10;&#10;        fun goLeft(steps: Int) {&#10;            robot.goLeft(steps)&#10;            loggedMovements.appendln(&quot;goLeft($steps)&quot;)&#10;&#10;        }&#10;&#10;        fun goDown(steps: Int) {&#10;            robot.goDown(steps)&#10;            loggedMovements.appendln(&quot;goDown($steps)&quot;)&#10;&#10;        }&#10;&#10;        fun goUp(steps: Int) {&#10;            robot.goUp(steps)&#10;            loggedMovements.appendln(&quot;goUp($steps)&quot;)&#10;        }&#10;    }&#10;&#10;    private fun testMovements(string: String, fieldSize: Int, x: Int, y: Int,&#10;                              movements: RobotHandler.() -&gt; Unit) {&#10;        val robotHandler = RobotHandler(fieldSize, x, y)&#10;        robotHandler.movements()&#10;        val actualString = robotHandler.robot.toString()&#10;        val message = if (robotHandler.loggedMovements.isEmpty()) {&#10;            &quot;Initial location of the robot should be ($x,$y)&quot;&#10;        } else {&#10;            &quot;Starting location: ($x, $y), field size: $fieldSize.\n&quot; +&#10;                    &quot;Wrong location after:\n&quot; + robotHandler.loggedMovements&#10;        }&#10;        Assert.assertEquals(message, string, actualString)&#10;    }&#10;&#10;    @Test&#10;    fun test1Initial() = testMovements(&quot;Robot(x=2,y=3)&quot;, 10, 2, 3) {}&#10;&#10;    @Test&#10;    fun test2Right() = testMovements(&quot;Robot(x=3,y=3)&quot;, 10, 2, 3) {&#10;        goRight(1)&#10;    }&#10;&#10;    @Test&#10;    fun test3Circle() = testMovements(&quot;Robot(x=2,y=3)&quot;, 10, 2, 3) {&#10;        goRight(10)&#10;        goLeft(10)&#10;        goDown(10)&#10;        goUp(10)&#10;    }&#10;}&#10;&#10;fun Robot(vararg a: Any?): Robot = TODO()&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570271000" />
                          </EduTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: Generating &lt;code&gt;toString&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;IntelliJ Idea can generate the &lt;code&gt;toString()&lt;/code&gt; member function automatically.&lt;/p&gt;&lt;p&gt;Call the &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Generate&lt;/code&gt;&lt;/span&gt; action, or use the shortcut&#10;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:NewElement;&lt;/span&gt;, or click on the main &#10;menu to choose &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Code | Generate&lt;/code&gt;&lt;/span&gt;. &#10;In the &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Generate&lt;/code&gt;&lt;/span&gt; menu choose &lt;code&gt;toString&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;You can choose values of which properties must be included&#10;in the generated function.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Constructors+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399621" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="8" />
                                                <option name="offset" value="91" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="8" />
                                            <option name="offset" value="91" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="/*TODO*/" />
                                            <option name="possibleAnswer" value="override fun toString(): String {&#10;        return &quot;Human(name='$name', age=$age)&quot;&#10;    }" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package constructors3&#10;&#10;class Human(&#10;        val name: String,&#10;        val age: Int&#10;) {&#10;    /*TODO*/&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val human = Human(&quot;Rick&quot;, 70)&#10;    println(human)&#10;}&#10;/* Expected output:&#10;Human(name='Rick', age=70)&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package constructors3&#10;&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570272000" />
                          </IdeTask>
                        </list>
                      </option>
                      <option name="unitId" value="90569" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="116112" />
                      <option name="index" value="5" />
                      <option name="name" value="Constraining Visibility" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570277000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Constraining Visibility&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/104331/step/1&quot;&gt;Read &amp;quot;Constraining Visibility&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399622" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Cookie.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Cookie.kt" />
                                      <option name="text" value="// Visibility/Cookie.kt&#10;&#10;class Cookie(&#10;  private var isReady: Boolean     // [1]&#10;) {&#10;  private fun crumble() =          // [2]&#10;    println(&quot;crumble&quot;)&#10;&#10;  public fun bite() =              // [3]&#10;    println(&quot;bite&quot;)&#10;&#10;  fun eatUp() {                    // [4]&#10;    isReady = true                 // [5]&#10;    crumble()&#10;    bite()&#10;  }&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val x = Cookie(false)&#10;  x.bite()&#10;  // Can't access private members:&#10;  // x.isReady&#10;  // x.crumble()&#10;  x.eatUp()&#10;}&#10;/* Output:&#10;bite&#10;crumble&#10;bite&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/MultipleRef.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/MultipleRef.kt" />
                                      <option name="text" value="// Visibility/MultipleRef.kt&#10;&#10;class Counter(var start: Int) {&#10;  fun increment() { start += 1 }&#10;  override fun toString() = start.toString()&#10;}&#10;&#10;class CounterHolder(counter: Counter) {&#10;  private val ctr = counter&#10;  override fun toString() =&#10;    &quot;CounterHolder: &quot; + ctr&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val c = Counter(11)                 // [1]&#10;  val ch = CounterHolder(c)           // [2]&#10;  println(ch)&#10;  c.increment()                       // [3]&#10;  println(ch)&#10;  val ch2 = CounterHolder(Counter(9)) // [4]&#10;  println(ch2)&#10;}&#10;/* Output:&#10;CounterHolder: 11&#10;CounterHolder: 12&#10;CounterHolder: 9&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ObserveAnimals.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ObserveAnimals.kt" />
                                      <option name="text" value="// Visibility/ObserveAnimals.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  // Can't access private members&#10;  // declared in another file.&#10;  // Class is private:&#10;  // val rabbit = Animal(&quot;Rabbit&quot;)&#10;  // Function is private:&#10;  // recordAnimal(rabbit)&#10;  // Property is private:&#10;  // index++&#10;&#10;  recordAnimals()&#10;  recordAnimalsCount()&#10;}&#10;/* Output:&#10;Animal #0: Tiger&#10;Animal #1: Antelope&#10;2 animals are here!&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/RecordAnimals.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/RecordAnimals.kt" />
                                      <option name="text" value="// Visibility/RecordAnimals.kt&#10;&#10;private var index = 0                  // [1]&#10;&#10;private class Animal(val name: String) // [2]&#10;&#10;private fun recordAnimal(              // [3]&#10;  animal: Animal&#10;) {&#10;  println(&quot;Animal #$index: ${animal.name}&quot;)&#10;  index++&#10;}&#10;&#10;fun recordAnimals() {&#10;  recordAnimal(Animal(&quot;Tiger&quot;))&#10;  recordAnimal(Animal(&quot;Antelope&quot;))&#10;}&#10;&#10;fun recordAnimalsCount() {&#10;  println(&quot;$index animals are here!&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570273000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Constraining Visibility (#1)&lt;/h2&gt;&lt;p&gt;Make all the properties and auxiliary functions &lt;code&gt;private&lt;/code&gt;. Only functions&#10;&lt;code&gt;goRight()&lt;/code&gt;, &lt;code&gt;goLeft()&lt;/code&gt;, &lt;code&gt;goDown()&lt;/code&gt;, &lt;code&gt;goUp()&lt;/code&gt;, &lt;code&gt;getLocation()&lt;/code&gt; and &lt;code&gt;toString()&lt;/code&gt;&#10;should be &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Constraining+Visibility+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399623" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="8" />
                                                <option name="offset" value="45" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="8" />
                                            <option name="offset" value="45" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Constructors" />
                                                <option name="placeholderIndex" value="0" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 2" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="/*TODO*/" />
                                            <option name="possibleAnswer" value="&#10;        private val fieldSize: Int,&#10;        private var x: Int,&#10;        private var y: Int&#10;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="0" />
                                                <option name="offset" value="57" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="0" />
                                            <option name="offset" value="57" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Constructors" />
                                                <option name="placeholderIndex" value="1" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 2" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="" />
                                            <option name="possibleAnswer" value="    private fun crossBoundary(coordinate: Int): Int {&#10;        val inBounds = coordinate % fieldSize&#10;        return if (inBounds &lt; 0) {&#10;            fieldSize + inBounds&#10;        } else {&#10;            inBounds&#10;        }&#10;    }&#10;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="2" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="96" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="96" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Constructors" />
                                                <option name="placeholderIndex" value="2" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 2" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="x += steps&#10;        x = crossBoundary(x)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="3" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="147" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="147" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Constructors" />
                                                <option name="placeholderIndex" value="3" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 2" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="x -= steps&#10;        x = crossBoundary(x)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="4" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="198" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="198" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Constructors" />
                                                <option name="placeholderIndex" value="4" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 2" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="y += steps&#10;        y = crossBoundary(y)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="5" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="247" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="247" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Constructors" />
                                                <option name="placeholderIndex" value="5" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 2" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="y -= steps&#10;        y = crossBoundary(y)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="6" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="293" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="293" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Constructors" />
                                                <option name="placeholderIndex" value="6" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 2" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="&quot;($x,$y)&quot;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="7" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="8" />
                                                <option name="offset" value="305" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="8" />
                                            <option name="offset" value="305" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Constructors" />
                                                <option name="placeholderIndex" value="7" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 2" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="/*TODO*/" />
                                            <option name="possibleAnswer" value="override fun toString() = &quot;Robot(x=$x,y=$y)&quot;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package constrainingVisibility1&#10;&#10;class Robot(/*TODO*/) {&#10;&#10;    fun goRight(steps: Int) {&#10;        TODO()&#10;    }&#10;&#10;    fun goLeft(steps: Int) {&#10;        TODO()&#10;    }&#10;&#10;    fun goDown(steps: Int) {&#10;        TODO()&#10;    }&#10;&#10;    fun goUp(steps: Int) {&#10;        TODO()&#10;    }&#10;&#10;    fun getLocation(): String = TODO()&#10;&#10;    /*TODO*/&#10;}&#10;&#10;/*&#10;fun main(args: Array&lt;String&gt;) {&#10;    val robot = Robot(10, 1, 1)&#10;    // Coordinates should be private:&#10;//    println(robot.x)&#10;}&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package constrainingVisibility1&#10;&#10;import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class TestRobotPrivateMembers {&#10;    @Test&#10;    fun testCheckAllThePropertiesArePrivate() {&#10;        val robotMethods = setOf(&quot;goRight&quot;, &quot;goLeft&quot;, &quot;goDown&quot;, &quot;goUp&quot;, &quot;getLocation&quot;)&#10;        val objectMethods = setOf(&quot;wait&quot;, &quot;equals&quot;, &quot;toString&quot;, &quot;hashCode&quot;, &quot;getClass&quot;, &quot;notify&quot;, &quot;notifyAll&quot;)&#10;        val publicMethods = robotMethods + objectMethods&#10;&#10;        val robotClass = Robot::class.java&#10;        val otherMethods = robotClass.methods.filter { it.name !in publicMethods }.map { it.name }&#10;&#10;        val (getters, methods) = otherMethods&#10;                .filterNot { it.startsWith(&quot;set&quot;) }&#10;                .partition { it.startsWith(&quot;get&quot;) }&#10;        val properties = getters.map { it.substringAfter(&quot;get&quot;).decapitalize() }&#10;        val message = buildString {&#10;            properties.forEach {&#10;                appendln(&quot;The property '$it' should be private&quot;)&#10;            }&#10;            methods.forEach {&#10;                appendln(&quot;The member function '$it' should be private&quot;)&#10;            }&#10;        }&#10;        Assert.assertTrue(message, otherMethods.isEmpty())&#10;    }&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570274000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Constraining Visibility (#2)&lt;/h2&gt;&lt;p&gt;A &lt;code&gt;Robot&lt;/code&gt; can only move forward. Check that the &lt;code&gt;steps&lt;/code&gt; argument is a positive&#10;number. If &lt;code&gt;steps&lt;/code&gt; is negative or zero, each of the functions  &lt;code&gt;goRight()&lt;/code&gt;,&#10;&lt;code&gt;goLeft()&lt;/code&gt;, &lt;code&gt;goDown()&lt;/code&gt; and &lt;code&gt;goUp()&lt;/code&gt; shouldn't update the location and should&#10;only display on the console: &lt;code&gt;&amp;quot;Incorrect input: $steps, the number of steps&#10;should be positive.&amp;quot;&lt;/code&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Constraining+Visibility+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399624" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="8" />
                                                <option name="offset" value="45" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="8" />
                                            <option name="offset" value="45" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Constraining Visibility" />
                                                <option name="placeholderIndex" value="0" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 1" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="/*TODO*/" />
                                            <option name="possibleAnswer" value="&#10;        private val fieldSize: Int,&#10;        private var x: Int,&#10;        private var y: Int&#10;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="0" />
                                                <option name="offset" value="57" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="0" />
                                            <option name="offset" value="57" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Constraining Visibility" />
                                                <option name="placeholderIndex" value="1" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 1" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="" />
                                            <option name="possibleAnswer" value="    private fun crossBoundary(coordinate: Int): Int {&#10;        val inBounds = coordinate % fieldSize&#10;        return if (inBounds &lt; 0) {&#10;            fieldSize + inBounds&#10;        } else {&#10;            inBounds&#10;        }&#10;    }&#10;&#10;    private fun checkSteps(steps: Int): Boolean {&#10;        if (steps &lt;= 0) {&#10;            println(&quot;Incorrect input: $steps, the number of steps should be positive.&quot;)&#10;            return true&#10;        }&#10;        return false&#10;    }&#10;&#10;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="2" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="96" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="96" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Constraining Visibility" />
                                                <option name="placeholderIndex" value="2" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 1" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="if (checkSteps(steps)) return&#10;        x += steps&#10;        x = crossBoundary(x)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="3" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="147" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="147" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Constraining Visibility" />
                                                <option name="placeholderIndex" value="3" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 1" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="if (checkSteps(steps)) return&#10;        x -= steps&#10;        x = crossBoundary(x)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="4" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="198" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="198" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Constraining Visibility" />
                                                <option name="placeholderIndex" value="4" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 1" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="if (checkSteps(steps)) return&#10;        y += steps&#10;        y = crossBoundary(y)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="5" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="247" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="247" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Constraining Visibility" />
                                                <option name="placeholderIndex" value="5" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 1" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="if (checkSteps(steps)) return&#10;        y -= steps&#10;        y = crossBoundary(y)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="6" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="293" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="293" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Constraining Visibility" />
                                                <option name="placeholderIndex" value="6" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 1" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="&quot;($x,$y)&quot;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="7" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="8" />
                                                <option name="offset" value="305" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="8" />
                                            <option name="offset" value="305" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Constraining Visibility" />
                                                <option name="placeholderIndex" value="7" />
                                                <option name="sectionName" value="Introduction to Objects" />
                                                <option name="taskName" value="Exercise 1" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="/*TODO*/" />
                                            <option name="possibleAnswer" value="override fun toString() = &quot;Robot(x=$x,y=$y)&quot;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package constrainingVisibility2&#10;&#10;class Robot(/*TODO*/) {&#10;&#10;    fun goRight(steps: Int) {&#10;        TODO()&#10;    }&#10;&#10;    fun goLeft(steps: Int) {&#10;        TODO()&#10;    }&#10;&#10;    fun goDown(steps: Int) {&#10;        TODO()&#10;    }&#10;&#10;    fun goUp(steps: Int) {&#10;        TODO()&#10;    }&#10;&#10;    fun getLocation(): String = TODO()&#10;&#10;    /*TODO*/&#10;}&#10;&#10;/*&#10;fun main(args: Array&lt;String&gt;) {&#10;    val robot = Robot(10, 1, 1)&#10;    robot.goRight(-1)&#10;}&#10;*/&#10;/* Output:&#10;Incorrect input: -1, the number of steps should be positive.&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package constrainingVisibility2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;import java.io.ByteArrayOutputStream&#10;import java.io.PrintStream&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestRobotIncorrectInput {&#10;    class RobotHandler() {&#10;        val robot: Robot = Robot(10, 0, 0)&#10;        val loggedMovements = StringBuilder()&#10;        var loggedSteps: Int? = null&#10;&#10;        fun goRight(steps: Int) {&#10;            robot.goRight(steps)&#10;            loggedMovements.appendln(&quot;goRight($steps)&quot;)&#10;            loggedSteps = steps&#10;        }&#10;&#10;        fun goLeft(steps: Int) {&#10;            robot.goLeft(steps)&#10;            loggedMovements.appendln(&quot;goLeft($steps)&quot;)&#10;            loggedSteps = steps&#10;        }&#10;&#10;        fun goDown(steps: Int) {&#10;            robot.goDown(steps)&#10;            loggedMovements.appendln(&quot;goDown($steps)&quot;)&#10;            loggedSteps = steps&#10;        }&#10;&#10;        fun goUp(steps: Int) {&#10;            robot.goUp(steps)&#10;            loggedMovements.appendln(&quot;goUp($steps)&quot;)&#10;            loggedSteps = steps&#10;        }&#10;    }&#10;&#10;    private fun getErrorMessageText(steps: Int?) =&#10;            &quot;Incorrect input: $steps, the number of steps should be positive.&quot;&#10;&#10;    private fun testWrongArgumentOutput(movements: RobotHandler.() -&gt; Unit) {&#10;        val byteArrayOutputStream = ByteArrayOutputStream()&#10;        System.setOut(PrintStream(byteArrayOutputStream))&#10;&#10;        val robotHandler = RobotHandler()&#10;        robotHandler.movements()&#10;&#10;        val steps = robotHandler.loggedSteps&#10;        val incorrectOutput = &quot;Incorrect output after:\n&quot; + robotHandler.loggedMovements&#10;        if (byteArrayOutputStream.toString().isEmpty()) {&#10;            throw AssertionError(incorrectOutput + &quot;\nThe message &quot; +&#10;                    &quot;\&quot;${getErrorMessageText(steps)}\&quot; should be printed to the console&quot;)&#10;        }&#10;        Assert.assertEquals(incorrectOutput,&#10;                &quot;${getErrorMessageText(steps)}\n&quot;,&#10;                byteArrayOutputStream.toString())&#10;    }&#10;&#10;&#10;    @Test&#10;    fun test1Right() = testWrongArgumentOutput {&#10;        goRight(-5)&#10;    }&#10;&#10;    @Test&#10;    fun test2Left() = testWrongArgumentOutput {&#10;        goLeft(0)&#10;    }&#10;&#10;    @Test&#10;    fun test3Up() = testWrongArgumentOutput {&#10;        goUp(-10)&#10;    }&#10;&#10;    @Test&#10;    fun test4Down() = testWrongArgumentOutput {&#10;        goDown(-50)&#10;    }&#10;}&#10;&#10;fun Robot(vararg a: Any?): Robot = TODO()&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570275000" />
                          </EduTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: Extend Selection&lt;/h2&gt;&lt;p&gt;When you apply refactorings like &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Extract Property&lt;/code&gt;&lt;/span&gt;, &#10;you need to select the expression that you'd like to extract, which might be &#10;quite complicated.&lt;/p&gt;&lt;p&gt;The &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Extend Selection&lt;/code&gt;&lt;/span&gt; action accessible with the&#10;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:EditorSelectWord;&lt;/span&gt; shortcut is very&#10;helpful here: it selects the outside expression, increasing the selection by&#10;each step. The reverse action is called&#10;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Shrink selection&lt;/code&gt;&lt;/span&gt; and is accessible by&#10;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:EditorUnSelectWord;&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;Try putting the caret on line &lt;code&gt;println(&amp;quot;Incorrect input: $x should be&#10;positive&amp;quot;)&lt;/code&gt; and extend and shrink the selection to see how it works.&#10;Continue to extend the selection until the whole file is selected.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Constraining+Visibility+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399625" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package constrainingVisibility3&#10;&#10;fun printSum(x: Int) {&#10;    if (x &lt;= 0) {&#10;        println(&quot;Incorrect input: $x should be positive&quot;)&#10;        return&#10;    }&#10;    println((0..x).sum())&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    printSum(-10)&#10;}&#10;/* Output:&#10;Incorrect input: -10 should be positive&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package constrainingVisibility3&#10;&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570276000" />
                          </IdeTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: Extract Function&lt;/h2&gt;&lt;p&gt;IntelliJ Idea allows you to extract repetitive code into a function. Select the&#10;following code in the body of the first function:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;if (x &amp;lt;= 0) {&#10;    println(&amp;quot;Incorrect input: $x should be positive&amp;quot;)&#10;    return&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Type the &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Extract Function&lt;/code&gt;&lt;/span&gt; action,&#10;or use the shortcut &lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:ExtractMethod;&lt;/span&gt;, &#10;or click on the main menu to choose&#10;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Refactor | Extract | Function&lt;/code&gt;&lt;/span&gt;. &#10;Type the new function name &lt;code&gt;checkArgument&lt;/code&gt; and press&#10;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:EditorEnter;&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;Agree to &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Process Duplicates&lt;/code&gt;&lt;/span&gt;, so that the second &#10;occurrence of the same piece of code was also extracted.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Constraining+Visibility+%2F+Exercise4&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="5" />
                            <option name="name" value="Exercise 4" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399627" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package constrainingVisibility4&#10;&#10;fun printSum(x: Int) {&#10;    if (x &lt;= 0) {&#10;        println(&quot;Incorrect input: $x should be positive&quot;)&#10;        return&#10;    }&#10;    println((0..x).sum())&#10;}&#10;&#10;fun printAverage(x: Int) {&#10;    if (x &lt;= 0) {&#10;        println(&quot;Incorrect input: $x should be positive&quot;)&#10;        return&#10;    }&#10;    println((0..x).average())&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    printSum(-10)&#10;    printAverage(-10)&#10;}&#10;/* Output:&#10;Incorrect input: -10 should be positive&#10;Incorrect input: -10 should be positive&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package constrainingVisibility4&#10;&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570277000" />
                          </IdeTask>
                        </list>
                      </option>
                      <option name="unitId" value="90570" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="116113" />
                      <option name="index" value="6" />
                      <option name="name" value="Imports &amp; Packages" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570281000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Imports &amp;amp; Packages&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/104332/step/1&quot;&gt;Read &amp;quot;Imports &amp;amp; Packages&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399628" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/FullyQualify.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/FullyQualify.kt" />
                                      <option name="text" value="// ImportsAndPackages/FullyQualify.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  println(kotlin.math.PI)&#10;  println(kotlin.math.cos(kotlin.math.PI))&#10;  println(kotlin.math.cos(2 * kotlin.math.PI))&#10;}&#10;/* Output:&#10;3.141592653589793&#10;-1.0&#10;1.0&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ImportClass.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ImportClass.kt" />
                                      <option name="text" value="// ImportsAndPackages/ImportClass.kt&#10;import kotlin.math.PI&#10;import kotlin.math.cos  // Cosine&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  println(PI)&#10;  println(cos(PI))&#10;  println(cos(2 * PI))&#10;}&#10;/* Output:&#10;3.141592653589793&#10;-1.0&#10;1.0&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ImportEverything.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ImportEverything.kt" />
                                      <option name="text" value="// ImportsAndPackages/ImportEverything.kt&#10;import kotlin.math.*&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  println(E)&#10;  println(E.roundToInt())&#10;  println(E.toInt())&#10;}&#10;/* Output:&#10;2.718281828459045&#10;3&#10;2&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ImportNameChange.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ImportNameChange.kt" />
                                      <option name="text" value="// ImportsAndPackages/ImportNameChange.kt&#10;import kotlin.math.PI as circleRatio&#10;import kotlin.math.cos as cosine&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  println(circleRatio)&#10;  println(cosine(circleRatio))&#10;  println(cosine(2 * circleRatio))&#10;}&#10;/* Output:&#10;3.141592653589793&#10;-1.0&#10;1.0&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ImportPythagorean.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ImportPythagorean.kt" />
                                      <option name="text" value="// ImportsAndPackages/ImportPythagorean.kt&#10;import pythagorean.RightTriangle&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val rt = RightTriangle(3.0, 4.0)&#10;  println(rt.hypotenuse())&#10;  println(rt.area())&#10;}&#10;/* Output:&#10;5.0&#10;6.0&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/PythagoreanTheorem.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/PythagoreanTheorem.kt" />
                                      <option name="text" value="// ImportsAndPackages/PythagoreanTheorem.kt&#10;package pythagorean&#10;import kotlin.math.sqrt&#10;&#10;class RightTriangle(&#10;  val a: Double,&#10;  val b: Double&#10;) {&#10;  fun hypotenuse() = sqrt(a * a + b * b)&#10;  fun area() = a * b / 2&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570279000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Imports &amp;amp; Packages (#1)&lt;/h2&gt;&lt;p&gt;Create the class &lt;code&gt;EquilateralTriangle&lt;/code&gt; in a &lt;code&gt;package pythagorean&lt;/code&gt;.&#10;&lt;code&gt;EquilateralTriangle&lt;/code&gt; should take &lt;code&gt;side&lt;/code&gt; as a constructor argument and define &#10;a member function &lt;code&gt;area()&lt;/code&gt; which calculates it area using the formula &#10;&lt;code&gt;sqrt(3.0) / 4 * side * side&lt;/code&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Imports+%26+Packages+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399629" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Main.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Main.kt" />
                                      <option name="text" value="package importsandPackages1&#10;&#10;/*&#10;import pythagorean.EquilateralTriangle&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val et = EquilateralTriangle(1.0)&#10;    println(et.area())&#10;}&#10;*/&#10;/* Output:&#10;0.4330127018922193&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="8" />
                                                <option name="offset" value="0" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="8" />
                                            <option name="offset" value="0" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="/*TODO*/" />
                                            <option name="possibleAnswer" value="package pythagorean&#10;&#10;import kotlin.math.sqrt&#10;&#10;class EquilateralTriangle(val side: Double) {&#10;    fun area() = sqrt(3.0) / 4 * side * side&#10;}" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="/*TODO*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package importsandPackages1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;import kotlin.math.sqrt&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestEquilateralTriangle {&#10;    private fun checkArea(side: Double) {&#10;        val triangleClass = ClassLoader.getSystemClassLoader().loadClass(&quot;pythagorean.EquilateralTriangle&quot;)&#10;        val constructors = triangleClass.constructors&#10;        if (constructors.isEmpty()) {&#10;            throw AssertionError(&quot;The class EquilateralTriangle should have a constructor&quot;)&#10;        }&#10;        val constructor = constructors[0]&#10;        val et = constructor.newInstance(side)&#10;        val expected = sqrt(3.0) / 4 * side * side&#10;&#10;        val areaMethod = triangleClass.getMethod(&quot;area&quot;)&#10;        val areaResult = areaMethod.invoke(et) as? Double&#10;                ?: throw AssertionError(&quot;area member function should return Double as a result&quot;)&#10;        Assert.assertEquals(&quot;Wrong result for side $side&quot;, expected, areaResult, 0.00000000000001)&#10;    }&#10;&#10;    @Test&#10;    fun testArea1() = checkArea(1.0)&#10;&#10;    @Test&#10;    fun testArea2() = checkArea(2.0)&#10;&#10;    @Test&#10;    fun testArea3() = checkArea(3.0)&#10;&#10;    @Test&#10;    fun testArea4() = checkArea(4.0)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570280000" />
                          </EduTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: Auto-import&lt;/h2&gt;&lt;p&gt;IntelliJ Idea can import declarations for you automatically if you choose the&#10;required declaration in the completion list. Complete the class name&#10;&lt;code&gt;IsoscelesRightTriangle&lt;/code&gt;. Either start typing or call the completion explicitly&#10;by using &lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:CodeCompletion;&lt;/span&gt; shortcut. &#10;Notice how IntelliJ Idea adds an &lt;code&gt;import&lt;/code&gt; statement.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Imports+%26+Packages+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399630" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package importsandPackages2&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;//    val t = Isosceles&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Triangle.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Triangle.kt" />
                                      <option name="text" value="package pythagorean&#10;&#10;class IsoscelesRightTriangle(&#10;        val side: Double&#10;) {&#10;    fun area() = side * side / 2&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package importsandPackages2&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570281000" />
                          </IdeTask>
                        </list>
                      </option>
                      <option name="unitId" value="90571" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="116115" />
                      <option name="index" value="7" />
                      <option name="name" value="Testing" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570284000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Testing&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/104333/step/1&quot;&gt;Read &amp;quot;Testing&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399632" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/TDDFail.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/TDDFail.kt" />
                                      <option name="text" value="// Testing/TDDFail.kt&#10;package testing1&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  calculateBMI(160, 68) eq &quot;Normal weight&quot;&#10;//  calculateBMI(100, 68) eq &quot;Underweight&quot;&#10;//  calculateBMI(200, 68) eq &quot;Overweight&quot;&#10;}&#10;&#10;fun calculateBMI(lbs: Int, height: Int) =&#10;  &quot;Normal weight&quot;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/TDDStillFails.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/TDDStillFails.kt" />
                                      <option name="text" value="// Testing/TDDStillFails.kt&#10;package testing2&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  // Everything fails:&#10;  // calculateBMI(160, 68) eq &quot;Normal weight&quot;&#10;  // calculateBMI(100, 68) eq &quot;Underweight&quot;&#10;  // calculateBMI(200, 68) eq &quot;Overweight&quot;&#10;}&#10;&#10;fun calculateBMI(&#10;  lbs: Int,&#10;  height: Int&#10;): String {&#10;  val bmi = lbs / (height * height) * 703.07&#10;  return if (bmi &lt; 18.5) &quot;Underweight&quot;&#10;  else if (bmi &lt; 25) &quot;Normal weight&quot;&#10;  else &quot;Overweight&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/TDDWorks.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/TDDWorks.kt" />
                                      <option name="text" value="// Testing/TDDWorks.kt&#10;package testing3&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  calculateBMI(160.0, 68.0) eq &quot;Normal weight&quot;&#10;  calculateBMI(100.0, 68.0) eq &quot;Underweight&quot;&#10;  calculateBMI(200.0, 68.0) eq &quot;Overweight&quot;&#10;}&#10;&#10;fun calculateBMI(&#10;  lbs: Double,&#10;  height: Double&#10;): String {&#10;  val bmi = lbs / (height * height) * 703.07&#10;  return if (bmi &lt; 18.5) &quot;Underweight&quot;&#10;  else if (bmi &lt; 25) &quot;Normal weight&quot;&#10;  else &quot;Overweight&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/TestingExample.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/TestingExample.kt" />
                                      <option name="text" value="// Testing/TestingExample.kt&#10;import atomictest.*&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val v1 = 11&#10;  val v2 = &quot;Ontology&quot;&#10;&#10;  // Test expressions using 'eq' (&quot;equals&quot;):&#10;  v1 eq 11&#10;  v2 eq &quot;Ontology&quot;&#10;&#10;  // 'neq' means &quot;not equal&quot;&#10;  v2 neq &quot;Epistimology&quot;&#10;&#10;  // Error: Epistimology != Ontology&#10;  // v2 eq &quot;Epistimology&quot;&#10;}&#10;/* Output:&#10;11&#10;Ontology&#10;Ontology&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570283000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Testing (#1)&lt;/h2&gt;&lt;p&gt;Use Test Driven Development (write a failing test, and then write the code to&#10;fix it) to calculate the area of a quadrangle. Start with the sample code and&#10;fix the intentional bugs.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Testing+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399633" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="5" />
                                                <option name="offset" value="108" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="5" />
                                            <option name="offset" value="108" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="x * x" />
                                            <option name="possibleAnswer" value="x * y" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="15" />
                                                <option name="offset" value="159" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="15" />
                                            <option name="offset" value="159" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="h / 2 * (x + y)" />
                                            <option name="possibleAnswer" value="h / 2.0 * (x + y)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package testing1&#10;&#10;import atomictest.eq&#10;&#10;fun squareArea(x: Int) = x * x&#10;&#10;fun rectangleArea(x: Int, y: Int) = x * x&#10;&#10;fun trapezoidArea(x: Int, y: Int, h: Int) = h / 2 * (x + y)&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    squareArea(1) eq 1&#10;    squareArea(2) eq 4&#10;    squareArea(5) eq 25&#10;    rectangleArea(2, 2) eq 4&#10;    rectangleArea(5, 4) eq 20&#10;    trapezoidArea(2, 2, 4) eq 8.0&#10;    trapezoidArea(3, 4, 1) eq 3.5&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package testing1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestTesting {&#10;&#10;    @Test&#10;    fun test1SquareArea() = Assert.assertEquals(&#10;            &quot;&quot;&quot;Calling &quot;squareArea(1) eq 1&quot; fails:&quot;&quot;&quot;, 1, squareArea(1))&#10;&#10;    @Test&#10;    fun test2SquareArea() = Assert.assertEquals(&#10;            &quot;&quot;&quot;Calling &quot;squareArea(2) eq 4&quot; fails:&quot;&quot;&quot;, 4, squareArea(2))&#10;&#10;    @Test&#10;    fun test3SquareArea() = Assert.assertEquals(&#10;            &quot;&quot;&quot;Calling &quot;squareArea(5) eq 25&quot; fails:&quot;&quot;&quot;, 25, squareArea(5))&#10;&#10;    @Test&#10;    fun test4RectangleArea() = Assert.assertEquals(&#10;            &quot;&quot;&quot;Calling &quot;rectangleArea(2, 2) eq 4&quot; fails:&quot;&quot;&quot;, 4, rectangleArea(2, 2))&#10;&#10;    @Test&#10;    fun test5RectangleArea() = Assert.assertEquals(&#10;            &quot;&quot;&quot;Calling &quot;rectangleArea(5, 4) eq 20&quot; fails:&quot;&quot;&quot;, 20, rectangleArea(5, 4))&#10;&#10;    @Test&#10;    fun test6TrapezoidArea() = Assert.assertEquals(&#10;            &quot;&quot;&quot;Calling &quot;trapezoidArea(2, 2, 4) eq 8.0&quot; fails:&quot;&quot;&quot;,&#10;            8.0, trapezoidArea(2, 2, 4).toDouble(), 0.00000001)&#10;&#10;    @Test&#10;    fun test7TrapezoidArea() = Assert.assertEquals(&#10;            &quot;&quot;&quot;Calling &quot;trapezoidArea(3, 4, 1) eq 3.5&quot; fails:&quot;&quot;&quot;,&#10;            3.5, trapezoidArea(3, 4, 1).toDouble(), 0.00000001)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570283000" />
                          </EduTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: Comment / Uncomment&lt;/h2&gt;&lt;p&gt;You can comment and uncomment a line of code by using one shortcut:&#10;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:CommentByLineComment;&lt;/span&gt;. &#10;Calling this action on an uncommented line will comment&#10;it, calling it on a commented line will uncomment it.&lt;/p&gt;&lt;p&gt;Using this shortcut is much faster than commenting or uncommenting lines by&#10;hand.&lt;/p&gt;&lt;p&gt;Uncomment the first &lt;code&gt;println()&lt;/code&gt; command, and comment the second one using the&#10;shortcut.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Testing+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399634" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package testing2&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;//    println(&quot;Uncomment me&quot;)&#10;    println(&quot;Comment me&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package testing2&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570284000" />
                          </IdeTask>
                        </list>
                      </option>
                      <option name="unitId" value="90573" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="116117" />
                      <option name="index" value="8" />
                      <option name="name" value="Exceptions" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570287000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Exceptions&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/104334/step/1&quot;&gt;Read &amp;quot;Exceptions&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399636" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/AverageIncome.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/AverageIncome.kt" />
                                      <option name="text" value="// Exceptions/AverageIncome.kt&#10;package firstversion&#10;import atomictest.*&#10;&#10;fun averageIncome(income: Int, months: Int) =&#10;  income / months&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  averageIncome(3300, 3) eq 1100&#10;  capture {&#10;    averageIncome(5000, 0)&#10;  } eq &quot;ArithmeticException: / by zero&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/AverageIncomeWithException.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/AverageIncomeWithException.kt" />
                                      <option name="text" value="// Exceptions/AverageIncomeWithException.kt&#10;package properexception&#10;import atomictest.*&#10;&#10;fun averageIncome(income: Int, months: Int) =&#10;  if (months == 0)&#10;    throw IllegalArgumentException(    // [1]&#10;      &quot;Months can't be zero&quot;)&#10;  else&#10;    income / months&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  averageIncome(3300, 3) eq 1100&#10;  capture {&#10;    averageIncome(5000, 0)&#10;  } eq &quot;IllegalArgumentException: &quot; +&#10;    &quot;Months can't be zero&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/AverageIncomeWithNull.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/AverageIncomeWithNull.kt" />
                                      <option name="text" value="// Exceptions/AverageIncomeWithNull.kt&#10;package withnull&#10;import atomictest.eq&#10;&#10;fun averageIncome(income: Int, months: Int) =&#10;  if (months == 0)&#10;    null&#10;  else&#10;    income / months&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  averageIncome(3300, 3) eq 1100&#10;  averageIncome(5000, 0) eq null&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/IntroducingCapture.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/IntroducingCapture.kt" />
                                      <option name="text" value="// Exceptions/IntroducingCapture.kt&#10;import atomictest.*&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  capture {&#10;    &quot;1$&quot;.toInt()&#10;  } eq &quot;NumberFormatException: &quot; +&#10;    &quot;&quot;&quot;For input string: &quot;1$&quot;&quot;&quot;&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/IntroducingNull.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/IntroducingNull.kt" />
                                      <option name="text" value="// Exceptions/IntroducingNull.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  &quot;1$&quot;.toIntOrNull() eq null&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ToIntException.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ToIntException.kt" />
                                      <option name="text" value="// Exceptions/ToIntException.kt&#10;&#10;fun erroneousCode() {&#10;  // Uncomment this line to get an exception:&#10;  // val i = &quot;1$&quot;.toInt()        // [1]&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  erroneousCode()&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570286000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Exceptions (#1)&lt;/h2&gt;&lt;p&gt;Implement the function &lt;code&gt;repeatChar()&lt;/code&gt; that returns a &lt;code&gt;String&lt;/code&gt; consisting of a&#10;character repeated a number of times specified by a function argument. The&#10;function should throw an exception if the caller asks to repeat a character a&#10;negative number of times.&lt;/p&gt;&lt;p&gt;Throw an exception with the message &lt;code&gt;&amp;quot;Count 'n' must be non-negative, but was xxx.&amp;quot;&lt;/code&gt;&#10;where xxx should be replaced with the actual number.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Exceptions+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399637" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="116" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="116" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="if (n &lt; 0) throw IllegalArgumentException(&quot;Count 'n' must be non-negative, but was $n.&quot;)&#10;    var s = &quot;&quot;&#10;    repeat (n) {&#10;        s += ch&#10;    }&#10;    return s" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package exceptions1&#10;&#10;import atomictest.capture&#10;import atomictest.eq&#10;&#10;fun repeatChar(ch: Char, n: Int): String {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    repeatChar('a', 4) eq &quot;aaaa&quot;&#10;    capture {&#10;        repeatChar('c', -2)&#10;    } eq &quot;IllegalArgumentException: Count 'n' must be non-negative, but was -2.&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package exceptions1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestExceptions1 {&#10;    @Test&#10;    fun test1Positive() = Assert.assertEquals(&quot;qqq&quot;, repeatChar('q', 3))&#10;&#10;    @Test&#10;    fun test2Zero() = Assert.assertEquals(&quot;&quot;, repeatChar('v', 0))&#10;&#10;    @Test&#10;    fun test2Negative() {&#10;        try {&#10;            repeatChar('v', -5)&#10;            throw AssertionError(&quot;&quot;&quot;IllegalArgumentException should be thrown for &quot;repeatChar('v', -5)&quot;&quot;&quot;&quot;)&#10;        } catch (e: IllegalArgumentException) {&#10;            Assert.assertEquals(&quot;Incorrect exception message: &quot;, &quot;Count 'n' must be non-negative, but was -5.&quot;, e.message)&#10;        }&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570286000" />
                          </EduTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: Analyze Stacktrace&lt;/h2&gt;&lt;p&gt;You can automatically navigate to the line where an exception was thrown by&#10;clicking on it in the stacktrace. Run &lt;code&gt;Task.kt&lt;/code&gt; to see the stacktrace and&#10;navigate to different lines.&lt;/p&gt;&lt;p&gt;You can also analyze the stacktrace copied from another place, like a bug&#10;tracker. Copy the following stacktrace and call the action&#10;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Analyze stacktrace&lt;/code&gt;&lt;/span&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Exception in thread &amp;quot;main&amp;quot; java.lang.IllegalStateException: something is wrong&#10;&#9;at stacktrace.TaskKt.foo(Task.kt:4)&#10;&#9;at stacktrace.TaskKt.bar(Task.kt:8)&#10;&#9;at stacktrace.TaskKt.main(Task.kt:12)&#10;&lt;/code&gt;&lt;/pre&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Exceptions+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399638" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package stacktrace&#10;&#10;fun foo() {&#10;    throw IllegalStateException(&quot;something is wrong&quot;)&#10;}&#10;&#10;fun bar() {&#10;    foo()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    bar()&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package stacktrace&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570287000" />
                          </IdeTask>
                        </list>
                      </option>
                      <option name="unitId" value="90575" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="116118" />
                      <option name="index" value="9" />
                      <option name="name" value="Lists" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570292000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Lists&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/104335/step/1&quot;&gt;Read &amp;quot;Lists&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399639" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/ListUsefulFunction.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ListUsefulFunction.kt" />
                                      <option name="text" value="// Lists/ListUsefulFunction.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val doubles =&#10;    listOf(1.1, 2.2, 3.3, 4.4)&#10;  doubles.min() eq 1.1&#10;  doubles.max() eq 4.4&#10;&#10;  val strings = listOf(&quot;Twas&quot;, &quot;Brillig&quot;,&#10;    &quot;And&quot;, &quot;Slithy&quot;, &quot;Toves&quot;)&#10;  strings eq listOf(&quot;Twas&quot;, &quot;Brillig&quot;,&#10;    &quot;And&quot;, &quot;Slithy&quot;, &quot;Toves&quot;)&#10;  strings.sorted() eq listOf(&quot;And&quot;,&#10;    &quot;Brillig&quot;, &quot;Slithy&quot;, &quot;Toves&quot;, &quot;Twas&quot;)&#10;  strings.reversed() eq listOf(&quot;Toves&quot;,&#10;    &quot;Slithy&quot;, &quot;And&quot;, &quot;Brillig&quot;, &quot;Twas&quot;)&#10;  strings.first() eq &quot;Twas&quot;&#10;  strings.takeLast(2) eq&#10;    listOf(&quot;Slithy&quot;, &quot;Toves&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Lists.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Lists.kt" />
                                      <option name="text" value="// Lists/Lists.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  // Lists hold other objects:&#10;  val ints = listOf(99, 3, 5, 7, 11, 13)&#10;  ints eq &quot;[99, 3, 5, 7, 11, 13]&quot;      // [1]&#10;&#10;  // Select each element in the List:&#10;  var result = &quot;&quot;&#10;  for (i in ints)                      // [2]&#10;    result += &quot;$i &quot;&#10;  result eq &quot;99 3 5 7 11 13 &quot;&#10;&#10;  // &quot;[]&quot; is &quot;Indexing&quot;:&#10;  ints[4] eq 11                        // [3]&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/MultipleListRefs.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/MultipleListRefs.kt" />
                                      <option name="text" value="// Lists/MultipleListRefs.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val first = mutableListOf(1)&#10;  val second: List&lt;Int&gt; = first&#10;  second eq listOf(1)&#10;&#10;  first += 2&#10;  // second sees the change:&#10;  second eq listOf(1, 2)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/MutListIsList.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/MutListIsList.kt" />
                                      <option name="text" value="// Lists/MutListIsList.kt&#10;import atomictest.eq&#10;&#10;fun getList(): List&lt;Int&gt; {&#10;  return mutableListOf(1, 2, 3)&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  // getList() produces a read-only List:&#10;  val list = getList()&#10;  // list += 3 // Error&#10;  list eq listOf(1, 2, 3)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/MutableList.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/MutableList.kt" />
                                      <option name="text" value="// Lists/MutableList.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = mutableListOf&lt;Int&gt;()&#10;&#10;  list.add(1)&#10;  list.addAll(listOf(2, 3))&#10;&#10;  list += 4&#10;  list += listOf(5, 6)&#10;&#10;  list eq listOf(1, 2, 3, 4, 5, 6)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/OutOfBounds.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/OutOfBounds.kt" />
                                      <option name="text" value="// Lists/OutOfBounds.kt&#10;import atomictest.*&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val ints = listOf(1, 2, 3)&#10;  capture {&#10;    ints[3]&#10;  } eq &quot;ArrayIndexOutOfBoundsException: 3&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ParameterizedReturn.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ParameterizedReturn.kt" />
                                      <option name="text" value="// Lists/ParameterizedReturn.kt&#10;import atomictest.eq&#10;&#10;// Return type is inferred:&#10;fun inferred(c1: Char, c2: Char) =&#10;  listOf(c1, c2)&#10;&#10;// Explicit return type:&#10;fun explicit(c1: Char, c2: Char): List&lt;Char&gt; =&#10;  listOf(c1, c2)&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  inferred('a', 'b') eq &quot;[a, b]&quot;&#10;  explicit('y', 'z') eq &quot;[y, z]&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ParameterizedTypes.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ParameterizedTypes.kt" />
                                      <option name="text" value="// Lists/ParameterizedTypes.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  // Type is inferred:&#10;  val numbers = listOf(1, 2, 3)&#10;  val strings =&#10;    listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;)&#10;  // Exactly the same, but explicitly typed:&#10;  val numbers2: List&lt;Int&gt; = listOf(1, 2, 3)&#10;  val strings2: List&lt;String&gt; =&#10;    listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;)&#10;  numbers eq numbers2&#10;  strings eq strings2&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570289000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Lists (#1)&lt;/h2&gt;&lt;p&gt;The Kotlin standard library contains many functions to work with lists.&#10;However, it's still a good exercise to implement some of them by hand.&lt;/p&gt;&lt;p&gt;Find the maximum value in a list of natural numbers. If the list is empty,&#10;return zero.&lt;/p&gt;&lt;p&gt;The function &lt;code&gt;findMax()&lt;/code&gt; takes &lt;code&gt;IntList&lt;/code&gt; as an argument. &lt;code&gt;IntList&lt;/code&gt; is a toy&#10;class that only allows you to iterate over a list's contents, get its size and&#10;access elements by index.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Lists+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399640" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/IntList.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/IntList.kt" />
                                      <option name="text" value="package lists1&#10;&#10;class IntList(private val list: List&lt;Int&gt;) : Iterable&lt;Int&gt; {&#10;&#10;    override fun iterator(): Iterator&lt;Int&gt; = list.iterator()&#10;&#10;    operator fun get(index: Int): Int = list[index]&#10;&#10;    override fun toString() = list.toString()&#10;&#10;    fun size() = list.size&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="76" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="76" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="var max = 0&#10;    for (e in list) {&#10;        if (max &lt;= e) {&#10;            max = e&#10;        }&#10;    }&#10;    return max" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package lists1&#10;&#10;import atomictest.eq&#10;&#10;fun findMax(list: IntList): Int {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val list = IntList(listOf(1, 2, 3, 2))&#10;    findMax(list) eq 3&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package lists1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestMaxInList {&#10;    private fun checkMaximum(list: List&lt;Int&gt;, max: Int) {&#10;        val intList = IntList(list)&#10;        Assert.assertEquals(&quot;Incorrect maximum for $intList&quot;, max, findMax(intList))&#10;    }&#10;&#10;    @Test&#10;    fun test1OneElement() {&#10;        checkMaximum(listOf(1), 1)&#10;    }&#10;&#10;    @Test&#10;    fun test2TwoElements() {&#10;        checkMaximum(listOf(1, 4), 4)&#10;    }&#10;&#10;    @Test&#10;    fun test3EmptyList() {&#10;        checkMaximum(listOf(), 0)&#10;    }&#10;&#10;    @Test&#10;    fun test4SeveralElements() {&#10;        checkMaximum(listOf(6, 2, 111, 7, 19, 21, 50), 111)&#10;    }&#10;&#10;    @Test&#10;    fun testFirstMax() {&#10;        checkMaximum(listOf(111, 6, 2, 7, 19, 21, 50), 111)&#10;    }&#10;&#10;    @Test&#10;    fun test5LastMax() {&#10;        checkMaximum(listOf(6, 2, 7, 19, 21, 50, 111), 111)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570290000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Lists (#1)&lt;/h2&gt;&lt;p&gt;Count the number of times a given element occurs in an &lt;code&gt;IntList&lt;/code&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Lists+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399641" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/IntList.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/IntList.kt" />
                                      <option name="text" value="package lists2&#10;&#10;class IntList(private val list: List&lt;Int&gt;) : Iterable&lt;Int&gt; {&#10;&#10;    override fun iterator(): Iterator&lt;Int&gt; = list.iterator()&#10;&#10;    operator fun get(index: Int): Int = list[index]&#10;&#10;    override fun toString() = list.toString()&#10;&#10;    fun size() = list.size&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="76" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="76" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="var occurrences = 0&#10;    for (e in list) {&#10;        if (number == e) {&#10;            occurrences++&#10;        }&#10;    }&#10;    return occurrences" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package lists2&#10;&#10;fun countOccurrences(list: IntList, number: Int): Int {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val list = IntList(listOf(1, 2, 3, 2))&#10;    println(countOccurrences(list, 2))  // 2&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package lists2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestCountOccurrences {&#10;&#10;    private fun checkOccurrences(list: List&lt;Int&gt;, number: Int, result: Int) {&#10;        val intList = IntList(list)&#10;        Assert.assertEquals(&quot;Incorrect maximum for $intList&quot;, result, countOccurrences(intList, number))&#10;    }&#10;&#10;    @Test&#10;    fun test1OneElement() {&#10;        checkOccurrences(listOf(1), 1, 1)&#10;    }&#10;&#10;    @Test&#10;    fun test2TwoElements() {&#10;        checkOccurrences(listOf(1, 1), 1, 2)&#10;    }&#10;&#10;    @Test&#10;    fun test3EmptyList() {&#10;        checkOccurrences(listOf(), 1, 0)&#10;    }&#10;&#10;    @Test&#10;    fun test4SeveralElements() {&#10;        checkOccurrences(listOf(6, 2, 7, 7, 19, 7, 21), 7, 3)&#10;    }&#10;&#10;    @Test&#10;    fun test5OnlyElements() {&#10;        checkOccurrences(listOf(7, 7, 7, 7, 7, 7, 7), 7, 7)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570291000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Lists (#1)&lt;/h2&gt;&lt;p&gt;Write a function that decides whether two strings are anagrams or not. An&#10;anagram is a word formed by rearranging the letters of a different word, using&#10;all the original letters exactly once.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Lists+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399642" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Compare two sorted lists of characters obtained from two strings.&#10;If the lists are equal, the words are anagrams.&#10;For example, for two anagrams &quot;terrain&quot; and &quot;trainer&quot;&#10;the sorted character list will be `[a, e, i, n, r, r, t]`.&#10;Convert a string to a list by calling `toList()`." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="95" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="95" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="return s1.toList().sorted() == s2.toList().sorted()" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package lists3&#10;&#10;import atomictest.eq&#10;&#10;fun checkAnagrams(s1: String, s2: String): Boolean {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    checkAnagrams(&quot;thing&quot;, &quot;night&quot;) eq true&#10;    checkAnagrams(&quot;leader&quot;, &quot;dealer&quot;) eq true&#10;    checkAnagrams(&quot;sector&quot;, &quot;escort&quot;) eq true&#10;    checkAnagrams(&quot;tablet&quot;, &quot;battle&quot;) eq true&#10;    checkAnagrams(&quot;friend&quot;, &quot;finder&quot;) eq true&#10;    checkAnagrams(&quot;senator&quot;, &quot;treason&quot;) eq true&#10;    checkAnagrams(&quot;terrain&quot;, &quot;trainer&quot;) eq true&#10;    checkAnagrams(&quot;teaching&quot;, &quot;cheating&quot;) eq true&#10;&#10;    checkAnagrams(&quot;pots&quot;, &quot;stops&quot;) eq false&#10;    checkAnagrams(&quot;escort&quot;, &quot;sectors&quot;) eq false&#10;    checkAnagrams(&quot;sections&quot;, &quot;notices&quot;) eq false&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package lists3&#10;&#10;import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class TestAnagrams {&#10;    fun testAnagrams(word: String, anagram: String) =&#10;            Assert.assertTrue(&quot;'$word' and '$anagram' should be anagrams&quot;, checkAnagrams(word, anagram))&#10;&#10;    fun testNotAnagrams(word: String, other: String) =&#10;            Assert.assertFalse(&quot;'$word' and '$other' should not be anagrams&quot;, checkAnagrams(word, other))&#10;&#10;    @Test&#10;    fun testAnagrams1() = testAnagrams(&quot;thing&quot;, &quot;night&quot;)&#10;&#10;    @Test&#10;    fun testAnagrams2() = testAnagrams(&quot;leader&quot;, &quot;dealer&quot;)&#10;&#10;    @Test&#10;    fun testAnagrams3() = testAnagrams(&quot;sector&quot;, &quot;escort&quot;)&#10;&#10;    @Test&#10;    fun testAnagrams4() = testAnagrams(&quot;tablet&quot;, &quot;battle&quot;)&#10;&#10;    @Test&#10;    fun testAnagrams5() = testAnagrams(&quot;friend&quot;, &quot;finder&quot;)&#10;&#10;    @Test&#10;    fun testAnagrams6() = testAnagrams(&quot;senator&quot;, &quot;treason&quot;)&#10;&#10;    @Test&#10;    fun testAnagrams7() = testAnagrams(&quot;terrain&quot;, &quot;trainer&quot;)&#10;&#10;    @Test&#10;    fun testAnagrams8() = testAnagrams(&quot;teaching&quot;, &quot;cheating&quot;)&#10;&#10;    @Test&#10;    fun testNotAnagrams1() = testNotAnagrams(&quot;pots&quot;, &quot;stops&quot;)&#10;&#10;    @Test&#10;    fun testNotAnagrams2() = testNotAnagrams(&quot;escort&quot;, &quot;sectors&quot;)&#10;&#10;    @Test&#10;    fun testNotAnagrams3() = testNotAnagrams(&quot;sections&quot;, &quot;notices&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570291000" />
                          </EduTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: Quick Documentation on a Variable&lt;/h2&gt;&lt;p&gt;You can press &lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:QuickJavaDoc;&lt;/span&gt;&#10;or run a &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Quick Documentation&lt;/code&gt;&lt;/span&gt; action &#10;while having the caret on an identifier to check the type the compiler infers&#10;for this identifier.&lt;/p&gt;&lt;p&gt;Check the type of the &lt;code&gt;list&lt;/code&gt; identifier in the example.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Lists+%2F+Exercise4&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="5" />
                            <option name="name" value="Exercise 4" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399643" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package lists4&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val list = listOf(1, 4, &quot;abc&quot;)&#10;    println(list)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package lists4&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570292000" />
                          </IdeTask>
                        </list>
                      </option>
                      <option name="unitId" value="90576" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="116119" />
                      <option name="index" value="10" />
                      <option name="name" value="vararg Arguments" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570296000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;&lt;code&gt;vararg&lt;/code&gt; Arguments&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/104336/step/1&quot;&gt;Read &amp;quot;&lt;code&gt;vararg&lt;/code&gt; Arguments&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399644" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/ListOf.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ListOf.kt" />
                                      <option name="text" value="// Varargs/ListOf.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  listOf(1) eq &quot;[1]&quot;&#10;  listOf(&quot;a&quot;, &quot;b&quot;) eq &quot;[a, b]&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/SpreadOperator.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/SpreadOperator.kt" />
                                      <option name="text" value="// Varargs/SpreadOperator.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val array = intArrayOf(4, 5)&#10;  sum(1, 2, 3, *array, 6) eq 21  // [1]&#10;  // Won't compile:&#10;  // sum(1, 2, 3, array, 6)&#10;&#10;  val list = listOf(9, 10, 11)&#10;  sum(*list.toIntArray()) eq 30  // [2]&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/TwoFunctionsWithVarargs.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/TwoFunctionsWithVarargs.kt" />
                                      <option name="text" value="// Varargs/TwoFunctionsWithVarargs.kt&#10;&#10;fun first(vararg numbers: Int) {&#10;  for (i in numbers) {&#10;    print(&quot;[$i]&quot;)&#10;  }&#10;}&#10;&#10;fun second(vararg numbers: Int) =&#10;  first(*numbers)&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  second(7, 9, 32)&#10;}&#10;/* Output:&#10;[7][9][32]&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/VarargLikeList.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/VarargLikeList.kt" />
                                      <option name="text" value="// Varargs/VarargLikeList.kt&#10;&#10;fun checkOperations(vararg ints: Int) {&#10;  println(&quot;Size: ${ints.size}&quot;)&#10;  println(&quot;Sum: ${ints.sum()}&quot;)&#10;  println(&quot;Min: ${ints.min()}&quot;)&#10;  println(&quot;Max: ${ints.max()}&quot;)&#10;  println(&quot;Average: ${ints.average()}&quot;)&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  checkOperations(10, -3, 8, 1, 9)&#10;}&#10;/* Output:&#10;Size: 5&#10;Sum: 25&#10;Min: -3&#10;Max: 10&#10;Average: 5.0&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/VarargSum.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/VarargSum.kt" />
                                      <option name="text" value="// Varargs/VarargSum.kt&#10;import atomictest.eq&#10;&#10;fun sum(vararg numbers: Int): Int {&#10;  var total = 0&#10;  for (n in numbers)&#10;    total += n&#10;  return total&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  sum(13, 27, 44) eq 84&#10;  sum(1, 3, 5, 7, 9, 11) eq 36&#10;  sum() eq 0&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/VariableArgLists.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/VariableArgLists.kt" />
                                      <option name="text" value="// Varargs/VariableArgLists.kt&#10;&#10;fun v(s: String, vararg d: Double) {}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  v(&quot;abc&quot;, 1.0, 2.0, 3.0, 4.0)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570294000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;&lt;code&gt;vararg&lt;/code&gt; Arguments (#1)&lt;/h2&gt;&lt;p&gt;Implement the function &lt;code&gt;listOfChunks()&lt;/code&gt; that takes &lt;code&gt;vararg&lt;/code&gt; arguments  of&#10;&lt;code&gt;String&lt;/code&gt; type and creates a list of lists. All nested lists except the last one&#10;should have the same size specified as an argument.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+vararg+Arguments+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399645" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Use the library function `chunked()` on List." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="127" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="127" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="return elements.toList().chunked(size)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package varargArguments1&#10;&#10;import atomictest.eq&#10;&#10;fun listOfChunks(size: Int, vararg elements: String): List&lt;List&lt;String&gt;&gt; {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val chunks = listOfChunks(3, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;)&#10;    chunks eq listOf(listOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;), listOf(&quot;d&quot;, &quot;e&quot;, &quot;f&quot;), listOf(&quot;g&quot;))&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package varargArguments1&#10;&#10;import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class TestLisOfChunks {&#10;&#10;    private fun checkListOfChunks(size: Int, vararg elements: String) {&#10;        Assert.assertEquals(&quot;Incorrect result for size = $size, elements = ${elements.toList()}.&quot;,&#10;                elements.toList().chunked(size), listOfChunks(size, *elements))&#10;    }&#10;&#10;    @Test&#10;    fun testSameList() = checkListOfChunks(3, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;)&#10;&#10;    @Test&#10;    fun testSmallerList() = checkListOfChunks(3, &quot;a&quot;)&#10;&#10;    @Test&#10;    fun testFixedNumberOfElements() = checkListOfChunks(2, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;)&#10;&#10;    @Test&#10;    fun testExtraElements() = checkListOfChunks(2, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570294000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;&lt;code&gt;vararg&lt;/code&gt; Arguments (#2)&lt;/h2&gt;&lt;p&gt;The reverse operation for the &lt;code&gt;chunked()&lt;/code&gt; function used in the previous task is&#10;called &lt;code&gt;flatten()&lt;/code&gt;. This function is called on a list of lists and returns a&#10;single list of all elements from the nested lists. Implement &lt;code&gt;flatten()&lt;/code&gt;&#10;without using the &lt;code&gt;flatten()&lt;/code&gt; function from the standard library.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+vararg+Arguments+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399646" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="113" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="113" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="val result = mutableListOf&lt;String&gt;()&#10;    for (list in listOfLists) {&#10;        result.addAll(list)&#10;    }&#10;    return result" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package varargArguments2&#10;&#10;import atomictest.eq&#10;&#10;fun flatten(listOfLists: List&lt;List&lt;String&gt;&gt;): List&lt;String&gt; {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val listOfLists = listOf(listOf(&quot;a&quot;, &quot;b&quot;), listOf(&quot;c&quot;, &quot;d&quot;))&#10;    flatten(listOfLists) eq listOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package varargArguments2&#10;&#10;import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class TestFlatten {&#10;&#10;    private fun checkFlatten(vararg args: List&lt;String&gt;) {&#10;        val list = args.toList()&#10;        Assert.assertEquals(&quot;Incorrect result for $list.&quot;, list.flatten(), flatten(list))&#10;    }&#10;&#10;    @Test&#10;    fun testSameList() = checkFlatten(listOf(&quot;a&quot;, &quot;b&quot;), listOf(&quot;c&quot;))&#10;&#10;    @Test&#10;    fun testSmallerList() = checkFlatten(listOf(&quot;a&quot;))&#10;&#10;    @Test&#10;    fun testFixedNumberOfElements() = checkFlatten(listOf(&quot;a&quot;, &quot;b&quot;), listOf(&quot;c&quot;, &quot;d&quot;))&#10;&#10;    @Test&#10;    fun testExtraElements() = checkFlatten(listOf(&quot;a&quot;, &quot;b&quot;), listOf(&quot;c&quot;, &quot;d&quot;), listOf(&quot;e&quot;))&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570295000" />
                          </EduTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: Parameter Info&lt;/h2&gt;&lt;p&gt;Press &lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:ParameterInfo;&lt;/span&gt; &#10;or call the &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Parameter Info&lt;/code&gt;&lt;/span&gt; action to check &#10;parameter names and types for the corresponding arguments. This action is very&#10;convenient when you are typing the arguments and want to check which argument&#10;is expected at the current position.&lt;/p&gt;&lt;p&gt;Check parameters for the functions &lt;code&gt;listOf()&lt;/code&gt; and &lt;code&gt;subList()&lt;/code&gt; in the examples&#10;by using &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Parameter Info&lt;/code&gt;&lt;/span&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+vararg+Arguments+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399647" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package varargArguments3&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val list = listOf('a', 'b', 'c', 'd', 'e').subList(1, 3)&#10;    println(list)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package varargArguments3&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570296000" />
                          </IdeTask>
                        </list>
                      </option>
                      <option name="unitId" value="90577" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="116120" />
                      <option name="index" value="11" />
                      <option name="name" value="Sets" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570300000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Sets&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/104337/step/1&quot;&gt;Read &amp;quot;Sets&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399648" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/MutableSet.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/MutableSet.kt" />
                                      <option name="text" value="// Sets/MutableSet.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val mutableSet = mutableSetOf&lt;Int&gt;()&#10;  mutableSet += 42&#10;  mutableSet += 42&#10;  mutableSet eq setOf(42)&#10;  mutableSet -= 42&#10;  mutableSet eq setOf&lt;Int&gt;()&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/RemoveDuplicates.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/RemoveDuplicates.kt" />
                                      <option name="text" value="// Sets/RemoveDuplicates.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf(3, 3, 2, 1, 2)&#10;  list.toSet() eq setOf(1, 2, 3)&#10;  list.distinct() eq listOf(3, 2, 1)&#10;&#10;  &quot;abbcc&quot;.toSet() eq setOf('a', 'b', 'c')&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Sets.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Sets.kt" />
                                      <option name="text" value="// Sets/Sets.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val intSet = setOf(1, 1, 2, 3, 9, 9, 4)&#10;  // No duplicates:&#10;  intSet eq setOf(1, 2, 3, 4, 9)&#10;&#10;  // Element order is unimportant:&#10;  setOf(1, 2) eq setOf(2, 1)&#10;&#10;  // Set membership:&#10;  (9 in intSet) eq true&#10;  (99 in intSet) eq false&#10;&#10;  intSet.contains(9) eq true&#10;  intSet.contains(99) eq false&#10;&#10;  // Does this set contain another set?&#10;  intSet.containsAll(setOf(1, 9, 2)) eq true&#10;&#10;  // Set union:&#10;  intSet.union(setOf(3, 4, 5, 6)) eq&#10;    setOf(1, 2, 3, 4, 5, 6, 9)&#10;&#10;  // Set intersection:&#10;  intSet intersect setOf(0, 1, 2, 7, 8) eq&#10;    setOf(1, 2)&#10;&#10;  // Set difference:&#10;  intSet subtract setOf(0, 1, 9, 10) eq&#10;    setOf(2, 3, 4)&#10;  intSet - setOf(0, 1, 9, 10) eq&#10;    setOf(2, 3, 4)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570298000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Sets (#1)&lt;/h2&gt;&lt;p&gt;We declared several categories of products that can be bought in a grocery&#10;store. Implement functions calculating what percentage of your list is in each&#10;category, including an “other” category for products that don't match any&#10;category.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Sets+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399649" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="0" />
                                                <option name="offset" value="224" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="0" />
                                            <option name="offset" value="224" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="" />
                                            <option name="possibleAnswer" value="&#10;private fun getPercentage(productsCart: Set&lt;String&gt;, groceryCart: Set&lt;String&gt;) =&#10;        100.0 * (productsCart intersect groceryCart).size / groceryCart.size&#10;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="276" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="276" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="getPercentage(meats, groceryCart)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="2" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="336" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="336" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="getPercentage(fruits, groceryCart)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="3" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="398" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="398" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="getPercentage(vegetables, groceryCart)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="4" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="458" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="458" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="100.0 * (groceryCart - meats - fruits - vegetables).size / groceryCart.size" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package sets1&#10;&#10;import atomictest.eq&#10;&#10;val meats = setOf(&quot;beef&quot;, &quot;chicken&quot;)&#10;val fruits = setOf(&quot;apple&quot;, &quot;orange&quot;, &quot;banana&quot;, &quot;kiwi&quot;)&#10;val vegetables = setOf(&quot;beans&quot;, &quot;peas&quot;, &quot;carrots&quot;, &quot;sweet potatoes&quot;, &quot;asparagus&quot;, &quot;spinach&quot;)&#10;&#10;fun percentMeat(groceryCart: Set&lt;String&gt;): Double = TODO()&#10;fun percentFruit(groceryCart: Set&lt;String&gt;): Double = TODO()&#10;fun percentVeggies(groceryCart: Set&lt;String&gt;): Double = TODO()&#10;fun percentOther(groceryCart: Set&lt;String&gt;): Double = TODO()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val groceryCart = setOf(&quot;apple&quot;, &quot;pretzels&quot;, &quot;bread&quot;, &quot;orange&quot;, &quot;beef&quot;,&#10;            &quot;beans&quot;, &quot;asparagus&quot;, &quot;sweet potatoes&quot;, &quot;spinach&quot;, &quot;carrots&quot;)&#10;&#10;    percentMeat(groceryCart) eq 10.0&#10;    percentFruit(groceryCart) eq 20.0&#10;    percentVeggies(groceryCart) eq 50.0&#10;    percentOther(groceryCart) eq 20.0&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package sets1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestGroceryCart {&#10;    private fun checkPercentage(&#10;            percentage: Double,&#10;            groceryCart: Set&lt;String&gt;,&#10;            percentFunction: (Set&lt;String&gt;) -&gt; Double,&#10;            functionName: String&#10;    ) {&#10;        Assert.assertEquals(&quot;$functionName is wrong for $groceryCart&quot;, percentage, percentFunction(groceryCart), 0.000000001)&#10;    }&#10;&#10;    private fun checkMeatPercentage(percentage: Double, groceryCart: Set&lt;String&gt;) {&#10;        checkPercentage(percentage, groceryCart, ::percentMeat, &quot;percentMeat&quot;)&#10;    }&#10;&#10;    private fun checkFruitPercentage(percentage: Double, groceryCart: Set&lt;String&gt;) {&#10;        checkPercentage(percentage, groceryCart, ::percentFruit, &quot;percentFruit&quot;)&#10;    }&#10;&#10;    private fun checkVeggiesPercentage(percentage: Double, groceryCart: Set&lt;String&gt;) {&#10;        checkPercentage(percentage, groceryCart, ::percentVeggies, &quot;percentVeggies&quot;)&#10;    }&#10;&#10;    private fun checkOtherPercentage(percentage: Double, groceryCart: Set&lt;String&gt;) {&#10;        checkPercentage(percentage, groceryCart, ::percentOther, &quot;percentOther&quot;)&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() {&#10;        val groceryCart = setOf(&quot;apple&quot;, &quot;pretzels&quot;, &quot;bread&quot;, &quot;orange&quot;, &quot;beef&quot;,&#10;                &quot;beans&quot;, &quot;asparagus&quot;, &quot;sweet potatoes&quot;, &quot;spinach&quot;, &quot;carrots&quot;)&#10;&#10;        checkMeatPercentage(10.0, groceryCart)&#10;        checkFruitPercentage(20.0, groceryCart)&#10;        checkVeggiesPercentage(50.0, groceryCart)&#10;        checkOtherPercentage(20.0, groceryCart)&#10;    }&#10;&#10;    @Test&#10;    fun test2Trivial() {&#10;        val groceryCart = setOf(&quot;beef&quot;, &quot;apple&quot;, &quot;beans&quot;, &quot;vodka&quot;)&#10;&#10;        checkMeatPercentage(25.0, groceryCart)&#10;        checkFruitPercentage(25.0, groceryCart)&#10;        checkVeggiesPercentage(25.0, groceryCart)&#10;        checkOtherPercentage(25.0, groceryCart)&#10;    }&#10;&#10;    @Test&#10;    fun test3Another() {&#10;        val groceryCart = setOf(&quot;apple&quot;, &quot;orange&quot;, &quot;kiwi&quot;,&#10;                &quot;sweet potatoes&quot;, &quot;asparagus&quot;, &quot;spinach&quot;, &quot;buckwheat&quot;, &quot;condensed milk&quot;)&#10;        checkMeatPercentage(0.0, groceryCart)&#10;        checkFruitPercentage(37.5, groceryCart)&#10;        checkVeggiesPercentage(37.5, groceryCart)&#10;        checkOtherPercentage(25.0, groceryCart)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570298000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Sets (#2)&lt;/h2&gt;&lt;p&gt;Check whether a string has all unique characters.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Sets+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399650" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Convert a string to a set of characters to check whether&#10;the size of the resulting set has decreased." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="87" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="87" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="return s.toSet().size == s.length" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package sets2&#10;&#10;import atomictest.eq&#10;&#10;fun hasUniqueCharacters(s: String): Boolean {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    hasUniqueCharacters(&quot;abcd&quot;) eq true&#10;    hasUniqueCharacters(&quot;abcb&quot;) eq false&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package sets2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestUniqueCharacters {&#10;    private fun checkUniqueCharacters(s: String, isUnique: Boolean) {&#10;        val message = if (isUnique) {&#10;            &quot;This string $s has unique characters&quot;&#10;        }&#10;        else {&#10;            &quot;This string $s has not unique characters&quot;&#10;        }&#10;        Assert.assertEquals(message, isUnique, hasUniqueCharacters(s))&#10;    }&#10;&#10;    @Test&#10;    fun test1OneCharacter() = checkUniqueCharacters(&quot;a&quot;, true)&#10;&#10;    @Test&#10;    fun test2TwoCharacters() = checkUniqueCharacters(&quot;aa&quot;, false)&#10;&#10;    @Test&#10;    fun test3Sample() = checkUniqueCharacters(&quot;abcd&quot;, true)&#10;&#10;    @Test&#10;    fun test4Sample() = checkUniqueCharacters(&quot;abcb&quot;, false)&#10;&#10;    @Test&#10;    fun test5Alphabet() = checkUniqueCharacters(('a'..'z').joinToString(&quot;&quot;), true)&#10;&#10;    @Test&#10;    fun test6Comma() = checkUniqueCharacters(('a'..'c').joinToString(), false)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570299000" />
                          </EduTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: Duplicate / Delete Lines&lt;/h2&gt;&lt;p&gt;It's easy to duplicate or delete a line:&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Operation&lt;/th&gt;&lt;th&gt;Shortcut&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Duplicate Line or Block&lt;/td&gt;&lt;td&gt;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:EditorDuplicate;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Duplicate selected block or the line at the caret.&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;intellij-row-even&quot;&gt;&lt;td&gt;Delete Line at Caret&lt;/td&gt;&lt;td&gt;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:EditorDeleteLine;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Delete the line where the caret is currently located.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;Display the list contents twice by duplicating the line in one click. Try&#10;duplicating a block of code; for instance, the contents of the list: &#10;&lt;code&gt;1, 2, 3, 4&lt;/code&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Sets+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399651" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package sets3&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val list = listOf(1, 2, 3, 4)&#10;    println(list)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package sets3&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570300000" />
                          </IdeTask>
                        </list>
                      </option>
                      <option name="unitId" value="90578" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="116122" />
                      <option name="index" value="12" />
                      <option name="name" value="Maps" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570306000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Maps&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/104338/step/1&quot;&gt;Read &amp;quot;Maps&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399653" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/ContactMap.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ContactMap.kt" />
                                      <option name="text" value="// Maps/ContactMap.kt&#10;import atomictest.eq&#10;&#10;class Contact(&#10;  val name: String,&#10;  val number: String&#10;) {&#10;  override fun toString(): String {&#10;    return &quot;Contact('$name', '$number')&quot;&#10;  }&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val miffy = Contact(&quot;Miffy&quot;, &quot;1-234-567890&quot;)&#10;  val cleo = Contact(&quot;Cleo&quot;, &quot;098-765-4321&quot;)&#10;  val contacts = mapOf(&#10;    miffy.number to miffy,&#10;    cleo.number to cleo)&#10;  contacts[&quot;1-234-567890&quot;] eq miffy&#10;  contacts[&quot;1-111-111111&quot;] eq null&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/GetValue.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/GetValue.kt" />
                                      <option name="text" value="// Maps/GetValue.kt&#10;import atomictest.*&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val map = mapOf('a' to &quot;attempt&quot;)&#10;  map['b'] eq null&#10;  capture {&#10;    map.getValue('b')&#10;  } eq &quot;NoSuchElementException: &quot; +&#10;    &quot;Key b is missing in the map.&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Maps.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Maps.kt" />
                                      <option name="text" value="// Maps/Maps.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val constants = mapOf(&#10;    &quot;Pi&quot; to 3.141,&#10;    &quot;e&quot; to 2.718,&#10;    &quot;phi&quot; to 1.618)&#10;  constants eq&#10;    &quot;{Pi=3.141, e=2.718, phi=1.618}&quot;&#10;&#10;  // Look up a value from a key:&#10;  constants[&quot;e&quot;] eq 2.718              // [1]&#10;  constants.keys eq setOf(&quot;Pi&quot;, &quot;e&quot;, &quot;phi&quot;)&#10;  constants.values eq &quot;[3.141, 2.718, 1.618]&quot;&#10;&#10;  var s = &quot;&quot;&#10;  // Iterate through key-value pairs:&#10;  for (entry in constants)             // [2]&#10;    s += &quot;${entry.key}=${entry.value}, &quot;&#10;  s eq &quot;Pi=3.141, e=2.718, phi=1.618, &quot;&#10;&#10;  s = &quot;&quot;&#10;  // Unpack during iteration:&#10;  for ((key, value) in constants)      // [3]&#10;    s += &quot;$key=$value, &quot;&#10;  s eq &quot;Pi=3.141, e=2.718, phi=1.618, &quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/MutableMaps.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/MutableMaps.kt" />
                                      <option name="text" value="// Maps/MutableMaps.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val m =&#10;    mutableMapOf(5 to &quot;five&quot;, 6 to &quot;six&quot;)&#10;  m[5] eq &quot;five&quot;&#10;  m[5] = &quot;5ive&quot;&#10;  m[5] eq &quot;5ive&quot;&#10;  m += 4 to &quot;four&quot;&#10;  m eq mapOf(5 to &quot;5ive&quot;,&#10;    4 to &quot;four&quot;, 6 to &quot;six&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ReadOnlyMaps.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ReadOnlyMaps.kt" />
                                      <option name="text" value="// Maps/ReadOnlyMaps.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val m = mapOf(5 to &quot;five&quot;, 6 to &quot;six&quot;)&#10;  m[5] eq &quot;five&quot;&#10;  // m[5] = &quot;5ive&quot; // Fails&#10;  // m += (4 to &quot;four&quot;) // Fails&#10;  m + (4 to &quot;four&quot;) // Doesn't change m&#10;  m eq mapOf(5 to &quot;five&quot;, 6 to &quot;six&quot;)&#10;  val m2 = m + (4 to &quot;four&quot;)&#10;  m2 eq mapOf(&#10;    5 to &quot;five&quot;, 6 to &quot;six&quot;, 4 to &quot;four&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570302000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Maps (#1)&lt;/h2&gt;&lt;p&gt;Implement the &lt;code&gt;buildNumberToContactMap()&lt;/code&gt; function that takes a list of&#10;contacts as an argument and maps numbers to contacts. If any two contacts have&#10;the same number the last contact should be added to the map.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Maps+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399654" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="267" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="267" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="val map = mutableMapOf&lt;String, Contact&gt;()&#10;    for (contact in contactList) {&#10;        map[contact.number] = contact&#10;    }&#10;    return map" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package maps1&#10;&#10;import atomictest.eq&#10;&#10;class Contact(val name: String, val number: String) {&#10;    override fun toString(): String {&#10;        return &quot;Contact('$name', '$number')&quot;&#10;    }&#10;}&#10;&#10;fun buildNumberToContactMap(contactList: List&lt;Contact&gt;): Map&lt;String, Contact&gt; {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val contactList = listOf(Contact(&quot;Miffy&quot;, &quot;1-234-567890&quot;), Contact(&quot;Cleo&quot;, &quot;098-765-4321&quot;))&#10;    val contactsByNumber = buildNumberToContactMap(contactList)&#10;    contactsByNumber eq &quot;{1-234-567890=Contact('Miffy', '1-234-567890'), &quot; +&#10;            &quot;098-765-4321=Contact('Cleo', '098-765-4321')}&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package maps1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestContactMap {&#10;    private fun checkBuildingMap(contactList: List&lt;Contact&gt;) {&#10;        Assert.assertEquals(&quot;Incorrect result for $contactList:&quot;, contactList.associateBy { it.number }, buildNumberToContactMap(contactList))&#10;    }&#10;&#10;    @Test&#10;    fun testSample() = checkBuildingMap(listOf(Contact(&quot;Miffy&quot;, &quot;1-234-567890&quot;), Contact(&quot;Cleo&quot;, &quot;098-765-4321&quot;)))&#10;&#10;    @Test&#10;    fun testOneElement() = checkBuildingMap(listOf(Contact(&quot;A&quot;, &quot;1&quot;)))&#10;&#10;    @Test&#10;    fun testSameElements() = checkBuildingMap(listOf(Contact(&quot;A&quot;, &quot;1&quot;), Contact(&quot;B&quot;, &quot;1&quot;)))&#10;&#10;    @Test&#10;    fun testManyElements() = checkBuildingMap(listOf(&#10;            Contact(&quot;A&quot;, &quot;1&quot;), Contact(&quot;B&quot;, &quot;2&quot;), Contact(&quot;C&quot;, &quot;3&quot;), Contact(&quot;D&quot;, &quot;4&quot;),&#10;            Contact(&quot;E&quot;, &quot;5&quot;), Contact(&quot;F&quot;, &quot;6&quot;), Contact(&quot;G&quot;, &quot;7&quot;), Contact(&quot;H&quot;, &quot;8&quot;)))&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570303000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Maps (#2)&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;Cage&lt;/code&gt; class is designed to store hamsters. &lt;code&gt;Cage&lt;/code&gt; has a fixed size, so you&#10;can't put a hamster in there if it's already full. Implement&#10;&lt;code&gt;takeHamsterByName()&lt;/code&gt;. It should choose a hamster by a given name, return it&#10;and remove it from the list of hamsters. If the element isn't present in the&#10;list, throw a &lt;code&gt;NoSuchElementException&lt;/code&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Maps+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399656" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="545" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="545" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="for (hamster in hamsters) {&#10;            if (hamster.name == name) {&#10;                return hamster&#10;            }&#10;        }&#10;        throw NoSuchElementException(&quot;No hamster called $name&quot;)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package maps2&#10;&#10;import atomictest.capture&#10;import atomictest.eq&#10;&#10;class Hamster(val name: String) {&#10;    override fun toString(): String {&#10;        return &quot;Hamster('$name')&quot;&#10;    }&#10;}&#10;&#10;class Cage(private val maxCapacity: Int) {&#10;    private val hamsters =&#10;            mutableListOf&lt;Hamster&gt;()&#10;&#10;    fun put(hamster: Hamster): Boolean =&#10;            if (hamsters.size == maxCapacity)&#10;                false&#10;            else {&#10;                hamsters += hamster&#10;                true&#10;            }&#10;&#10;    fun takeHamsterByName(name: String): Hamster {&#10;        TODO()&#10;    }&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val cage = Cage(2)&#10;    cage.put(Hamster(&quot;Alice&quot;)) eq true&#10;    cage.takeHamsterByName(&quot;Alice&quot;) eq &quot;Hamster('Alice')&quot;&#10;    capture {&#10;        cage.takeHamsterByName(&quot;Bob&quot;)&#10;    } eq &quot;NoSuchElementException: &quot; +&#10;            &quot;No hamster called Bob&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package maps2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestTakingHamster {&#10;    @Test&#10;    fun test1SampleSuccess() {&#10;        val cage = Cage(2)&#10;        cage.put(Hamster(&quot;Alice&quot;))&#10;        Assert.assertEquals(&quot;'takeHamsterByName' should return a hamster with a given name&quot;,&#10;                &quot;Hamster('Alice')&quot;, cage.takeHamsterByName(&quot;Alice&quot;).toString())&#10;    }&#10;&#10;    @Test&#10;    fun test2SampleNoHamster() {&#10;        val cage = Cage(2)&#10;        cage.put(Hamster(&quot;Alice&quot;))&#10;        try {&#10;            cage.takeHamsterByName(&quot;Bob&quot;)&#10;        } catch (e: NoSuchElementException) {&#10;            Assert.assertEquals(&quot;Expected 'NoSuchElementException' when the cage doesn't contain a hamster with a given name:&quot;,&#10;                    e.javaClass.simpleName + (e.message?.let { &quot;: $it&quot; } ?: &quot;&quot;),&#10;                    &quot;NoSuchElementException: No hamster called Bob&quot;)&#10;        }&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570304000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Maps (#3)&lt;/h2&gt;&lt;p&gt;If you commonly select an element from a &lt;code&gt;List&lt;/code&gt; using a key, it makes sense to&#10;optimize it and use &lt;code&gt;Map&lt;/code&gt; to store the elements instead of a &lt;code&gt;List&lt;/code&gt;. At worst,&#10;finding the right element in the &lt;code&gt;List&lt;/code&gt; requires you to iterate over all the&#10;elements, while &lt;code&gt;Map&lt;/code&gt; does the same job in constant time.&lt;/p&gt;&lt;p&gt;Change the internal implementation of the &lt;code&gt;Cage&lt;/code&gt; class to store elements in a&#10;&lt;code&gt;Map&lt;/code&gt; rather than a &lt;code&gt;List&lt;/code&gt;. To get an element use the &lt;code&gt;getValue()&lt;/code&gt; member&#10;function, which throws a &lt;code&gt;NoSuchElementException&lt;/code&gt; if the key is missing.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Maps+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399657" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="289" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="289" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="mutableMapOf()" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="441" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="441" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="hamsters[hamster.name] = hamster" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="2" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="547" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="547" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="hamsters.getValue(name)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package maps3&#10;&#10;import atomictest.capture&#10;import atomictest.eq&#10;&#10;class Hamster(val name: String) {&#10;    override fun toString(): String {&#10;        return &quot;Hamster('$name')&quot;&#10;    }&#10;}&#10;&#10;class Cage(private val maxCapacity: Int) {&#10;    private val hamsters: MutableMap&lt;String, Hamster&gt; =&#10;            TODO()&#10;&#10;    fun put(hamster: Hamster): Boolean =&#10;            if (hamsters.size == maxCapacity)&#10;                false&#10;            else {&#10;                TODO()&#10;                true&#10;            }&#10;&#10;    fun takeHamsterByName(name: String): Hamster =&#10;            TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val cage = Cage(2)&#10;    cage.put(Hamster(&quot;Alice&quot;)) eq true&#10;    cage.takeHamsterByName(&quot;Alice&quot;) eq &quot;Hamster('Alice')&quot;&#10;    capture {&#10;        cage.takeHamsterByName(&quot;Bob&quot;)&#10;    } eq &quot;NoSuchElementException: &quot; +&#10;            &quot;Key Bob is missing in the map.&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package maps3&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestTakingHamster {&#10;    @Test&#10;    fun test1SampleSuccess() {&#10;        val cage = Cage(2)&#10;        cage.put(Hamster(&quot;Alice&quot;))&#10;        Assert.assertEquals(&quot;'takeHamsterByName' should return a hamster with a given name&quot;,&#10;                &quot;Hamster('Alice')&quot;, cage.takeHamsterByName(&quot;Alice&quot;).toString())&#10;    }&#10;&#10;    @Test&#10;    fun test2SampleNoHamster() {&#10;        val cage = Cage(2)&#10;        cage.put(Hamster(&quot;Alice&quot;))&#10;        try {&#10;            cage.takeHamsterByName(&quot;Bob&quot;)&#10;        } catch (e: NoSuchElementException) {&#10;            Assert.assertEquals(&quot;Expected 'NoSuchElementException' when the hamster is absent:&quot;,&#10;                    e.javaClass.simpleName + (e.message?.let { &quot;: $it&quot; } ?: &quot;&quot;),&#10;                    &quot;NoSuchElementException: Key Bob is missing in the map.&quot;)&#10;        }&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570305000" />
                          </EduTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: Column Selection Mode&lt;/h2&gt;&lt;p&gt;When you need to perform the same editing operation on each line among many,&#10;it's very convenient to use several carets.&lt;/p&gt;&lt;p&gt;Call the action &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Column Selection Mode&lt;/code&gt;&lt;/span&gt;&#10;or press &lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:EditorToggleColumnMode;&lt;/span&gt;. &#10;Alternatively, you can choose &#10;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Edit | Column Selection Mode&lt;/code&gt;&lt;/span&gt; in the application&#10;menu. Press the same shortcut to disable the mode.&lt;/p&gt;&lt;p&gt;Moving the caret one line up or down selecting the text (by pressing&#10;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:EditorUpWithSelection;&lt;/span&gt;&#10;or &lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:EditorDownWithSelection;&lt;/span&gt;) in&#10;the &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Column Selection Mode&lt;/code&gt;&lt;/span&gt; adds more carets.&lt;/p&gt;&lt;p&gt;Swap keys and values in a map (transforming it from &lt;code&gt;Map&amp;lt;Int, String&amp;gt;&lt;/code&gt; to &#10;&lt;code&gt;Map&amp;lt;String, Int&amp;gt;&lt;/code&gt;) working in&#10;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Column Selection Mode&lt;/code&gt;&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;Select the three lines specifying the map contents and switch to the &#10;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Column Selection Mode&lt;/code&gt;&lt;/span&gt;. &#10;Note that you now have several carets. &#10;Try to navigate to the beginning of a line, to the end of a line, or to the end&#10;of the word to see how these operations are applied to all the carets in all &#10;lines.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Maps+%2F+Exercise4&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="5" />
                            <option name="name" value="Exercise 4" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399658" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package maps4&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val map = mapOf(&#10;            1 to &quot;one&quot;,&#10;            2 to &quot;two&quot;,&#10;            3 to &quot;three&quot;)&#10;    println(map)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package maps4&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570306000" />
                          </IdeTask>
                        </list>
                      </option>
                      <option name="unitId" value="90581" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="116124" />
                      <option name="index" value="13" />
                      <option name="name" value="Property Accessors" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570310000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Property Accessors&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/104339/step/1&quot;&gt;Read &amp;quot;Property Accessors&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399659" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Counter.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Counter.kt" />
                                      <option name="text" value="// PropertyAccessors/Counter.kt&#10;package propertyaccessors&#10;import atomictest.eq&#10;&#10;class Counter {&#10;  var value: Int = 0&#10;    private set&#10;  fun inc() = value++&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val counter = Counter()&#10;  repeat(10) {&#10;    counter.inc()&#10;  }&#10;  counter.value eq 10&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Data.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Data.kt" />
                                      <option name="text" value="// PropertyAccessors/Data.kt&#10;package propertyaccessors&#10;import atomictest.eq&#10;&#10;class Data(var i: Int)&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val data = Data(10)&#10;  data.i eq 10 // Read the 'i' property&#10;  data.i = 20  // Write to the 'i' property&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Default.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Default.kt" />
                                      <option name="text" value="// PropertyAccessors/Default.kt&#10;&#10;class Default {&#10;  var i: Int = 0&#10;    get() {&#10;      println(&quot;get()&quot;)&#10;      return field         // [1]&#10;    }&#10;    set(value) {&#10;      println(&quot;set($value)&quot;)&#10;      field = value        // [2]&#10;    }&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val d = Default()&#10;  d.i = 2&#10;  println(d.i)&#10;}&#10;/* Output:&#10;set(2)&#10;get()&#10;2&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Hamsters.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Hamsters.kt" />
                                      <option name="text" value="// PropertyAccessors/Hamsters.kt&#10;package propertyaccessors&#10;import atomictest.eq&#10;&#10;class Hamster(val name: String)&#10;&#10;class Cage(private val maxCapacity: Int) {&#10;  private val hamsters =&#10;    mutableListOf&lt;Hamster&gt;()&#10;  val capacity: Int&#10;    get() = maxCapacity - hamsters.size&#10;  val full: Boolean&#10;    get() = hamsters.size == maxCapacity&#10;  fun put(hamster: Hamster): Boolean =&#10;    if (full)&#10;      false&#10;    else {&#10;      hamsters += hamster&#10;      true&#10;    }&#10;  fun takeHamster(): Hamster =&#10;    hamsters.removeAt(0)&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val cage = Cage(2)&#10;  cage.full eq false&#10;  cage.capacity eq 2&#10;  cage.put(Hamster(&quot;Alice&quot;)) eq true&#10;  cage.put(Hamster(&quot;Bob&quot;)) eq true&#10;  cage.full eq true&#10;  cage.capacity eq 0&#10;  cage.put(Hamster(&quot;Charlie&quot;)) eq false&#10;  cage.takeHamster()&#10;  cage.capacity eq 1&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Hamsters2.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Hamsters2.kt" />
                                      <option name="text" value="// PropertyAccessors/Hamsters2.kt&#10;package propertyaccessors&#10;&#10;class Cage2(private val maxCapacity: Int) {&#10;  private val hamsters =&#10;    mutableListOf&lt;Hamster&gt;()&#10;  fun capacity(): Int =&#10;    maxCapacity - hamsters.size&#10;  fun isFull(): Boolean =&#10;    hamsters.size == maxCapacity&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/LogChanges.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/LogChanges.kt" />
                                      <option name="text" value="// PropertyAccessors/LogChanges.kt&#10;import atomictest.eq&#10;&#10;class LogChanges {&#10;  var n: Int = 0&#10;    set(value) {&#10;      println(&quot;$field becomes $value&quot;)&#10;      field = value&#10;    }&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val lc = LogChanges()&#10;  lc.n eq 0&#10;  lc.n = 2&#10;  lc.n eq 2&#10;}&#10;/* Output:&#10;0&#10;0 becomes 2&#10;2&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570308000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Property Accessors (#1)&lt;/h2&gt;&lt;p&gt;Add the property &lt;code&gt;isEmpty&lt;/code&gt; to the &lt;code&gt;Cage&lt;/code&gt; class.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Property+Accessors+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399660" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="8" />
                                                <option name="offset" value="414" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="8" />
                                            <option name="offset" value="414" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="/*TODO*/" />
                                            <option name="possibleAnswer" value="val isEmpty: Boolean&#10;        get() = hamsters.isEmpty()" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package propertyAccessors1&#10;&#10;import atomictest.eq&#10;&#10;class Hamster(val name: String) {&#10;    override fun toString(): String {&#10;        return &quot;Hamster('$name')&quot;&#10;    }&#10;}&#10;&#10;class Cage(private val maxCapacity: Int) {&#10;    private val hamsters =&#10;            mutableListOf&lt;Hamster&gt;()&#10;&#10;    val capacity: Int&#10;        get() = maxCapacity - hamsters.size&#10;&#10;    val isFull: Boolean&#10;        get() = hamsters.size == maxCapacity&#10;&#10;    /*TODO*/&#10;&#10;    fun put(hamster: Hamster): Boolean =&#10;            if(isFull)&#10;                false&#10;            else {&#10;                hamsters += hamster&#10;                true&#10;            }&#10;&#10;    fun takeHamster(): Hamster =&#10;            hamsters.removeAt(0)&#10;}&#10;&#10;/*&#10;fun main(args: Array&lt;String&gt;) {&#10;    val cage = Cage(2)&#10;    cage.isEmpty eq true&#10;    cage.put(Hamster(&quot;Alice&quot;))&#10;    cage.isEmpty eq false&#10;}*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package propertyAccessors1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestEmptiness {&#10;    @Test&#10;    fun testSample() {&#10;        val cage = Cage(2)&#10;        Assert.assertTrue(&quot;'cage.isEmpty' should return 'true' for an empty cage&quot;, cage.isEmpty)&#10;        cage.put(Hamster(&quot;Alice&quot;))&#10;        Assert.assertFalse(&quot;'cage.isEmpty' should return 'false' for a non-empty cage&quot;, cage.isEmpty)&#10;    }&#10;&#10;    @Test&#10;    fun testTwoHamsters() {&#10;        val cage = Cage(3)&#10;        Assert.assertTrue(&quot;'cage.isEmpty' should return 'true' for an empty cage&quot;, cage.isEmpty)&#10;        cage.put(Hamster(&quot;Alice&quot;))&#10;        cage.put(Hamster(&quot;Bob&quot;))&#10;        Assert.assertFalse(&quot;'cage.isEmpty' should return 'false' for a non-empty cage&quot;, cage.isEmpty)&#10;    }&#10;&#10;    @Test&#10;    fun testRemoval() {&#10;        val cage = Cage(3)&#10;        Assert.assertTrue(&quot;'cage.isEmpty' should return 'true' for an empty cage&quot;, cage.isEmpty)&#10;        cage.put(Hamster(&quot;Alice&quot;))&#10;        cage.takeHamster()&#10;        Assert.assertTrue(&quot;'cage.isEmpty' should return 'true' for an empty cage&quot;, cage.isEmpty)&#10;    }&#10;}&#10;&#10;val Cage.isEmpty get() = false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570308000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Property Accessors (#2)&lt;/h2&gt;&lt;p&gt;Implement a strange property &lt;code&gt;accesses&lt;/code&gt; which counts how many times this&#10;property was accessed.  Note that it returns a new value each time.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Property+Accessors+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399661" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Introduce an auxiliary `private` property to store the value and&#10;increment this value in a getter of the `accesses` property on each access. The&#10;Kotlin style guide recommends naming such auxiliary property starting with an&#10;underscore: `_accesses`.&#10;" />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="0" />
                                                <option name="offset" value="66" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="0" />
                                            <option name="offset" value="66" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="" />
                                            <option name="possibleAnswer" value="    private var _accesses = 0&#10;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Introduce an auxiliary `private` property to store the value and&#10;increment this value in a getter of the `accesses` property on each access. The&#10;Kotlin style guide recommends naming such auxiliary property starting with an&#10;underscore: `_accesses`.&#10;" />
                                              </list>
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="105" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="105" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="++_accesses" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package propertyAccessors2&#10;&#10;import atomictest.eq&#10;&#10;class Strange {&#10;&#10;    val accesses: Int&#10;        get() = TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val strange = Strange()&#10;    strange.accesses eq 1&#10;    strange.accesses eq 2&#10;    strange.accesses eq 3&#10;&#10;    val strange2 = Strange()&#10;    repeat(10) {&#10;        strange2.accesses&#10;    }&#10;    strange2.accesses eq 11&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package propertyAccessors2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestNumberOfAccesses {&#10;    @Test&#10;    fun test1Sample() {&#10;        val strange = Strange()&#10;        Assert.assertEquals(&quot;'strange.accesses' should increment the value on each access&quot;,&#10;                listOf(1, 2, 3),&#10;                listOf(strange.accesses, strange.accesses, strange.accesses))&#10;    }&#10;&#10;    @Test&#10;    fun test2More() {&#10;        val strange = Strange()&#10;        Assert.assertEquals(&quot;'strange.accesses' should increment the value on each access&quot;,&#10;                listOf(1, 2, 3, 4, 5, 6),&#10;                listOf(strange.accesses, strange.accesses, strange.accesses,&#10;                        strange.accesses, strange.accesses, strange.accesses))&#10;    }&#10;&#10;    private fun checkRepeat(n: Int) {&#10;        val strange = Strange()&#10;        repeat(n) {&#10;            strange.accesses&#10;        }&#10;        Assert.assertEquals(&quot;Incorrect result after repeating 'strange.accesses' for $n times;&quot; +&#10;                &quot;Should be ${n + 1} on the next access: &quot;,&#10;                n + 1,&#10;                strange.accesses)&#10;    }&#10;&#10;    @Test&#10;    fun test3Repeat() = checkRepeat(10)&#10;&#10;    @Test&#10;    fun test4Repeat() = checkRepeat(100)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570309000" />
                          </EduTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: Converting between Property and Function&lt;/h2&gt;&lt;p&gt;You can convert a property to a function and back automatically. Put the caret&#10;on the property name, invoke the intention list and choose&#10;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Convert property to function&lt;/code&gt;&lt;/span&gt;. &#10;For the reverse conversion, choose the intention&#10;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Convert function to property&lt;/code&gt;&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;You can see the intention list by using the&#10;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:ShowIntentionActions;&lt;/span&gt; shortcut.&lt;/p&gt;&lt;p&gt;Convert the &lt;code&gt;capacity&lt;/code&gt; and &lt;code&gt;isFull&lt;/code&gt; properties to functions and back.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Property+Accessors+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399663" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package propertyAccessors3&#10;&#10;import atomictest.eq&#10;&#10;class Hamster(val name: String)&#10;&#10;class Cage(private val maxCapacity: Int) {&#10;    private val hamsters =&#10;            mutableListOf&lt;Hamster&gt;()&#10;&#10;    val capacity: Int&#10;        get() = maxCapacity - hamsters.size&#10;&#10;    val isFull: Boolean&#10;        get() = hamsters.size == maxCapacity&#10;&#10;    fun put(hamster: Hamster): Boolean =&#10;            if(isFull)&#10;                false&#10;            else {&#10;                hamsters += hamster&#10;                true&#10;            }&#10;&#10;    fun takeHamster(): Hamster =&#10;            hamsters.removeAt(0)&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val cage = Cage(maxCapacity = 2)&#10;    cage.isFull eq false&#10;    cage.capacity eq 2&#10;    cage.put(Hamster(&quot;Alice&quot;)) eq true&#10;    cage.put(Hamster(&quot;Bob&quot;)) eq true&#10;    cage.isFull eq true&#10;    cage.capacity eq 0&#10;    cage.put(Hamster(&quot;Charlie&quot;)) eq false&#10;    cage.takeHamster()&#10;    cage.capacity eq 1&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package propertyAccessors3&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570310000" />
                          </IdeTask>
                        </list>
                      </option>
                      <option name="unitId" value="90583" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="116126" />
                      <option name="index" value="14" />
                      <option name="name" value="Summary 2" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570314000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Summary 2&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/104340/step/1&quot;&gt;Read &amp;quot;Summary 2&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399664" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/ALibrary.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ALibrary.kt" />
                                      <option name="text" value="// Summary2/ALibrary.kt&#10;package com.yoururl.libraryname&#10;&#10;// Components to reuse ...&#10;fun f() = &quot;result&quot;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ASCIIMap.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ASCIIMap.kt" />
                                      <option name="text" value="// Summary2/ASCIIMap.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val ascii = mapOf(&#10;    &quot;A&quot; to 65,&#10;    &quot;B&quot; to 66,&#10;    &quot;C&quot; to 67,&#10;    &quot;D&quot; to 68,&#10;    &quot;I&quot; to 73,&#10;    &quot;J&quot; to 74,&#10;    &quot;K&quot; to 75&#10;  )&#10;  println(ascii)&#10;  println(ascii[&quot;B&quot;])                 // [1]&#10;  println(ascii.keys)&#10;  println(ascii.values)&#10;  for (entry in ascii)                // [2]&#10;    print(&quot;${entry.key}:${entry.value},&quot;)&#10;  println()&#10;  for ((key, value) in ascii)         // [3]&#10;    print(&quot;$key:$value,&quot;)&#10;  println()&#10;  val mutable = ascii.toMutableMap()  // [4]&#10;  mutable.remove(&quot;I&quot;)&#10;  println(mutable)&#10;  mutable.put(&quot;Z&quot;, 90)&#10;  println(mutable)&#10;  mutable.clear()&#10;  mutable[&quot;A&quot;] = 100&#10;  println(mutable)&#10;}&#10;/* Output:&#10;{A=65, B=66, C=67, D=68, I=73, J=74, K=75}&#10;66&#10;[A, B, C, D, I, J, K]&#10;[65, 66, 67, 68, 73, 74, 75]&#10;A:65,B:66,C:67,D:68,I:73,J:74,K:75,&#10;A:65,B:66,C:67,D:68,I:73,J:74,K:75,&#10;{A=65, B=66, C=67, D=68, J=74, K=75}&#10;{A=65, B=66, C=67, D=68, J=74, K=75, Z=90}&#10;{A=100}&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ArraySpread.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ArraySpread.kt" />
                                      <option name="text" value="// Summary2/ArraySpread.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val array = intArrayOf(4, 5)&#10;  varargs(&quot;x&quot;, 1, 2, 3, *array, 6)  // [1]&#10;  val list = listOf(9, 10, 11)&#10;  varargs(&#10;    &quot;y&quot;, 7, 8, *list.toIntArray())  // [2]&#10;}&#10;/* Output:&#10;1 2 3 4 5 6 x&#10;7 8 9 10 11 y&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/AtomicTestCapture.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/AtomicTestCapture.kt" />
                                      <option name="text" value="// Summary2/AtomicTestCapture.kt&#10;import atomictest.*&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  capture {&#10;    &quot;$1.9&quot;.toDouble()&#10;  } eq &quot;NumberFormatException: &quot; +&#10;    &quot;&quot;&quot;For input string: &quot;$1.9&quot;&quot;&quot;&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Boxes.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Boxes.kt" />
                                      <option name="text" value="// Summary2/Boxes.kt&#10;&#10;private var count = 0                   // [1]&#10;&#10;private class Box(val dimension: Int) { // [2]&#10;  fun volume() =&#10;    dimension * dimension * dimension&#10;  override fun toString() =&#10;    &quot;Box volume: ${volume()}&quot;&#10;}&#10;&#10;private fun countBox(box: Box) {        // [3]&#10;  println(&quot;$box&quot;)&#10;  count++&#10;}&#10;&#10;fun countBoxes() {&#10;  countBox(Box(4))&#10;  countBox(Box(5))&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  countBoxes()&#10;  println(&quot;$count boxes&quot;)&#10;}&#10;/* Output:&#10;Box volume: 64&#10;Box volume: 125&#10;2 boxes&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ClassBodies.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ClassBodies.kt" />
                                      <option name="text" value="// Summary2/ClassBodies.kt&#10;&#10;class NoBody&#10;&#10;class SomeBody {&#10;  val name = &quot;Janet Doe&quot;&#10;}&#10;&#10;class EveryBody {&#10;  val all = listOf(SomeBody(),&#10;    SomeBody(), SomeBody())&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val nb = NoBody()&#10;  val sb = SomeBody()&#10;  val eb = EveryBody()&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ColorSet.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ColorSet.kt" />
                                      <option name="text" value="// Summary2/ColorSet.kt&#10;import atomictest.eq&#10;&#10;val colors =&#10;  &quot;Yellow Green Green Blue&quot;&#10;    .split(Regex(&quot;&quot;&quot;\W+&quot;&quot;&quot;)).sorted()  // [1]&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  colors eq&#10;    listOf(&quot;Blue&quot;, &quot;Green&quot;, &quot;Green&quot;, &quot;Yellow&quot;)&#10;&#10;  val colorSet = colors.toSet()        // [2]&#10;  colorSet eq&#10;    setOf(&quot;Yellow&quot;, &quot;Green&quot;, &quot;Blue&quot;)&#10;&#10;  (colorSet + colorSet) eq colorSet    // [3]&#10;&#10;  val mSet = colorSet.toMutableSet()   // [4]&#10;  mSet -= &quot;Blue&quot;&#10;  mSet += &quot;Red&quot;                        // [5]&#10;  mSet eq&#10;    setOf(&quot;Yellow&quot;, &quot;Green&quot;, &quot;Red&quot;)&#10;&#10;  // Set membership:&#10;  (&quot;Green&quot; in colorSet) eq true        // [6]&#10;  colorSet.contains(&quot;Red&quot;) eq false&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ExplicitTyping.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ExplicitTyping.kt" />
                                      <option name="text" value="// Summary2/ExplicitTyping.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val numbers: List&lt;Int&gt; = listOf(1, 2, 3)&#10;  val strings: List&lt;String&gt; =&#10;    listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;)&#10;  numbers eq &quot;[1, 2, 3]&quot;&#10;  strings eq &quot;[one, two, three]&quot;&#10;  toCharList(&quot;seven&quot;) eq &quot;[s, e, v, e, n]&quot;&#10;}&#10;&#10;fun toCharList(s: String): List&lt;Char&gt; =&#10;  s.toList()" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/GettersAndSetter.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/GettersAndSetter.kt" />
                                      <option name="text" value="// Summary2/GettersAndSetter.kt&#10;package summary2&#10;&#10;class GettersAndSetter {&#10;  var i: Int = 0&#10;    get() {&#10;      println(&quot;get()&quot;)&#10;      return field&#10;    }&#10;    set(value) {&#10;      println(&quot;set($value)&quot;)&#10;      field = value&#10;    }&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val gs = GettersAndSetter()&#10;  gs.i = 2&#10;  println(gs.i)&#10;}&#10;/* Output:&#10;set(2)&#10;get()&#10;2&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/JetPack.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/JetPack.kt" />
                                      <option name="text" value="// Summary2/JetPack.kt&#10;&#10;class JetPack(&#10;  private var fuel: Double     // [1]&#10;) {&#10;  private var warning = false&#10;  private fun burn() =         // [2]&#10;    if (fuel - 1 &lt;= 0) {&#10;      fuel = 0.0&#10;      warning = true&#10;    } else&#10;      fuel -= 1&#10;  public fun fly() = burn()    // [3]&#10;  fun check() =                // [4]&#10;    if (warning)               // [5]&#10;      &quot;Warning&quot;&#10;    else&#10;      &quot;OK&quot;&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val jetPack = JetPack(3.0)&#10;  while(jetPack.check() != &quot;Warning&quot;) {&#10;    println(jetPack.check())&#10;    jetPack.fly()&#10;  }&#10;  println(jetPack.check())&#10;}&#10;/* Output:&#10;OK&#10;OK&#10;OK&#10;Warning&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ListCollection.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ListCollection.kt" />
                                      <option name="text" value="// Summary2/ListCollection.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val lst = listOf(19.2, 88.3, 22.1)&#10;  lst[1] eq 88.3  // Indexing&#10;  lst.reversed() eq listOf(22.1, 88.3, 19.2)&#10;  lst.sorted() eq listOf(19.2, 22.1, 88.3)&#10;  lst.max() eq 88.3&#10;  lst.min() eq 19.2&#10;  lst.sum() eq 129.6&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ListOfStrings.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ListOfStrings.kt" />
                                      <option name="text" value="// Summary2/ListOfStrings.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val jabber = &quot;&quot;&quot;&#10;    Twas brillig, and the slithy toves&#10;      Did gyre and gimble in the wabe:&#10;    All mimsy were the borogoves,&#10;      And the mome raths outgrabe.&#10;  &quot;&quot;&quot;.trim().split(Regex(&quot;\\W+&quot;))&#10;&#10;  println(jabber.take(5))&#10;  println(jabber.slice(6..12))&#10;  println(jabber.slice(6..18 step 2))&#10;  println(jabber.sorted().takeLast(5))&#10;  println(&#10;    jabber.sorted().distinct().takeLast(5))&#10;}&#10;/* Output:&#10;[Twas, brillig, and, the, slithy]&#10;[Did, gyre, and, gimble, in, the, wabe]&#10;[Did, and, in, wabe, mimsy, the, And]&#10;[the, the, toves, wabe, were]&#10;[slithy, the, toves, wabe, were]&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/MultipleListReferences.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/MultipleListReferences.kt" />
                                      <option name="text" value="// Summary2/MultipleListReferences.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val first = mutableListOf(1)&#10;  val second: List&lt;Int&gt; = first&#10;  second eq listOf(1)&#10;&#10;  first += 2&#10;  // second sees the change:&#10;  second eq listOf(1, 2)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/MustableVsReadonlyList.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/MustableVsReadonlyList.kt" />
                                      <option name="text" value="// Summary2/MustableVsReadonlyList.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val ints = listOf(5, 13, 9)&#10;  // ints.add(11) // 'add()' not available&#10;  for (i in ints)&#10;    if(i &gt; 10)&#10;      println(i)&#10;&#10;  val chars = mutableListOf('a', 'b', 'c')&#10;  chars.add('d') // 'add()' available&#10;  chars += 'e'&#10;  println(chars)&#10;}&#10;/* Output:&#10;13&#10;[a, b, c, d, e]&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/PropertyReadWrite.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/PropertyReadWrite.kt" />
                                      <option name="text" value="// Summary2/PropertyReadWrite.kt&#10;package summary2&#10;import atomictest.eq&#10;&#10;class Holder(var i: Int)&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val holder = Holder(10)&#10;  holder.i eq 10 // Read the 'i' property&#10;  holder.i = 20  // Write to the 'i' property&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Quadratic.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Quadratic.kt" />
                                      <option name="text" value="// Summary2/Quadratic.kt&#10;import kotlin.math.sqrt&#10;import atomictest.*&#10;&#10;class Roots(&#10;  val root1: Double,&#10;  val root2: Double&#10;)&#10;&#10;fun quadraticZeroes(&#10;  a: Double,&#10;  b: Double,&#10;  c: Double&#10;): Roots {&#10;  if (a == 0.0)&#10;    throw IllegalArgumentException(&#10;      &quot;a is zero&quot;)&#10;  val underRadical = b * b - 4 * a * c&#10;  if (underRadical &lt; 0)&#10;    throw IllegalArgumentException(&#10;      &quot;underRadical is negative&quot;)&#10;  val squareRoot = sqrt(underRadical)&#10;  val root1 = (-b - squareRoot) / 2 * a&#10;  val root2 = (-b + squareRoot) / 2 * a&#10;  return Roots(root1, root2)&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  capture {&#10;    quadraticZeroes(0.0, 4.0, 5.0)&#10;  } eq &quot;IllegalArgumentException: &quot; +&#10;    &quot;a is zero&quot;&#10;  capture {&#10;    quadraticZeroes(3.0, 4.0, 5.0)&#10;  } eq &quot;IllegalArgumentException: &quot; +&#10;    &quot;underRadical is negative&quot;&#10;  val roots = quadraticZeroes(3.0, 8.0, 5.0)&#10;  roots.root1 eq -15.0&#10;  roots.root2 eq -9.0&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Temperature.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Temperature.kt" />
                                      <option name="text" value="// Summary2/Temperature.kt&#10;import atomictest.eq&#10;&#10;class Temperature {&#10;  var current = 0.0&#10;  var scale = &quot;f&quot;&#10;  fun setFahrenheit(now: Double) {&#10;    current = now&#10;    scale = &quot;f&quot;&#10;  }&#10;  fun setCelsius(now: Double) {&#10;    current = now&#10;    scale = &quot;c&quot;&#10;  }&#10;  fun getFahrenheit(): Double =&#10;    if (scale == &quot;f&quot;)&#10;      current&#10;    else&#10;      current * 9.0 / 5.0 + 32.0&#10;  fun getCelsius(): Double =&#10;    if (scale == &quot;c&quot;)&#10;      current&#10;    else&#10;      (current - 32.0) * 5.0 / 9.0&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val temp = Temperature()     // [1]&#10;  temp.setFahrenheit(98.6)&#10;  temp.getFahrenheit() eq 98.6&#10;  temp.getCelsius() eq 37.0&#10;  temp.setCelsius(100.0)&#10;  temp.getFahrenheit() eq 212.0&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/TicTacToe.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/TicTacToe.kt" />
                                      <option name="text" value="// Summary2/TicTacToe.kt&#10;import atomictest.eq&#10;&#10;class Cell {&#10;  var entry = ' '                   // [1]&#10;  fun setValue(e: Char): String =   // [2]&#10;    if (entry == ' ' &amp;&amp;&#10;      (e == 'X' || e == 'O')) {&#10;      entry = e&#10;      &quot;successful move&quot;&#10;    } else&#10;      &quot;invalid move&quot;&#10;}&#10;&#10;class Grid {&#10;  val cells = listOf(&#10;    listOf(Cell(), Cell(), Cell()),&#10;    listOf(Cell(), Cell(), Cell()),&#10;    listOf(Cell(), Cell(), Cell())&#10;  )&#10;  fun play(e: Char, x: Int, y: Int): String =&#10;    if (x !in 0..2 || y !in 0..2)&#10;      &quot;invalid move&quot;&#10;    else&#10;      cells[x][y].setValue(e)       // [3]&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val grid = Grid()&#10;  grid.play('X', 1, 1) eq &quot;successful move&quot;&#10;  grid.play('X', 1, 1) eq &quot;invalid move&quot;&#10;  grid.play('O', 1, 3) eq &quot;invalid move&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ToDoubleException.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ToDoubleException.kt" />
                                      <option name="text" value="// Summary2/ToDoubleException.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  // val i = &quot;$1.9&quot;.toDouble()&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/UseALibrary.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/UseALibrary.kt" />
                                      <option name="text" value="// Summary2/UseALibrary.kt&#10;import com.yoururl.libraryname.*&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val x = f()&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/UsingAtomicTest.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/UsingAtomicTest.kt" />
                                      <option name="text" value="// Summary2/UsingAtomicTest.kt&#10;import atomictest.*&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val pi = 3.14&#10;  val pie = &quot;A round dessert&quot;&#10;  pi eq 3.14&#10;  pie eq &quot;A round dessert&quot;&#10;  pi neq pie&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/VarArgs.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/VarArgs.kt" />
                                      <option name="text" value="// Summary2/VarArgs.kt&#10;&#10;fun varargs(s: String, vararg ints: Int) {&#10;  for(i in ints)&#10;    print(&quot;$i &quot;)&#10;  println(s)&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  varargs(&quot;primes&quot;, 5, 7, 11, 13, 17, 19, 23)&#10;}&#10;/* Output:&#10;5 7 11 13 17 19 23 primes&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/WildAnimals.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/WildAnimals.kt" />
                                      <option name="text" value="// Summary2/WildAnimals.kt&#10;import atomictest.eq&#10;&#10;class Badger(id: String, years: Int) {&#10;  val name = id&#10;  val age = years&#10;  override fun toString(): String {&#10;    return &quot;Badger: $name, age: $age&quot;&#10;  }&#10;}&#10;&#10;class Snake(&#10;  var type: String,&#10;  var length: Double&#10;) {&#10;  override fun toString(): String {&#10;    return &quot;Snake: $type, length: $length&quot;&#10;  }&#10;}&#10;&#10;class Moose(&#10;  val age: Int,&#10;  val height: Double&#10;) {&#10;  override fun toString(): String {&#10;    return &quot;Moose, age: $age, height: $height&quot;&#10;  }&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  Badger(&quot;Bob&quot;, 11) eq &quot;Badger: Bob, age: 11&quot;&#10;  Snake(&quot;Garden&quot;, 2.4) eq&#10;    &quot;Snake: Garden, length: 2.4&quot;&#10;  Moose(16, 7.2) eq&#10;    &quot;Moose, age: 16, height: 7.2&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570312000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Summary 2 (#1)&lt;/h2&gt;&lt;p&gt;Convert a natural number into a number in the Roman numeral system.&lt;/p&gt;&lt;p&gt;Roman numerals:&#10;1000 = M, 900 = CM, 500 = D, 400 = CD, 100 = C, 90 = XC,&#10;50 = L, 40 = XL, 10 = X, 9 = IX, 5 = V, 4 = IV, 1 = I.&lt;/p&gt;&lt;p&gt;For instance: 23 = XXIII, 44 = XLIV, 100 = C.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Summary+2+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399665" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Perform the conversion in steps. Introduce the auxiliary `remainder`&#10;variable to store the remaining part of the converted integer number and the&#10;`result` variable to store the resulting representation. For each step, the&#10;initial `number` equals the sum of the `remainder` and `result`, where `result`&#10;is a number in a Roman numeral system.&#10;&#10;Store the roman numerals in a mapping from the integer to its String representation.&#10;For each pair `int = roman` starting from `1000 = M`:&#10;- Divide `remainder` into `int` to discover how many times you need to repeat `roman` in the `result`.&#10;- Subtract the result from `remainder` to update it: `remainder -= remainder / int`." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="86" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="86" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="mapOf(&#10;        1000 to &quot;M&quot;,&#10;        900 to &quot;CM&quot;,&#10;        500 to &quot;D&quot;,&#10;        400 to &quot;CD&quot;,&#10;        100 to &quot;C&quot;,&#10;        90 to &quot;XC&quot;,&#10;        50 to &quot;L&quot;,&#10;        40 to &quot;XL&quot;,&#10;        10 to &quot;X&quot;,&#10;        9 to &quot;IX&quot;,&#10;        5 to &quot;V&quot;,&#10;        4 to &quot;IV&quot;,&#10;        1 to &quot;I&quot;)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Perform the conversion in steps. Introduce the auxiliary `remainder`&#10;variable to store the remaining part of the converted integer number and the&#10;`result` variable to store the resulting representation. For each step, the&#10;initial `number` equals the sum of the `remainder` and `result`, where `result`&#10;is a number in a Roman numeral system.&#10;&#10;Store the roman numerals in a mapping from the integer to its String representation.&#10;For each pair `int = roman` starting from `1000 = M`:&#10;- Divide `remainder` into `int` to discover how many times you need to repeat `roman` in the `result`.&#10;- Subtract the result from `remainder` to update it: `remainder -= remainder / int`." />
                                              </list>
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="140" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="140" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="var result = &quot;&quot;&#10;    var remainder = number&#10;    for ((int, roman) in intToRomanNumeralMap) {&#10;        val times = remainder / int&#10;        result += roman.repeat(times)&#10;        remainder %= int&#10;    }&#10;    return result" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package summary21&#10;&#10;import atomictest.eq&#10;&#10;val intToRomanNumeralMap: Map&lt;Int, String&gt; = TODO()&#10;&#10;fun convertToRoman(number: Int): String {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    convertToRoman(23) eq &quot;XXIII&quot;&#10;    convertToRoman(44) eq &quot;XLIV&quot;&#10;    convertToRoman(100) eq &quot;C&quot;&#10;    convertToRoman(2018) eq &quot;MMXVIII&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package summary21&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestRomanNumerals {&#10;    private fun checkNumber(number: Int, roman: String) {&#10;        Assert.assertEquals(&quot;Wrong result for $number:&quot;, roman, convertToRoman(number))&#10;    }&#10;&#10;    @Test&#10;    fun test01Sample1() = checkNumber(23, &quot;XXIII&quot;)&#10;&#10;    @Test&#10;    fun test02Sample2() = checkNumber(44, &quot;XLIV&quot;)&#10;&#10;    @Test&#10;    fun test0Sample3() = checkNumber(100, &quot;C&quot;)&#10;&#10;    @Test&#10;    fun test04Sample4() = checkNumber(2018, &quot;MMXVIII&quot;)&#10;&#10;    @Test&#10;    fun test05VII() = checkNumber(7, &quot;VII&quot;)&#10;&#10;    @Test&#10;    fun test06XXXIX() = checkNumber(39, &quot;XXXIX&quot;)&#10;&#10;    @Test&#10;    fun test07DCLXXXIII() = checkNumber(683, &quot;DCLXXXIII&quot;)&#10;&#10;    @Test&#10;    fun test08MCMXCIX() = checkNumber(1999, &quot;MCMXCIX&quot;)&#10;&#10;    @Test&#10;    fun test09CDXCIV() = checkNumber(494, &quot;CDXCIV&quot;)&#10;&#10;    @Test&#10;    fun test10MDLV() = checkNumber(1555, &quot;MDLV&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570313000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Summary 2 (#1)&lt;/h2&gt;&lt;p&gt;Convert from a number in the Roman numeral system into a natural number.&lt;/p&gt;&lt;p&gt;For instance: XXIII = 23, XLIV = 44, C = 100.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Introduction+to+Objects+%2F+Summary+2+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="399666" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="You can simply iterate over each numeral in the Roman representation and&#10;calculate the answer! Traverse a Roman number in reverse order a single numeral&#10;at a time (for example, `IV` are two different numerals) and store the maximum&#10;numeral found so far. If the next Roman numeral is more or equal than the current&#10;maximum numeral, add it to the result; if it's less than a maximum, subtract it&#10;instead. For instance, to convert `XLIV = 44`, iterate over `VILX` which is the&#10;reverse of `XLIV`. You add `V`(`5`) and `L`(`50`), but subtract `1`(`I`) because&#10;it's less than the current maximum `V`, and subtract `10`(`X`) because it's less&#10;than the updated maximum `X`:&#10;&#10;| numeral | current maximum | action |&#10;| ------- |-----------------|--------|&#10;| V       | 5               | + 5    |&#10;| I       | 5               | - 1    |&#10;| L       | 50              | + 50   |&#10;| X       | 50              | - 10   |&#10;&#10;The result is `+ 5 - 1 + 50 - 10 = 44`" />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="86" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="86" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="mapOf(&#10;        &quot;M&quot; to 1000,&#10;        &quot;CM&quot; to 900,&#10;        &quot;D&quot; to 500,&#10;        &quot;CD&quot; to 400,&#10;        &quot;C&quot; to 100,&#10;        &quot;XC&quot; to 90,&#10;        &quot;L&quot; to 50,&#10;        &quot;XL&quot; to 40,&#10;        &quot;X&quot; to 10,&#10;        &quot;IX&quot; to 9,&#10;        &quot;V&quot; to 5,&#10;        &quot;IV&quot; to 4,&#10;        &quot;I&quot; to 1)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="You can simply iterate over each numeral in the Roman representation and&#10;calculate the answer! Traverse a Roman number in reverse order a single numeral&#10;at a time (for example, `IV` are two different numerals) and store the maximum&#10;numeral found so far. If the next Roman numeral is more or equal than the current&#10;maximum numeral, add it to the result; if it's less than a maximum, subtract it&#10;instead. For instance, to convert `XLIV = 44`, iterate over `VILX` which is the&#10;reverse of `XLIV`. You add `V`(`5`) and `L`(`50`), but subtract `1`(`I`) because&#10;it's less than the current maximum `V`, and subtract `10`(`X`) because it's less&#10;than the updated maximum `X`:&#10;&#10;| numeral | current maximum | action |&#10;| ------- |-----------------|--------|&#10;| V       | 5               | + 5    |&#10;| I       | 5               | - 1    |&#10;| L       | 50              | + 50   |&#10;| X       | 50              | - 10   |&#10;&#10;The result is `+ 5 - 1 + 50 - 10 = 44`" />
                                              </list>
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="141" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="141" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="var result = 0&#10;    var max = 0&#10;    for (romanNumeral in roman.reversed()) {&#10;        val int = romanNumeralToIntMap.getValue(&quot;$romanNumeral&quot;)&#10;        if (int &gt;= max) {&#10;            result += int&#10;            max = int&#10;        }&#10;        else {&#10;            result -= int&#10;        }&#10;    }&#10;    return result" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package summary22&#10;&#10;import atomictest.eq&#10;&#10;val romanNumeralToIntMap: Map&lt;String, Int&gt; = TODO()&#10;&#10;fun convertFromRoman(roman: String): Int {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    convertFromRoman(&quot;XXIII&quot;) eq 23&#10;    convertFromRoman(&quot;XLIV&quot;) eq 44&#10;    convertFromRoman(&quot;C&quot;) eq 100&#10;    convertFromRoman(&quot;MMXVIII&quot;) eq 2018&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package summary22&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestReverseConversion {&#10;    private fun checkNumber(number: Int, roman: String) {&#10;        Assert.assertEquals(&quot;Wrong result for $roman:&quot;, number, convertFromRoman(roman))&#10;    }&#10;&#10;    @Test&#10;    fun test01Sample1() = checkNumber(23, &quot;XXIII&quot;)&#10;&#10;    @Test&#10;    fun test02Sample2() = checkNumber(44, &quot;XLIV&quot;)&#10;&#10;    @Test&#10;    fun test0Sample3() = checkNumber(100, &quot;C&quot;)&#10;&#10;    @Test&#10;    fun test04Sample4() = checkNumber(2018, &quot;MMXVIII&quot;)&#10;&#10;    @Test&#10;    fun test05VII() = checkNumber(7, &quot;VII&quot;)&#10;&#10;    @Test&#10;    fun test06XXXIX() = checkNumber(39, &quot;XXXIX&quot;)&#10;&#10;    @Test&#10;    fun test07DCLXXXIII() = checkNumber(683, &quot;DCLXXXIII&quot;)&#10;&#10;    @Test&#10;    fun test08MCMXCIX() = checkNumber(1999, &quot;MCMXCIX&quot;)&#10;&#10;    @Test&#10;    fun test09CDXCIV() = checkNumber(494, &quot;CDXCIV&quot;)&#10;&#10;    @Test&#10;    fun test10MDLV() = checkNumber(1555, &quot;MDLV&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570314000" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="90584" />
                    </Lesson>
                  </list>
                </option>
              </Section>
              <Section>
                <option name="courseId" value="20403" />
                <option name="customPresentableName" />
                <option name="id" value="66741" />
                <option name="index" value="3" />
                <option name="name" value="Usability" />
                <option name="position" value="3" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1539005198000" />
                <option name="items">
                  <list>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="175296" />
                      <option name="index" value="1" />
                      <option name="name" value="break &amp; continue" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570963000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;&lt;code&gt;break&lt;/code&gt; &amp;amp; &lt;code&gt;continue&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/171439/step/1&quot;&gt;Read &amp;quot;&lt;code&gt;break&lt;/code&gt; &amp;amp; &lt;code&gt;continue&lt;/code&gt;&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497830" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/DoControl.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/DoControl.kt" />
                                      <option name="text" value="// BreakAndContinue/DoControl.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val nums = mutableListOf(0)&#10;  var i = 0&#10;  do {&#10;    i += 4&#10;    if (i == 8) continue&#10;    if (i == 40) break&#10;    nums.add(i)&#10;  } while(i &lt; 100)&#10;  nums eq&#10;  listOf(0,4,12,16,20,24,28,32,36)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/DoLabeled.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/DoLabeled.kt" />
                                      <option name="text" value="// BreakAndContinue/DoLabeled.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val nums = mutableListOf(0)&#10;  var i = 0&#10;  outer@ do {&#10;    i += 1&#10;    var j = 0&#10;    do {&#10;      j += 1&#10;      if (j == 3) continue@outer&#10;      if (i*j == 15) break@outer&#10;      nums.add(i*j)&#10;    } while(j &lt; 10)&#10;  } while(i &lt; 4)&#10;  nums eq&#10;  listOf(0, 1, 2, 2, 4, 3, 6, 4, 8)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ForControl.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ForControl.kt" />
                                      <option name="text" value="// BreakAndContinue/ForControl.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val nums = mutableListOf(0)&#10;  for(i in 4 until 100 step 4) { // [2]&#10;    if (i == 8) continue         // [1]&#10;    if (i == 40) break           // [3]&#10;    nums.add(i)&#10;  }                              // [4]&#10;  nums eq&#10;  listOf(0,4,12,16,20,24,28,32,36)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ForLabeled.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ForLabeled.kt" />
                                      <option name="text" value="// BreakAndContinue/ForLabeled.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val nums = mutableListOf(0)&#10;  outer@ for(i in 0..4) {&#10;    for(j in 1..10) {&#10;      if (j == 3) continue@outer&#10;      if (i*j == 15) break@outer&#10;      nums.add(i*j)&#10;    }&#10;  }&#10;  nums eq&#10;  listOf(0, 0, 0, 1, 2, 2, 4, 3, 6, 4, 8)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/WhileControl.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/WhileControl.kt" />
                                      <option name="text" value="// BreakAndContinue/WhileControl.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val nums = mutableListOf(0)&#10;  var i = 0&#10;  while(i &lt; 100) {&#10;    i += 4&#10;    if (i == 8) continue&#10;    if (i == 40) break&#10;    nums.add(i)&#10;  }&#10;  nums eq&#10;  listOf(0,4,12,16,20,24,28,32,36)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/WhileLabeled.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/WhileLabeled.kt" />
                                      <option name="text" value="// BreakAndContinue/WhileLabeled.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val nums = mutableListOf(0)&#10;  var i = 0&#10;  outer@ while(i &lt; 4) {&#10;    i += 1&#10;    var j = 0&#10;    while(j &lt; 10) {&#10;      j += 1&#10;      if (j == 3) continue@outer&#10;      if (i*j == 15) break@outer&#10;      nums.add(i*j)&#10;    }&#10;  }&#10;  nums eq&#10;  listOf(0, 1, 2, 2, 4, 3, 6, 4, 8)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570325000" />
                          </TheoryTask>
                        </list>
                      </option>
                      <option name="unitId" value="149982" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="175297" />
                      <option name="index" value="2" />
                      <option name="name" value="Extension Functions" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570966000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Extension Functions&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/107293/step/1&quot;&gt;Read &amp;quot;Extension Functions&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497831" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/BookExtensions.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/BookExtensions.kt" />
                                      <option name="text" value="// ExtensionFunctions/BookExtensions.kt&#10;import atomictest.eq&#10;&#10;class Book(val title: String)&#10;&#10;fun Book.categorize(category: String) =&#10;  &quot;&quot;&quot;title: &quot;$title&quot;, category: $category&quot;&quot;&quot;&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  Book(&quot;Dracula&quot;).categorize(&quot;Vampire&quot;) eq&#10;    &quot;&quot;&quot;title: &quot;Dracula&quot;, category: Vampire&quot;&quot;&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Quote.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Quote.kt" />
                                      <option name="text" value="// ExtensionFunctions/Quote.kt&#10;package other&#10;import atomictest.eq&#10;import quoting.doubleQuote&#10;import quoting.singleQuote&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  &quot;Single&quot;.singleQuote() eq &quot;'Single'&quot;&#10;  &quot;Double&quot;.doubleQuote() eq &quot;\&quot;Double\&quot;&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Quoting.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Quoting.kt" />
                                      <option name="text" value="// ExtensionFunctions/Quoting.kt&#10;package quoting&#10;import atomictest.eq&#10;&#10;fun String.singleQuote() = &quot;'$this'&quot;&#10;fun String.doubleQuote() = &quot;\&quot;$this\&quot;&quot;&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  &quot;Hi&quot;.singleQuote() eq &quot;'Hi'&quot;&#10;  &quot;Hi&quot;.doubleQuote() eq &quot;\&quot;Hi\&quot;&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/StrangeQuote.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/StrangeQuote.kt" />
                                      <option name="text" value="// ExtensionFunctions/StrangeQuote.kt&#10;import atomictest.eq&#10;import quoting.singleQuote&#10;import quoting.doubleQuote&#10;&#10;// Apply two sets of single quotes:&#10;fun String.strangeQuote() =&#10;  this.singleQuote().singleQuote()   // [1]&#10;&#10;fun String.tooManyQuotes() =&#10;  doubleQuote().doubleQuote()        // [2]&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  &quot;Hi&quot;.strangeQuote() eq &quot;''Hi''&quot;&#10;  &quot;Hi&quot;.tooManyQuotes() eq &quot;\&quot;\&quot;Hi\&quot;\&quot;&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570327000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Extension Functions (#1)&lt;/h2&gt;&lt;p&gt;Implement the &lt;code&gt;wrapInTag&lt;/code&gt; function that wraps a string in a specified xml tag.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Usability+%2F+Extension+Functions+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497832" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="99" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="99" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="&#10;        &quot;&lt;$tagName&gt;$this&lt;/$tagName&gt;&quot;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package extensionFunctions1&#10;&#10;import atomictest.eq&#10;&#10;fun String.wrapInTag(tagName: String): String = TODO()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    &quot;cat&quot;.wrapInTag(&quot;animal&quot;) eq &quot;&lt;animal&gt;cat&lt;/animal&gt;&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package extensionFunctions1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestWrappingInATag {&#10;    private fun checkWrapping(tagName: String, string: String) {&#10;        Assert.assertEquals(&quot;Wrong result for $tagName:&quot;,&#10;                &quot;&lt;$tagName&gt;$string&lt;/$tagName&gt;&quot;, string.wrapInTag(tagName))&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = checkWrapping(&quot;animal&quot;, &quot;cat&quot;)&#10;&#10;    @Test&#10;    fun test2() = checkWrapping(&quot;data&quot;, &quot;tag&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570328000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Extension Functions (#2)&lt;/h2&gt;&lt;p&gt;Implement &lt;code&gt;isOdd&lt;/code&gt; and &lt;code&gt;isEven&lt;/code&gt; functions as extensions on &lt;code&gt;Int&lt;/code&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Usability+%2F+Extension+Functions+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497833" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="78" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="78" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="this % 2 == 1" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="113" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="113" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="!isOdd()" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package extensionFunctions2&#10;&#10;import atomictest.eq&#10;&#10;fun Int.isOdd(): Boolean = TODO()&#10;fun Int.isEven(): Boolean = TODO()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    1.isOdd() eq true&#10;    2.isEven() eq true&#10;    13.isEven() eq false&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package extensionFunctions2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestOddEven {&#10;    private fun checkQuality(&#10;            number: Int,&#10;            message: String,&#10;            function: Function1&lt;Int, Boolean&gt;,&#10;            check: Boolean&#10;    ) {&#10;        Assert.assertEquals(&quot;$number should${if (check) &quot;&quot; else &quot;n't&quot;} be $message:&quot;, check, function(number))&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = checkQuality(1, &quot;odd&quot;, Int::isOdd, true)&#10;&#10;    @Test&#10;    fun test2Sample() = checkQuality(2, &quot;even&quot;, Int::isEven, true)&#10;&#10;    @Test&#10;    fun test3Sample() = checkQuality(13, &quot;even&quot;, Int::isEven, false)&#10;&#10;    @Test&#10;    fun test4() = checkQuality(14, &quot;odd&quot;, Int::isOdd, false)&#10;&#10;    @Test&#10;    fun test5() = checkQuality(12897, &quot;even&quot;, Int::isEven, false)&#10;&#10;    @Test&#10;    fun test6() = checkQuality(12897, &quot;odd&quot;, Int::isOdd, true)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570329000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Extension Functions (#3)&lt;/h2&gt;&lt;p&gt;Implement the &lt;code&gt;coversZero&lt;/code&gt; function as an extension on the &lt;code&gt;Rectangle&lt;/code&gt; type.&#10;It checks whether a rectangle covers the point &lt;code&gt;(0, 0)&lt;/code&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Usability+%2F+Extension+Functions+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497834" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="313" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="313" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="0 in x..(x + width) &amp;&amp; 0 in y..(y + height)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package extensionFunctions3&#10;&#10;import atomictest.eq&#10;&#10;class Rectangle(&#10;        val x: Int,&#10;        val y: Int,&#10;        val width: Int,&#10;        val height: Int&#10;) {&#10;    override fun toString(): String {&#10;        return &quot;[x=$x, y=$y, width=$width, height=$height]&quot;&#10;    }&#10;}&#10;&#10;fun Rectangle.coversZero(): Boolean =&#10;        TODO()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val first = Rectangle(-1, -1, 2, 2)&#10;    val second = Rectangle(1, 1, 2, 2)&#10;    first.coversZero() eq true&#10;    second.coversZero() eq false&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package extensionFunctions3&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestRectangle {&#10;    private fun message(rectangle: Rectangle, expected: Boolean) =&#10;            &quot;Wrong result for rectangle $rectangle; it should${if (expected) &quot;&quot; else &quot;n't&quot;} cover zero:&quot;&#10;&#10;    private fun checkCovering(rectangle: Rectangle, expected: Boolean) {&#10;        Assert.assertEquals(message(rectangle, expected), expected, rectangle.coversZero())&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = checkCovering(Rectangle(-1, -1, 2, 2), true)&#10;&#10;    @Test&#10;    fun test2Sample() = checkCovering(Rectangle(1, 1, 2, 2), false)&#10;&#10;    @Test&#10;    fun test3() = checkCovering(Rectangle(-10, -10, 10, 10), true)&#10;&#10;    @Test&#10;    fun test4() = checkCovering(Rectangle(-10, -10, 9, 9), false)&#10;&#10;    @Test&#10;    fun test5() = checkCovering(Rectangle(-10, -10, 11, 9), false)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570330000" />
                          </EduTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: Convert receiver to a parameter&lt;/h2&gt;&lt;p&gt;You can convert a regular function into an extension and back&#10;automatically. Put the caret on the receiver parameter, invoke&#10;the intention list and choose &#10;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Convert receiver to parameter&lt;/code&gt;&lt;/span&gt;.&#10;Then you can type the parameter name or choose the suggested one.&#10;Note how all the usages of the function are changed accordingly.&lt;/p&gt;&lt;p&gt;For a backward conversion, put the caret on the parameter, and&#10;choose &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Convert parameter to receiver&lt;/code&gt;&lt;/span&gt;&#10;from the intention list.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Usability+%2F+Extension+Functions+%2F+Exercise4&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="5" />
                            <option name="name" value="Exercise 4" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497835" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package extensionFunctions4&#10;&#10;import atomictest.eq&#10;&#10;class Book(val title: String)&#10;&#10;fun Book.categorize(category: String) =&#10;        &quot;&quot;&quot;title: &quot;$title&quot;, category: $category&quot;&quot;&quot;&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    Book(&quot;Dracula&quot;).categorize(&quot;Vampire&quot;) eq&#10;            &quot;&quot;&quot;title: &quot;Dracula&quot;, category: Vampire&quot;&quot;&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package extensionFunctions4&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570331000" />
                          </IdeTask>
                        </list>
                      </option>
                      <option name="unitId" value="149983" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="175298" />
                      <option name="index" value="3" />
                      <option name="name" value="Named &amp; Default Arguments" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570970000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Named &amp;amp; Default Arguments&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/107294/step/1&quot;&gt;Read &amp;quot;Named &amp;amp; Default Arguments&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497836" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/ArgumentOrder.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ArgumentOrder.kt" />
                                      <option name="text" value="// NamedAndDefaultArgs/ArgumentOrder.kt&#10;package color1&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  color(blue = 0, red = 99, green = 52) eq&#10;    &quot;(99, 52, 0)&quot;&#10;  // Can't put regular arguments after named:&#10;  // color(red = 255, 255, 0)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Color2.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Color2.kt" />
                                      <option name="text" value="// NamedAndDefaultArgs/Color2.kt&#10;package color2&#10;import atomictest.eq&#10;&#10;fun color(&#10;  red: Int = 0,&#10;  green: Int = 0,&#10;  blue: Int = 0&#10;) = &quot;($red, $green, $blue)&quot;&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  color(139) eq &quot;(139, 0, 0)&quot;&#10;  color(blue = 139) eq &quot;(0, 0, 139)&quot;&#10;  color(255, 165) eq &quot;(255, 165, 0)&quot;&#10;  color(red = 128, blue = 128) eq&#10;    &quot;(128, 0, 128)&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Color3.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Color3.kt" />
                                      <option name="text" value="// NamedAndDefaultArgs/Color3.kt&#10;package color3&#10;import atomictest.eq&#10;&#10;class Color(&#10;  val red: Int = 0,&#10;  val green: Int = 0,&#10;  val blue: Int = 0&#10;) {&#10;  override fun toString(): String {&#10;    return &quot;($red, $green, $blue)&quot;&#10;  }&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  Color(red = 77).toString() eq &quot;(77, 0, 0)&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/CreateString.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/CreateString.kt" />
                                      <option name="text" value="// NamedAndDefaultArgs/CreateString.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf(1, 2, 3)&#10;  list.toString() eq &quot;[1, 2, 3]&quot;&#10;  list.joinToString() eq &quot;1, 2, 3&quot;&#10;  list.joinToString(prefix = &quot;(&quot;,&#10;    postfix = &quot;)&quot;) eq &quot;(1, 2, 3)&quot;&#10;  list.joinToString(separator = &quot;:&quot;) eq&#10;    &quot;1:2:3&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/CreateString2.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/CreateString2.kt" />
                                      <option name="text" value="// NamedAndDefaultArgs/CreateString2.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf(1, 2, 3)&#10;  list.joinToString(&quot;. &quot;, &quot;&quot;, &quot;!&quot;) eq&#10;    &quot;1. 2. 3!&quot;&#10;  list.joinToString(separator = &quot;. &quot;,&#10;    postfix = &quot;!&quot;) eq &quot;1. 2. 3!&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Evaluation.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Evaluation.kt" />
                                      <option name="text" value="// NamedAndDefaultArgs/Evaluation.kt&#10;&#10;class DefaultArg&#10;&#10;fun h(d: DefaultArg = DefaultArg()) =&#10;  println(d)&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  h()&#10;  h()&#10;}&#10;/* Sample output:&#10;DefaultArg@28d93b30&#10;DefaultArg@1b6d3586&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/NamedArguments.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/NamedArguments.kt" />
                                      <option name="text" value="// NamedAndDefaultArgs/NamedArguments.kt&#10;package color1&#10;import atomictest.eq&#10;&#10;fun color(red: Int, green: Int, blue: Int) =&#10;  &quot;($red, $green, $blue)&quot;&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  color(red = 76, green = 89, blue = 0) eq&#10;    &quot;(76, 89, 0)&quot;&#10;  color(52, 34, blue = 0) eq &quot;(52, 34, 0)&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/TrimMargin.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/TrimMargin.kt" />
                                      <option name="text" value="// NamedAndDefaultArgs/TrimMargin.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val poem = &quot;&quot;&quot;&#10;    |Last night I saw upon the stair&#10;          |A little man who wasn't there&#10;                |He wasn't there again today&#10;|Oh, how I wish he'd go away.&quot;&quot;&quot;.trimMargin()&#10;  poem eq&#10;&quot;&quot;&quot;Last night I saw upon the stair&#10;A little man who wasn't there&#10;He wasn't there again today&#10;Oh, how I wish he'd go away.&quot;&quot;&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570333000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Named &amp;amp; Default Arguments (#1)&lt;/h2&gt;&lt;p&gt;Define a class &lt;code&gt;SimpleTime&lt;/code&gt; that stores the time passed from the beginning &#10;of the day. &#10;It should take four arguments: hours, minutes, seconds and nanoseconds,&#10;where each argument has the default value of zero.&lt;/p&gt;&lt;p&gt;Implement two member functions: &lt;code&gt;toSecondOfDay&lt;/code&gt; and &lt;code&gt;toNanoOfDay&lt;/code&gt;&#10;returning the number of seconds and nanoseconds accordingly &#10;passed from the beginning of the day.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Usability+%2F+Named+%26+Default+Arguments+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497837" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="0" />
                                                <option name="offset" value="75" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="0" />
                                            <option name="offset" value="75" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="" />
                                            <option name="possibleAnswer" value="&#10;        val hours: Int = 0,&#10;        val minutes: Int = 0,&#10;        val seconds: Int = 0,&#10;        val nanoseconds: Int = 0" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="110" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="110" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="&#10;            ((hours * 60 + minutes) * 60) + seconds" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="2" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="148" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="148" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="&#10;            (toSecondOfDay() * 1000000000L) + nanoseconds" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package namedandDefaultArguments1&#10;&#10;import atomictest.eq&#10;&#10;class SimpleTime(&#10;) {&#10;    fun toSecondOfDay(): Int = TODO()&#10;&#10;    fun toNanoOfDay(): Long = TODO()&#10;}&#10;&#10;/*&#10;fun main(args: Array&lt;String&gt;) {&#10;    val noon = SimpleTime(12)&#10;    noon.toSecondOfDay() eq 12 * 60 * 60&#10;&#10;    val halfPastSeven = SimpleTime(hours = 6, minutes = 30)&#10;    halfPastSeven.toNanoOfDay() eq 23400000000000&#10;&#10;    val nanosecond = SimpleTime(nanoseconds = 1)&#10;    nanosecond.toNanoOfDay() eq 1&#10;&#10;    val second = SimpleTime(seconds = 1)&#10;    second.toNanoOfDay() eq 1000000000&#10;}&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package namedandDefaultArguments1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;import java.time.LocalTime&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestSimpleTime {&#10;    private fun testSimpleTime(&#10;            hours: Int,&#10;            minutes: Int = 0,&#10;            seconds: Int = 0,&#10;            nanoseconds: Int = 0&#10;    ) {&#10;        val time = SimpleTime(hours, minutes, seconds, nanoseconds)&#10;&#10;        val localTime = LocalTime.of(hours, minutes, seconds, nanoseconds)&#10;        fun message(functionName: String) =&#10;                &quot;Wrong '$functionName' for SimpleTime(hours = $hours, &quot; +&#10;                &quot;minutes = $minutes, seconds = $seconds, nanoseconds = $nanoseconds)&quot;&#10;        Assert.assertEquals(message(&quot;toSecondOfDay&quot;), localTime.toSecondOfDay(), time.toSecondOfDay())&#10;        Assert.assertEquals(message(&quot;toNanoOfDay&quot;), localTime.toNanoOfDay(), time.toNanoOfDay())&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = testSimpleTime(12)&#10;&#10;    @Test&#10;    fun test2Sample() = testSimpleTime(6, 30)&#10;&#10;    @Test&#10;    fun test3Sample() = testSimpleTime(0, 0, 1)&#10;&#10;    @Test&#10;    fun test4Sample() = testSimpleTime(0, 0, 0, 1)&#10;&#10;    @Test&#10;    fun test5() = testSimpleTime(2, 12, 27)&#10;&#10;    @Test&#10;    fun test6() = testSimpleTime(1, 1, 1, 1)&#10;&#10;    @Test&#10;    fun test7() = testSimpleTime(11, 59, 59, 999999999)&#10;&#10;    @Test&#10;    fun test8() = testSimpleTime(5, 31)&#10;}&#10;&#10;fun SimpleTime(hours: Any?, minutes: Any?, seconds: Any?, nanoseconds: Any?): SimpleTime = TODO()" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570334000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Named &amp;amp; Default Arguments (#2)&lt;/h2&gt;&lt;p&gt;Implement the &lt;code&gt;joinComments&lt;/code&gt; function which joins&#10;the comment text using &lt;code&gt;;&lt;/code&gt; as a separator.&#10;It removes the slashes with the whitespace after the slashes (&lt;code&gt;//&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;Use the function &lt;code&gt;lines&lt;/code&gt; on String which splits this String into a list of lines&#10;delimited by any of the &lt;code&gt;new line&lt;/code&gt; character sequences.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Usability+%2F+Named+%26+Default+Arguments+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497838" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="95" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="95" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="&#10;        s.trimMargin(&quot;// &quot;).lines().joinToString(&quot;; &quot;)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package namedandDefaultArguments2&#10;&#10;import atomictest.eq&#10;&#10;fun joinComments(s: String): String = TODO()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val s = &quot;&quot;&quot;&#10;        // first&#10;        // second&#10;        // third&#10;        &quot;&quot;&quot;&#10;    joinComments(s) eq &quot;first; second; third&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package namedandDefaultArguments2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestComments {&#10;    private fun testJoiningComments(expected: String, string: String) {&#10;        Assert.assertEquals(&quot;Wrong result for $string:&quot;, expected, joinComments(string))&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = testJoiningComments(&quot;first; second; third&quot;, &quot;&quot;&quot;&#10;        // first&#10;        // second&#10;        // third&#10;        &quot;&quot;&quot;)&#10;&#10;    @Test&#10;    fun test2() = testJoiningComments(&quot;a; b; c; d&quot;, &quot;&quot;&quot;&#10;        // a&#10;        // b&#10;        // c&#10;        // d&quot;&quot;&quot;)&#10;&#10;    @Test&#10;    fun test3() = testJoiningComments(&quot;a&quot;, &quot;// a&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570335000" />
                          </EduTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: Change signature&lt;/h2&gt;&lt;p&gt;You can't safely change the function parameter name:&#10;some callers might call the function specifying this parameter name, and&#10;this code will no longer compile.&#10;Fortunately, IntelliJ IDEA can fix that automatically.&#10;Use the shortcut &lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:ChangeSignature;&lt;/span&gt;&#10;or choose &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Refactor | Change Signature&lt;/code&gt;&lt;/span&gt;.&#10;You can change parameter names, or add more parameters to a function,&#10;and all the callers will be updated correspondingly.&lt;/p&gt;&lt;p&gt;Put the caret on the &lt;code&gt;foo&lt;/code&gt; function and call &#10;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Change Signature&lt;/code&gt;&lt;/span&gt; refactoring. Then press the icon&#10;with the plus symbol (&lt;code&gt;+&lt;/code&gt;) to add one more parameter. Specify it's name &lt;code&gt;d&lt;/code&gt; and&#10;it's type &lt;code&gt;Double&lt;/code&gt;, and the default value &lt;code&gt;1.0&lt;/code&gt;.&#10;Press &lt;span class=&quot;control&quot;&gt;&lt;code&gt;EditorEnter&lt;/code&gt;&lt;/span&gt; or click the &#10;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Refactor&lt;/code&gt;&lt;/span&gt; button.&#10;Note how the callers change: the default value is used for all the callers.&#10;Now add the same parameter to the &lt;code&gt;bar&lt;/code&gt; function without specifying&#10;the default value this time.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Usability+%2F+Named+%26+Default+Arguments+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497839" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package namedandDefaultArguments3&#10;&#10;import atomictest.eq&#10;&#10;fun foo(i: Int, s: String) = &quot;(i = $i, s = $s)&quot;&#10;&#10;fun bar(i: Int, s: String) = &quot;(i = $i, s = $s)&quot;&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    foo(i = 1, s = &quot;abc&quot;) eq &quot;(i = 1, s = abc)&quot;&#10;    foo(2, &quot;def&quot;) eq &quot;(i = 2, s = def)&quot;&#10;&#10;    bar(i = 1, s = &quot;abc&quot;) eq &quot;(i = 1, s = abc)&quot;&#10;    bar(2, &quot;def&quot;) eq &quot;(i = 2, s = def)&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package namedandDefaultArguments3&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570336000" />
                          </IdeTask>
                        </list>
                      </option>
                      <option name="unitId" value="149984" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="175299" />
                      <option name="index" value="4" />
                      <option name="name" value="Overloading" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570973000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Overloading&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/107295/step/1&quot;&gt;Read &amp;quot;Overloading&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497840" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/MemberVsExtension.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/MemberVsExtension.kt" />
                                      <option name="text" value="// Overloading/MemberVsExtension.kt&#10;import atomictest.eq&#10;&#10;class My {&#10;  fun foo() = 0&#10;}&#10;&#10;fun My.foo() = 1             // [1]&#10;&#10;fun My.foo(i: Int) = i + 2   // [2]&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  My().foo() eq 0&#10;  My().foo(1) eq 3&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Overloading.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Overloading.kt" />
                                      <option name="text" value="// Overloading/Overloading.kt&#10;import atomictest.eq&#10;&#10;class Overloading {&#10;  fun f() = 0&#10;  fun f(n: Int) = n + 2&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val o = Overloading()&#10;  o.f() eq 0&#10;  o.f(11) eq 13&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/OverloadingAdd.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/OverloadingAdd.kt" />
                                      <option name="text" value="// Overloading/OverloadingAdd.kt&#10;import atomictest.eq&#10;&#10;fun addInt(i: Int, j: Int) = i + j&#10;fun addDouble(i: Double, j: Double) = i + j&#10;&#10;fun add(i: Int, j: Int) = i + j&#10;fun add(i: Double, j: Double) = i + j&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  addInt(5, 6) eq add(5, 6)&#10;  addDouble(56.23, 44.77) eq&#10;    add(56.23, 44.77)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/WithDefaultArguments.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/WithDefaultArguments.kt" />
                                      <option name="text" value="// Overloading/WithDefaultArguments.kt&#10;package withdefaultarguments&#10;import atomictest.eq&#10;&#10;fun f(n: Int = 0) = n + 373&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  f() eq 373&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/WithoutDefaultArguments.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/WithoutDefaultArguments.kt" />
                                      <option name="text" value="// Overloading/WithoutDefaultArguments.kt&#10;package withoutdefaultarguments&#10;import atomictest.eq&#10;&#10;fun f(n: Int) = n + 373&#10;fun f() = f(0)&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  f() eq 373&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570338000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Overloading (#1)&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;Implement overloaded versions of &lt;code&gt;myJoinToString()&lt;/code&gt; function passing default&#10;values for arguments in each overloaded function invocation, without the &#10;language support for this feature.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Which error occurs if you try to define the following two overloaded functions:&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;fun List&amp;lt;Int&amp;gt;.myJoinToString(separator: String, prefix: String): String&#10;fun List&amp;lt;Int&amp;gt;.myJoinToString(prefix: String, postfix: String): String&#10;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Uncomment the commented &lt;code&gt;myJoinToString()&lt;/code&gt; function and see the error the &#10;compiler gives.&lt;/p&gt;&lt;ol start=&quot;3&quot;&gt;&lt;li&gt;How many functions does one need to provide to imitate a function providing &#10;default values for three arguments? Open a hint to see an answer. &lt;/li&gt;&lt;/ol&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Usability+%2F+Overloading+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497841" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="To cover all the possible combinations of parameters, you'd need to&#10;provide six more overloaded functions:&#10;&#10;```text&#10;main: joinToString(separator, prefix, postfix)&#10;1 - joinToString(separator, prefix)&#10;2 - joinToString(separator, postfix)&#10;3 - joinToString(prefix, postfix)&#10;4 - joinToString(separator)&#10;5 - joinToString(prefix)&#10;6 - joinToString(postfix)&#10;```&#10;&#10;However, due to the same signatures of functions 1-3 (`joinToString(String): String`) &#10;and 4-6 (`joinToString(String, String): String`), you can only define one in&#10;each case. Thus, without the support for default arguments, you wouldn't be able&#10;to specify only the value of the last `postfix` argument, you'd need to provide&#10;the values for the previous arguments as well." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="0" />
                                                <option name="offset" value="489" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="0" />
                                            <option name="offset" value="489" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="" />
                                            <option name="possibleAnswer" value="separator, prefix, &quot;&quot;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="To cover all the possible combinations of parameters, you'd need to&#10;provide six more overloaded functions:&#10;&#10;```text&#10;main: joinToString(separator, prefix, postfix)&#10;1 - joinToString(separator, prefix)&#10;2 - joinToString(separator, postfix)&#10;3 - joinToString(prefix, postfix)&#10;4 - joinToString(separator)&#10;5 - joinToString(prefix)&#10;6 - joinToString(postfix)&#10;```&#10;&#10;However, due to the same signatures of functions 1-3 (`joinToString(String): String`) &#10;and 4-6 (`joinToString(String, String): String`), you can only define one in&#10;each case. Thus, without the support for default arguments, you wouldn't be able&#10;to specify only the value of the last `postfix` argument, you'd need to provide&#10;the values for the previous arguments as well." />
                                              </list>
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="0" />
                                                <option name="offset" value="578" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="0" />
                                            <option name="offset" value="578" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="" />
                                            <option name="possibleAnswer" value="separator, &quot;&quot;, &quot;&quot;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="To cover all the possible combinations of parameters, you'd need to&#10;provide six more overloaded functions:&#10;&#10;```text&#10;main: joinToString(separator, prefix, postfix)&#10;1 - joinToString(separator, prefix)&#10;2 - joinToString(separator, postfix)&#10;3 - joinToString(prefix, postfix)&#10;4 - joinToString(separator)&#10;5 - joinToString(prefix)&#10;6 - joinToString(postfix)&#10;```&#10;&#10;However, due to the same signatures of functions 1-3 (`joinToString(String): String`) &#10;and 4-6 (`joinToString(String, String): String`), you can only define one in&#10;each case. Thus, without the support for default arguments, you wouldn't be able&#10;to specify only the value of the last `postfix` argument, you'd need to provide&#10;the values for the previous arguments as well." />
                                              </list>
                                            </option>
                                            <option name="index" value="2" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="0" />
                                                <option name="offset" value="650" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="0" />
                                            <option name="offset" value="650" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="" />
                                            <option name="possibleAnswer" value="&quot;, &quot;, &quot;&quot;, &quot;&quot;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package overloading1&#10;&#10;import atomictest.eq&#10;&#10;fun List&lt;Int&gt;.joinToString(&#10;  separator: String = &quot;, &quot;,&#10;  prefix: String = &quot;&quot;,&#10;  postfix: String = &quot;&quot;&#10;): String {&#10;    return joinTo(StringBuilder(), separator, prefix, postfix).toString()&#10;}&#10;&#10;fun List&lt;Int&gt;.myJoinToString(&#10;  separator: String,&#10;  prefix: String,&#10;  postfix: String&#10;): String {&#10;    return joinToString(separator, prefix, postfix)&#10;}&#10;&#10;fun List&lt;Int&gt;.myJoinToString(separator: String, prefix: String): String {&#10;    return myJoinToString()&#10;}&#10;&#10;fun List&lt;Int&gt;.myJoinToString(separator: String): String {&#10;    return myJoinToString()&#10;}&#10;&#10;fun List&lt;Int&gt;.myJoinToString(): String {&#10;    return myJoinToString()&#10;}&#10;&#10;/*&#10;fun List&lt;Int&gt;.myJoinToString(prefix: String, postfix: String): String {&#10;    return TODO()&#10;}&#10;*/&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val list = listOf(1, 2, 3)&#10;    list.myJoinToString() eq &quot;1, 2, 3&quot;&#10;    list.myJoinToString(&quot;|&quot;) eq &quot;1|2|3&quot;&#10;    list.myJoinToString(&quot;..&quot;, &quot;List: &quot;) eq &quot;List: 1..2..3&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package overloading1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestOverloading {&#10;&#10;    private fun testList(actual: String, expected: String) {&#10;        Assert.assertEquals(&quot;Wrong result: &quot;, expected, actual)&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() {&#10;        val list = listOf(1, 2, 3)&#10;        testList(list.myJoinToString(), &quot;1, 2, 3&quot;)&#10;        testList(list.myJoinToString(&quot;|&quot;), &quot;1|2|3&quot;)&#10;        testList(list.myJoinToString(&quot;..&quot;, &quot;List: &quot;), &quot;List: 1..2..3&quot;)&#10;    }&#10;&#10;    @Test&#10;    fun test2() = testList(&#10;            listOf(1, 2, 3, 4, 5, 6).myJoinToString(&quot;&quot;),&#10;            &quot;123456&quot;&#10;    )&#10;&#10;    @Test&#10;    fun test3() = testList(&#10;            listOf(1, 2, 3, 4).myJoinToString(),&#10;            &quot;1, 2, 3, 4&quot;&#10;    )&#10;&#10;    @Test&#10;    fun test4() = testList(&#10;            listOf(1, 2, 3, 4).myJoinToString(&quot;,&quot;, &quot;##&quot;),&#10;            &quot;##1,2,3,4&quot;&#10;    )&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570339000" />
                          </EduTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: Refactor this&lt;/h2&gt;&lt;p&gt;You can extract a value used inside a function to a parameter.&#10;To do that you can use the &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Extract parameter&lt;/code&gt;&lt;/span&gt; &#10;refactoring. Alternatively, call &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Refactor this&lt;/code&gt;&lt;/span&gt;&#10;action by pressing &#10;&lt;span class=&quot;shortcut&quot;&gt;&amp;shortcut:Refactorings.QuickListPopupAction;&lt;/span&gt;. &#10;Then you may choose &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Extract parameter&lt;/code&gt;&lt;/span&gt; &#10;by pressing the corresponding number on the keyboard.&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Refactor this&lt;/code&gt;&lt;/span&gt; is a helpful way to check&#10;which ways to refactor code are available.&lt;/p&gt;&lt;p&gt;Extract the value &lt;code&gt;373&lt;/code&gt; inside &lt;code&gt;f&lt;/code&gt; function implementation to a parameter&#10;by calling &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Refactor this&lt;/code&gt;&lt;/span&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Usability+%2F+Overloading+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497842" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package overloading2&#10;&#10;import atomictest.eq&#10;&#10;fun f(n: Int = 0) = n + 373&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    f() eq 373&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package overloading2" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570340000" />
                          </IdeTask>
                        </list>
                      </option>
                      <option name="unitId" value="149985" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="175300" />
                      <option name="index" value="5" />
                      <option name="name" value="when Expressions" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570977000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;&lt;code&gt;when&lt;/code&gt; Expressions&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/107296/step/1&quot;&gt;Read &amp;quot;&lt;code&gt;when&lt;/code&gt; Expressions&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497843" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/AnalyzingInput.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/AnalyzingInput.kt" />
                                      <option name="text" value="// WhenExpressions/AnalyzingInput.kt&#10;&#10;class Coordinates(var x: Int, var y: Int) {&#10;  override fun toString(): String {&#10;    return &quot;($x, $y)&quot;&#10;  }&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  println(&quot;&quot;&quot;|Welcome! Type 'up', 'down',&#10;    |'left', 'right' or 'nowhere' to move;&#10;    |'exit' to exit.&quot;&quot;&quot;.trimMargin())&#10;  val coordinates = Coordinates(0, 0)&#10;  while (true) {&#10;    println(&quot;Your coordinates: $coordinates&quot;)&#10;    println(&quot;Where do you want to move?&quot;)&#10;    when (readLine()) {                // [1]&#10;      &quot;up&quot;, &quot;u&quot; -&gt; coordinates.y--     // [2]&#10;      &quot;down&quot;, &quot;d&quot; -&gt; coordinates.y++&#10;      &quot;left&quot;, &quot;l&quot; -&gt; coordinates.x--&#10;      &quot;right&quot;, &quot;r&quot; -&gt; {                // [3]&#10;        coordinates.x++&#10;      }&#10;      &quot;nowhere&quot; -&gt; {}                  // [4]&#10;      &quot;exit&quot; -&gt; return                 // [5]&#10;      else -&gt; println(&quot;Sorry, &quot; +&#10;        &quot;I don't understand you&quot;)&#10;    }&#10;  }&#10;}&#10;/* Input/Output:&#10;Welcome! Type 'up', 'down',&#10;'left', 'right' or 'nowhere' to move;&#10;'exit' to exit.&#10;Your coordinates: (0, 0)&#10;Where do you want to move?&#10;&gt;&gt;&gt; right&#10;Your coordinates: (1, 0)&#10;Where do you want to move?&#10;&gt;&gt;&gt; d&#10;Your coordinates: (1, 1)&#10;Where do you want to move?&#10;&gt;&gt;&gt; nowhere&#10;Your coordinates: (1, 1)&#10;Where do you want to move?&#10;&gt;&gt;&gt; exit&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/BmiWhen.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/BmiWhen.kt" />
                                      <option name="text" value="// WhenExpressions/BmiWhen.kt&#10;import atomictest.eq&#10;&#10;fun bmiStatusOld(&#10;  kg: Double,&#10;  heightM: Double&#10;): String {&#10;  val bmi = kg / (heightM * heightM)&#10;  return if (bmi &lt; 18.5) &quot;Underweight&quot;&#10;    else if (bmi &lt; 25) &quot;Normal weight&quot;&#10;    else &quot;Overweight&quot;&#10;}&#10;&#10;fun bmiStatusWithWhen(&#10;  kg: Double,&#10;  heightM: Double&#10;): String {&#10;  val bmi = kg / (heightM * heightM)&#10;  return when {&#10;    bmi &lt; 18.5 -&gt; &quot;Underweight&quot;&#10;    bmi &lt; 25 -&gt; &quot;Normal weight&quot;&#10;    else -&gt; &quot;Overweight&quot;&#10;  }&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  bmiStatusOld(72.57, 1.727) eq&#10;  bmiStatusWithWhen(72.57, 1.727)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/GermanOrdinals.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/GermanOrdinals.kt" />
                                      <option name="text" value="// WhenExpressions/GermanOrdinals.kt&#10;import atomictest.eq&#10;&#10;val numbers = mapOf(&#10;  1 to &quot;eins&quot;, 2 to &quot;zwei&quot;, 3 to &quot;drei&quot;,&#10;  4 to &quot;vier&quot;, 5 to &quot;fuenf&quot;, 6 to &quot;sechs&quot;,&#10;  7 to &quot;sieben&quot;, 8 to &quot;acht&quot;, 9 to &quot;neun&quot;,&#10;  10 to &quot;zehn&quot;, 11 to &quot;elf&quot;, 12 to &quot;zwoelf&quot;,&#10;  13 to &quot;dreizehn&quot;, 14 to &quot;vierzehn&quot;,&#10;  15 to &quot;fuenfzehn&quot;, 16 to &quot;sechzehn&quot;,&#10;  17 to &quot;siebzehn&quot;, 18 to &quot;achtzehn&quot;,&#10;  19 to &quot;neunzehn&quot;, 20 to &quot;zwanzig&quot;&#10;)&#10;&#10;fun ordinal(i: Int): String =&#10;  when (i) {                            // [1]&#10;    1 -&gt; &quot;erste&quot;                        // [2]&#10;    3 -&gt; &quot;dritte&quot;&#10;    7 -&gt; &quot;siebte&quot;&#10;    8 -&gt; &quot;achte&quot;&#10;    20 -&gt; &quot;zwanzigste&quot;&#10;    else -&gt; numbers.getValue(i) + &quot;te&quot;  // [3]&#10;  }&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  ordinal(2) eq &quot;zweite&quot;&#10;  ordinal(3) eq &quot;dritte&quot;&#10;  ordinal(11) eq &quot;elfte&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/MatchingAgainstVals.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/MatchingAgainstVals.kt" />
                                      <option name="text" value="// WhenExpressions/MatchingAgainstVals.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val yes = &quot;yes&quot;&#10;  val no = &quot;no&quot;&#10;  val choice = readLine()&#10;  when (choice) {&#10;    yes -&gt; println(&quot;Hooray!&quot;)&#10;    no -&gt; println(&quot;Too bad!&quot;)&#10;  }&#10;  // The same code rewritten with if:&#10;  if (choice == yes) println(&quot;Hooray!&quot;)&#10;  else if (choice == no) println(&quot;Too bad!&quot;)&#10;}&#10;/* Input/Output:&#10;&gt;&gt;&gt; yes&#10;Hooray!&#10;Hooray!&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/MixColors.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/MixColors.kt" />
                                      <option name="text" value="// WhenExpressions/MixColors.kt&#10;import atomictest.eq&#10;&#10;fun mixColors(first: String, second: String) =&#10;  when (setOf(first, second)) {&#10;    setOf(&quot;red&quot;, &quot;blue&quot;) -&gt; &quot;purple&quot;&#10;    setOf(&quot;red&quot;, &quot;yellow&quot;) -&gt; &quot;orange&quot;&#10;    setOf(&quot;blue&quot;, &quot;yellow&quot;) -&gt; &quot;green&quot;&#10;    else -&gt; &quot;unknown&quot;&#10;  }&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  mixColors(&quot;red&quot;, &quot;blue&quot;) eq &quot;purple&quot;&#10;  mixColors(&quot;blue&quot;, &quot;red&quot;) eq &quot;purple&quot;&#10;  mixColors(&quot;blue&quot;, &quot;purple&quot;) eq &quot;unknown&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570343000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;&lt;code&gt;when&lt;/code&gt; Expressions (#1)&lt;/h2&gt;&lt;p&gt;Create a method &lt;code&gt;getCloudinessDescription&lt;/code&gt; providing the description based &#10;on the percentage of cloudiness: &amp;quot;Sunny&amp;quot; (for the cloudiness in a range 81..100),&#10;&amp;quot;Mostly Sunny&amp;quot; (61..80), &amp;quot;Partly Sunny&amp;quot; (41..60), &amp;quot;Mostly Cloudy&amp;quot; (21..40), and &amp;quot;Cloudy&amp;quot; (0..20).&#10;For the argument not in a range 0..100 the function should throw &lt;code&gt;IllegalArgumentException&lt;/code&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Usability+%2F+when+Expressions+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497844" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="130" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="130" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="&#10;        when (cloudiness) {&#10;            in 81..100 -&gt; &quot;Sunny&quot;&#10;            in 61..80 -&gt; &quot;Mostly Sunny&quot;&#10;            in 41..60 -&gt; &quot;Partly Sunny&quot;&#10;            in 21..40 -&gt; &quot;Mostly Cloudy&quot;&#10;            in 0..20 -&gt; &quot;Cloudy&quot;&#10;            else -&gt; throw IllegalArgumentException(&#10;                    &quot;Cloudiness value should be between 0 and 100&quot;)&#10;        }" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package whenExpressions1&#10;&#10;import atomictest.capture&#10;import atomictest.eq&#10;&#10;fun getCloudinessDescription(cloudiness: Int): String = TODO()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    getCloudinessDescription(100) eq &quot;Sunny&quot;&#10;    getCloudinessDescription(70) eq &quot;Mostly Sunny&quot;&#10;    getCloudinessDescription(50) eq &quot;Partly Sunny&quot;&#10;    getCloudinessDescription(30) eq &quot;Mostly Cloudy&quot;&#10;    getCloudinessDescription(0) eq &quot;Cloudy&quot;&#10;    capture {&#10;        getCloudinessDescription(1000)&#10;    } eq &quot;IllegalArgumentException: Cloudiness value should be between 0 and 100&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package whenExpressions1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestCloudiness {&#10;    private fun expected(cloudiness: Int): String =&#10;            when (cloudiness) {&#10;                in 81..100 -&gt; &quot;Sunny&quot;&#10;                in 61..80 -&gt; &quot;Mostly Sunny&quot;&#10;                in 41..60 -&gt; &quot;Partly Sunny&quot;&#10;                in 21..40 -&gt; &quot;Mostly Cloudy&quot;&#10;                in 0..20 -&gt; &quot;Cloudy&quot;&#10;                else -&gt; throw IllegalArgumentException(&#10;                        &quot;Cloudiness value should be between 0 and 100&quot;)&#10;            }&#10;&#10;    @Test&#10;    fun test1CorrectValues() {&#10;        for (cloudiness in 0..100) {&#10;            Assert.assertEquals(&quot;Wrong result for cloudiness=$cloudiness:&quot;,&#10;                    expected(cloudiness), getCloudinessDescription(cloudiness))&#10;        }&#10;    }&#10;&#10;    private fun testIncorrectValue(cloudiness: Int) {&#10;        try {&#10;            getCloudinessDescription(cloudiness)&#10;            throw AssertionError(&quot;Expected an IllegalArgumentException for cloudiness=$cloudiness&quot;)&#10;        } catch (exception: IllegalArgumentException) {&#10;            Assert.assertEquals(&quot;Incorrect error message&quot;, &quot;Cloudiness value should be between 0 and 100&quot;, exception.message)&#10;        }&#10;    }&#10;&#10;    @Test&#10;    fun test2Incorrect() = testIncorrectValue(104)&#10;&#10;    @Test&#10;    fun test3Incorrect() = testIncorrectValue(-3)&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570344000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;&lt;code&gt;when&lt;/code&gt; Expressions (#2)&lt;/h2&gt;&lt;p&gt;Create a method &lt;code&gt;getTemperatureDescription&lt;/code&gt; that takes a temperature in &#10;Celsius as an argument and returns the according description &#10;(&amp;quot;Hot&amp;quot;, &amp;quot;Warm&amp;quot;, &amp;quot;Cool&amp;quot;, &amp;quot;Cold&amp;quot; or &amp;quot;Freezing&amp;quot;):&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Temperature&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Hot&lt;/td&gt;&lt;td&gt;25 C and Above&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;intellij-row-even&quot;&gt;&lt;td&gt;Warm&lt;/td&gt;&lt;td&gt;from 15 to 24 C&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Cool&lt;/td&gt;&lt;td&gt;from 5 to 14 C&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;intellij-row-even&quot;&gt;&lt;td&gt;Cold&lt;/td&gt;&lt;td&gt;from -5 to 4 C&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Freezing&lt;/td&gt;&lt;td&gt;Below -5 C&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;There are no upper or lower bounds on argument.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Usability+%2F+when+Expressions+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497845" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="106" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="106" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="&#10;        when {&#10;            temperature &gt;= 25 -&gt; &quot;Hot&quot;&#10;            temperature in 15..24 -&gt; &quot;Warm&quot;&#10;            temperature in 5..14 -&gt; &quot;Cool&quot;&#10;            temperature in -5..4 -&gt; &quot;Cold&quot;&#10;            else -&gt; &quot;Freezing&quot;&#10;        }" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package whenExpressions2&#10;&#10;import atomictest.eq&#10;&#10;fun getTemperatureDescription(temperature: Int): String = TODO()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    getTemperatureDescription(30) eq &quot;Hot&quot;&#10;    getTemperatureDescription(10) eq &quot;Cool&quot;&#10;    getTemperatureDescription(-30) eq &quot;Freezing&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package whenExpressions2&#10;&#10;import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class TestTemperature {&#10;    private fun expected(temperature: Int): String =&#10;            when {&#10;                temperature &gt;= 25 -&gt; &quot;Hot&quot;&#10;                temperature in 15..24 -&gt; &quot;Warm&quot;&#10;                temperature in 5..14 -&gt; &quot;Cool&quot;&#10;                temperature in -5..4 -&gt; &quot;Cold&quot;&#10;                else -&gt; &quot;Freezing&quot;&#10;            }&#10;&#10;    @Test fun test() {&#10;        for (temperature in -100..110) {&#10;            Assert.assertEquals(&quot;Wrong value for temperature=$temperature&quot;,&#10;                    expected(temperature), getTemperatureDescription(temperature))&#10;        }&#10;    }&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570345000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;&lt;code&gt;when&lt;/code&gt; Expressions (#3)&lt;/h2&gt;&lt;p&gt;Implement the function &lt;code&gt;isBalanced&lt;/code&gt; that takes an argument of a string consisting&#10;of parentheses like &lt;code&gt;()(())&lt;/code&gt; and checks whether each opening symbol has&#10;a corresponding closing symbol and the pairs of parentheses are properly&#10;nested.&lt;/p&gt;&lt;p&gt;An input string can contain whitespaces which should be ignored.&#10;If it contains any other characters besides parentheses and whitespaces,&#10;&lt;code&gt;IllegalArgumentException&lt;/code&gt; should be thrown.&lt;/p&gt;&lt;p&gt;Some examples:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;()&lt;/code&gt; is balanced&lt;/li&gt;&lt;li&gt;&lt;code&gt;(()&lt;/code&gt; is unbalanced&lt;/li&gt;&lt;li&gt;&lt;code&gt;)(&lt;/code&gt; is unbalanced&lt;/li&gt;&lt;li&gt;&lt;code&gt;( ()() )&lt;/code&gt; is balanced&lt;/li&gt;&lt;li&gt;&lt;code&gt;*()&lt;/code&gt; leads to &lt;code&gt;IllegalArgumentException&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Usability+%2F+when+Expressions+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497846" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Iterate over the string and count the number of left braces which are&#10;unmatched on each step. At the end, this number should be 0. If it is less than&#10;zero at some point, the string is unbalanced.&#10;" />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="93" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="93" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="var leftUnmatched = 0&#10;    for (c in input) {&#10;        when (c) {&#10;            '(' -&gt; leftUnmatched++&#10;            ')' -&gt; leftUnmatched--&#10;            ' ' -&gt; {}&#10;            else -&gt; throw IllegalArgumentException(&quot;The string must consist &quot; +&#10;                    &quot;only of parentheses and whitespaces&quot;)&#10;        }&#10;        if (leftUnmatched &lt; 0) return false&#10;    }&#10;    return leftUnmatched == 0" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package whenExpressions3&#10;&#10;import atomictest.eq&#10;&#10;fun isBalanced(input: String): Boolean {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    isBalanced(&quot;(()) ()&quot;) eq true&#10;    isBalanced(&quot;)(&quot;) eq false&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package whenExpressions3&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestBalancedBraces {&#10;    private fun checkBalanced(s: String, expected: Boolean) {&#10;        Assert.assertEquals(&quot;isBalanced($s) should return $expected&quot;, isBalanced(s), expected)&#10;    }&#10;&#10;    @Test fun test01Balanced() = checkBalanced(&quot;()&quot;, true)&#10;&#10;    @Test fun test02Balanced() = checkBalanced(&quot;(()) ()&quot;, true)&#10;&#10;    @Test fun test03Balanced() = checkBalanced(&quot;(()) ((()))&quot;, true)&#10;&#10;    @Test fun test04Balanced() = checkBalanced(&quot;()&quot;, true)&#10;&#10;    @Test fun test05Unbalanced() = checkBalanced(&quot;((&quot;, false)&#10;&#10;    @Test fun test06Unbalanced() = checkBalanced(&quot;))&quot;, false)&#10;&#10;    @Test fun test07Unbalanced() = checkBalanced(&quot;)(&quot;, false)&#10;&#10;    @Test fun test08Unbalanced() = checkBalanced(&quot;(()(())))()&quot;, false)&#10;&#10;    @Test fun test09Balanced() = checkBalanced(&quot;(() () ()) ((()) () (()) () (()))&quot;, true)&#10;&#10;    private fun checkWrongInput(s: String) {&#10;        try {&#10;            isBalanced(s)&#10;            throw AssertionError(&quot;&quot;&quot;IllegalArgumentException should be thrown for 'isBalanced(&quot;$s&quot;)'&quot;&quot;&quot;)&#10;        } catch (e: IllegalArgumentException) {&#10;            // ok&#10;        }&#10;    }&#10;&#10;&#10;    @Test fun test10WrongCharacters() = checkWrongInput(&quot;1()&quot;)&#10;&#10;    @Test fun test11WrongCharacters() = checkWrongInput(&quot;\\//&quot;)&#10;&#10;    @Test fun test12WrongCharacters() = checkWrongInput(&quot;[][]&quot;)&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570346000" />
                          </EduTask>
                          <IdeTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Mastering the IDE: Conversion between &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;when&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;You can convert &lt;code&gt;if&lt;/code&gt; to &lt;code&gt;when&lt;/code&gt; automatically and backwards.&#10;For conversion, choose an intention action &#10;&lt;span class=&quot;control&quot;&gt;&lt;code&gt;Replace 'when' with 'if'&lt;/code&gt;&lt;/span&gt;&#10;after putting the caret on &lt;code&gt;when&lt;/code&gt; keyword.&#10;For backward conversion, choose &lt;span class=&quot;control&quot;&gt;&lt;code&gt;Replace 'if' with 'when'&lt;/code&gt;&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;First, replace &lt;code&gt;when&lt;/code&gt; in &lt;code&gt;getBmiStatus&lt;/code&gt; function with &lt;code&gt;if&lt;/code&gt; automatically.&#10;Then apply the backwards conversion.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Usability+%2F+when+Expressions+%2F+Exercise4&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="5" />
                            <option name="name" value="Exercise 4" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497847" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package whenExpressions4&#10;&#10;import atomictest.eq&#10;&#10;fun getBmiStatus(&#10;        kg: Double,&#10;        heightM: Double&#10;): String {&#10;    val bmi = kg / (heightM * heightM)&#10;    return when {&#10;        bmi &lt; 18.5 -&gt; &quot;Underweight&quot;&#10;        bmi &lt; 25 -&gt; &quot;Normal weight&quot;&#10;        else -&gt; &quot;Overweight&quot;&#10;    }&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    getBmiStatus(72.57, 1.727) eq &quot;Normal weight&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package whenExpressions4" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570347000" />
                          </IdeTask>
                        </list>
                      </option>
                      <option name="unitId" value="149986" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="175301" />
                      <option name="index" value="6" />
                      <option name="name" value="Enumerations" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1539005198000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Enumerations&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/107297/step/1&quot;&gt;Read &amp;quot;Enumerations&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497848" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/CheckingOptions.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/CheckingOptions.kt" />
                                      <option name="text" value="// Enumerations/CheckingOptions.kt&#10;import atomictest.eq&#10;import enumerations.Level&#10;import enumerations.Level.*&#10;&#10;fun checkLevel(level: Level) {&#10;  when (level) {&#10;    Overflow -&gt; println(&quot;&gt;&gt;&gt; Overflow!&quot;)&#10;    Empty -&gt; println(&quot;Alert: Empty&quot;)&#10;    else -&gt; println(&quot;Level $level OK&quot;)&#10;  }&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  checkLevel(Empty)&#10;  checkLevel(Low)&#10;  checkLevel(Overflow)&#10;}&#10;/* Output:&#10;Alert: Empty&#10;Level Low OK&#10;&gt;&gt;&gt; Overflow!&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Direction.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Direction.kt" />
                                      <option name="text" value="// Enumerations/Direction.kt&#10;package enumerations&#10;import atomictest.eq&#10;import enumerations.Direction.*&#10;&#10;enum class Direction(val notation: String) {&#10;  NORTH(&quot;N&quot;), SOUTH(&quot;S&quot;),&#10;  EAST(&quot;E&quot;), WEST(&quot;W&quot;);&#10;  val opposite: Direction&#10;    get() = when (this) {&#10;      NORTH -&gt; SOUTH&#10;      SOUTH -&gt; NORTH&#10;      WEST -&gt; EAST&#10;      EAST -&gt; WEST&#10;    }&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  NORTH.notation eq &quot;N&quot;&#10;  NORTH.opposite eq SOUTH&#10;  WEST.opposite.opposite eq WEST&#10;  NORTH.opposite.notation eq &quot;S&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/EnumImport.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/EnumImport.kt" />
                                      <option name="text" value="// Enumerations/EnumImport.kt&#10;import atomictest.eq&#10;import enumerations.Level.*    // [1]&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  Overflow eq &quot;Overflow&quot;&#10;  High eq &quot;High&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Level.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Level.kt" />
                                      <option name="text" value="// Enumerations/Level.kt&#10;package enumerations&#10;import atomictest.eq&#10;&#10;enum class Level {&#10;  Overflow, High, Medium, Low, Empty&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  Level.Medium eq &quot;Medium&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/RecursiveEnumImport.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/RecursiveEnumImport.kt" />
                                      <option name="text" value="// Enumerations/RecursiveEnumImport.kt&#10;package enumerations&#10;import atomictest.eq&#10;import enumerations.Size.*            // [1]&#10;&#10;enum class Size {&#10;  Tiny, Small, Medium, Large, Huge, Gigantic&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  Gigantic eq &quot;Gigantic&quot;               // [2]&#10;  Size.values().toList() eq            // [3]&#10;    listOf(Tiny, Small, Medium,&#10;      Large, Huge, Gigantic)&#10;  Tiny.ordinal eq 0                    // [4]&#10;  Huge.ordinal eq 4&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570349000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Enumerations (#1)&lt;/h2&gt;&lt;p&gt;This task refactors the &lt;code&gt;Robot&lt;/code&gt; class used in the section II:&#10;it replaces four functions &lt;code&gt;goRight&lt;/code&gt;, &lt;code&gt;goLeft&lt;/code&gt;, &lt;code&gt;goDown&lt;/code&gt; and &lt;code&gt;goUp&lt;/code&gt; &#10;with one function &lt;code&gt;go&lt;/code&gt; that takes a &lt;code&gt;Direction&lt;/code&gt; argument which specifies &#10;the direction of movement.&lt;/p&gt;&lt;p&gt;Implement the &lt;code&gt;go&lt;/code&gt; function.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Usability+%2F+Enumerations+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497849" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="10" />
                                                <option name="offset" value="237" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="10" />
                                            <option name="offset" value="237" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="/* TODO */" />
                                            <option name="possibleAnswer" value=" UP -&gt; y -= steps&#10;            DOWN -&gt; y += steps&#10;            LEFT -&gt; x -= steps&#10;            RIGHT -&gt; x += steps" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package enumerations1&#10;&#10;import enumerations1.Direction.*&#10;&#10;enum class Direction {&#10;    UP, DOWN, LEFT, RIGHT&#10;}&#10;&#10;class Robot {&#10;    var x = 0&#10;    var y = 0&#10;&#10;    fun go(direction: Direction, steps: Int) {&#10;        when (direction) {&#10;           /* TODO */&#10;        }&#10;    }&#10;&#10;    val location: String&#10;        get() = &quot;($x,$y)&quot;&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val robot = Robot()&#10;    println(robot.location)&#10;    robot.go(RIGHT, 1)&#10;    println(robot.location)&#10;    robot.go(DOWN, 2)&#10;    println(robot.location)&#10;}&#10;/* Output:&#10;(0,0)&#10;(1,0)&#10;(1,2)&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package enumerations1&#10;&#10;import enumerations1.Direction.*&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestEnumerations {&#10;    class RobotHandler {&#10;        val robot: Robot = Robot()&#10;        val loggedMovements = StringBuilder()&#10;&#10;        fun goRight(steps: Int) {&#10;            robot.go(RIGHT, steps)&#10;            loggedMovements.appendln(&quot;goRight($steps)&quot;)&#10;        }&#10;&#10;        fun goLeft(steps: Int) {&#10;            robot.go(LEFT, steps)&#10;            loggedMovements.appendln(&quot;goLeft($steps)&quot;)&#10;&#10;        }&#10;&#10;        fun goDown(steps: Int) {&#10;            robot.go(DOWN, steps)&#10;            loggedMovements.appendln(&quot;goDown($steps)&quot;)&#10;&#10;        }&#10;&#10;        fun goUp(steps: Int) {&#10;            robot.go(UP, steps)&#10;            loggedMovements.appendln(&quot;goUp($steps)&quot;)&#10;        }&#10;    }&#10;&#10;    private fun testMovements(location: String, movements: RobotHandler.() -&gt; Unit) {&#10;        val robotHandler = RobotHandler()&#10;        robotHandler.movements()&#10;        val actualLocation = robotHandler.robot.location&#10;        val message = if (robotHandler.loggedMovements.isEmpty()) {&#10;            &quot;Initial location of the robot should be (0,0)&quot;&#10;        } else {&#10;            &quot;Wrong location after:\n&quot; + robotHandler.loggedMovements&#10;        }&#10;        Assert.assertEquals(message, location, actualLocation)&#10;    }&#10;&#10;    @Test&#10;    fun testInitial() = testMovements(&quot;(0,0)&quot;) {}&#10;&#10;    @Test&#10;    fun testRight() = testMovements(&quot;(1,0)&quot;) {&#10;        goRight(1)&#10;    }&#10;&#10;    @Test&#10;    fun testLeft() = testMovements(&quot;(1,0)&quot;) {&#10;        goRight(2)&#10;        goLeft(1)&#10;    }&#10;&#10;    @Test&#10;    fun testDown() = testMovements(&quot;(0,1)&quot;) {&#10;        goDown(1)&#10;    }&#10;&#10;    @Test&#10;    fun testUp() = testMovements(&quot;(0,1)&quot;) {&#10;        goDown(2)&#10;        goUp(1)&#10;    }&#10;&#10;    @Test&#10;    fun testSeveralSteps() = testMovements(&quot;(3,5)&quot;) {&#10;        goRight(3)&#10;        goDown(5)&#10;    }&#10;&#10;    @Test&#10;    fun testSeveralSteps2() = testMovements(&quot;(10,10)&quot;) {&#10;        goRight(13)&#10;        goDown(15)&#10;        goUp(5)&#10;        goLeft(3)&#10;    }&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1539005198000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Enumerations (#2)&lt;/h2&gt;&lt;p&gt;Implement two extension functions &lt;code&gt;Month.getAustralianSeason()&lt;/code&gt; and &lt;code&gt;Month.getDays(leapYear: Boolean)&lt;/code&gt;.&#10;The &lt;code&gt;leapYear&lt;/code&gt; argument should have a default value &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;In Australia, the seasons are defined by grouping the calendar months in the following way:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Spring - the transition months September, October and November;&lt;/li&gt;&lt;li&gt;Summer - the hottest months December, January and February;&lt;/li&gt;&lt;li&gt;Autumn - the transition months March, April and May;&lt;/li&gt;&lt;li&gt;Winter - the coldest months June, July and August.&lt;/li&gt;&lt;/ul&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Usability+%2F+Enumerations+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497850" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="335" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="335" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="when (this) {&#10;    December, January, February -&gt; Summer&#10;    March, April, May -&gt; Autumn&#10;    June, July, August -&gt; Winter&#10;    September, October, November -&gt; Spring&#10;}" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="0" />
                                                <option name="offset" value="361" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="0" />
                                            <option name="offset" value="361" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="" />
                                            <option name="possibleAnswer" value="leapYear: Boolean = false" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="2" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="370" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="370" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="when (this) {&#10;    January, March, May, July,&#10;    August, October, December -&gt; 31&#10;&#10;    April, June, September, November -&gt; 30&#10;&#10;    February -&gt; if (leapYear) 29 else 28&#10;}" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package enumerations2&#10;&#10;import atomictest.eq&#10;import enumerations2.Month.*&#10;import enumerations2.Season.*&#10;&#10;enum class Month {&#10;    January, February, March, April,&#10;    May, June, July, August,&#10;    September, October, November, December&#10;}&#10;&#10;enum class Season {&#10;    Winter, Spring, Summer, Autumn&#10;}&#10;&#10;fun Month.getAustralianSeason(): Season = TODO()&#10;&#10;fun Month.getDays(): Int = TODO()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    January.getAustralianSeason() eq Summer&#10;    May.getAustralianSeason() eq Autumn&#10;&#10;    January.getDays() eq 31&#10;/*&#10;    February.getDays(leapYear = false) eq 28&#10;    February.getDays(leapYear = true) eq 29&#10;*/&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package enumerations2&#10;&#10;import enumerations2.Month.*&#10;import enumerations2.Season.*&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestEnumerations {&#10;    private val seasons: Map&lt;Month, Season&gt; = mapOf(&#10;            December to Summer, January to Summer, February to Summer,&#10;            March to Autumn, April to Autumn, May to Autumn,&#10;            June to Winter, July to Winter, August to Winter,&#10;            September to Spring, October to Spring, November to Spring&#10;    )&#10;&#10;    @Test fun test1Seasons() {&#10;        for (month in Month.values()) {&#10;            Assert.assertEquals(&quot;Wrong australian season for $month:&quot;, seasons[month], month.getAustralianSeason())&#10;        }&#10;    }&#10;&#10;    private fun Month.expected(leapYear: Boolean = false): Int = when (this) {&#10;        January, March, May, July,&#10;        August, October, December -&gt; 31&#10;&#10;        April, June, September, November -&gt; 30&#10;&#10;        February -&gt; if (leapYear) 29 else 28&#10;    }&#10;&#10;    @Test fun test2Days() {&#10;        for (month in Month.values()) {&#10;            Assert.assertEquals(&quot;Wrong days for $month:&quot;, month.expected(false), month.expected(false))&#10;            Assert.assertEquals(&quot;Wrong days for $month in a leap year:&quot;, month.expected(true), month.expected(true))&#10;        }&#10;    }&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570351000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Enumerations (#3)&lt;/h2&gt;&lt;p&gt;Implement the &lt;code&gt;findWinner&lt;/code&gt; function which determines the winner in &#10;the Rock–paper–scissors game.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Usability+%2F+Enumerations+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497851" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="287" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="287" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="if (first == second) return DRAW&#10;    val winningCombinations = mapOf(&#10;            ROCK to SCISSORS,&#10;            SCISSORS to PAPER,&#10;            PAPER to ROCK)&#10;    if (winningCombinations[first] == second) {&#10;        return FIRST_WINS&#10;    }&#10;    return SECOND_WINS" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package enumerations3&#10;&#10;import atomictest.eq&#10;import enumerations3.Result.*&#10;import enumerations3.Rochambeau.*&#10;&#10;enum class Rochambeau {&#10;    ROCK, PAPER, SCISSORS&#10;}&#10;&#10;enum class Result {&#10;    DRAW, FIRST_WINS, SECOND_WINS&#10;}&#10;&#10;fun findWinner(first: Rochambeau, second: Rochambeau): Result {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    findWinner(ROCK, SCISSORS) eq FIRST_WINS&#10;    findWinner(SCISSORS, ROCK) eq SECOND_WINS&#10;    findWinner(PAPER, PAPER) eq DRAW&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package enumerations3&#10;&#10;import enumerations3.Result.*&#10;import enumerations3.Rochambeau.*&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestEnumerationsRochambeau {&#10;    private fun checkResult(first: Rochambeau, second: Rochambeau, expected: Result) {&#10;        Assert.assertEquals(&quot;Wrong answer for 'findWinner($first, $second)':&quot;,&#10;                expected, findWinner(first, second))&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() {&#10;        checkResult(ROCK, SCISSORS, FIRST_WINS)&#10;        checkResult(SCISSORS, ROCK, SECOND_WINS)&#10;        checkResult(PAPER, PAPER, DRAW)&#10;    }&#10;&#10;    @Test&#10;    fun test2FirstWins() {&#10;        checkResult(PAPER, ROCK, FIRST_WINS)&#10;        checkResult(ROCK, SCISSORS, FIRST_WINS)&#10;        checkResult(SCISSORS, PAPER, FIRST_WINS)&#10;    }&#10;&#10;    @Test&#10;    fun test3FirstWins() {&#10;        checkResult(ROCK, PAPER, SECOND_WINS)&#10;        checkResult(SCISSORS, ROCK, SECOND_WINS)&#10;        checkResult(PAPER, SCISSORS, SECOND_WINS)&#10;    }&#10;&#10;    @Test&#10;    fun test4Draw() {&#10;        checkResult(ROCK, ROCK, DRAW)&#10;        checkResult(SCISSORS, SCISSORS, DRAW)&#10;        checkResult(PAPER, PAPER, DRAW)&#10;    }&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570352000" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="149987" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="175302" />
                      <option name="index" value="7" />
                      <option name="name" value="Data Classes" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570989000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Data Classes&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/107298/step/1&quot;&gt;Read &amp;quot;Data Classes&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497852" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/CopyDataClass.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/CopyDataClass.kt" />
                                      <option name="text" value="// DataClasses/CopyDataClass.kt&#10;import atomictest.eq&#10;&#10;data class DetailedContact(&#10;  val name: String,&#10;  val surname: String,&#10;  val number: String,&#10;  val address: String&#10;)&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val contact = DetailedContact(&#10;    &quot;Miffy&quot;,&#10;    &quot;Miller&quot;,&#10;    &quot;1-234-567890&quot;,&#10;    &quot;1600 Amphitheatre Parkway&quot;)&#10;  val newContact = contact.copy(&#10;    number = &quot;098-765-4321&quot;,&#10;    address = &quot;Brandschenkestrasse 110&quot;)&#10;  newContact eq DetailedContact(&#10;    &quot;Miffy&quot;,&#10;    &quot;Miller&quot;,&#10;    &quot;098-765-4321&quot;,&#10;    &quot;Brandschenkestrasse 110&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/DataClasses.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/DataClasses.kt" />
                                      <option name="text" value="// DataClasses/DataClasses.kt&#10;package dataclasses&#10;import atomictest.*&#10;&#10;data class Contact(&#10;  val name: String,&#10;  val number: String&#10;)&#10;&#10;class Person(val name: String)&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  Contact(&quot;Miffy&quot;, &quot;1-234-567890&quot;) eq&#10;  Contact(&quot;Miffy&quot;, &quot;1-234-567890&quot;)&#10;&#10;  // These seem the same, but they're not:&#10;  Person(&quot;Cleo&quot;) neq Person(&quot;Cleo&quot;)&#10;}&#10;/* Sample output:&#10;Contact(name=Miffy, number=1-234-567890)&#10;dataclasses.Person@54bedef2&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Simple.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Simple.kt" />
                                      <option name="text" value="// DataClasses/Simple.kt&#10;import atomictest.eq&#10;&#10;data class Simple(&#10;  val arg1: String,&#10;  var arg2: Int&#10;)&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val s1 = Simple(&quot;Hi&quot;, 29)&#10;  val s2 = Simple(&quot;Hi&quot;, 29)&#10;  s1 eq s2&#10;}&#10;/* Output:&#10;Simple(arg1=Hi, arg2=29)&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570354000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Data Classes (#1)&lt;/h2&gt;&lt;p&gt;Check your understanding of how sets stores instances of data classes.&#10;Guess the size of sets &lt;code&gt;set1&lt;/code&gt; and &lt;code&gt;set2&lt;/code&gt;.&#10;You can easily check your guess by printing the contents of the sets.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Usability+%2F+Data+Classes+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497853" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="422" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="422" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="2" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="454" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="454" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="1" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package dataClasses1&#10;&#10;data class Contact(&#10;        val name: String,&#10;        val number: String&#10;)&#10;&#10;class Person(val name: String)&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val set1 = setOf(Person(&quot;Alice&quot;), Person(&quot;Alice&quot;))&#10;    val set2 = setOf(Contact(&quot;Alice&quot;, &quot;123-456&quot;), Contact(&quot;Alice&quot;, &quot;123-456&quot;))&#10;    set1.size  // 1 or 2? Write you guess below.&#10;    set2.size  // 1 or 2? Write you guess below.&#10;}&#10;&#10;fun getSet1Size(): Int = TODO()&#10;fun getSet2Size(): Int = TODO()" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package dataClasses1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestSetsSize {&#10;    @Test&#10;    fun testSizeOfFirstSet() {&#10;        Assert.assertTrue(&quot;Wrong answer for set1&quot;, getSet1Size() == 2)&#10;    }&#10;&#10;    @Test&#10;    fun testSizeOfSecondSet() {&#10;        Assert.assertTrue(&quot;Wrong answer for set2&quot;, getSet2Size() == 1)&#10;    }&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570355000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Data Classes (#2)&lt;/h2&gt;&lt;p&gt;Implement the &lt;code&gt;createAuthorToBooksMap&lt;/code&gt; function that takes a list of books as &#10;an argument and builds a map from each author to the books he or she authored.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Usability+%2F+Data+Classes+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497854" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="221" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="221" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="val result = mutableMapOf&lt;Author, MutableList&lt;Book&gt;&gt;()&#10;    for (book in books) {&#10;        for (author in book.authors) {&#10;            if (!result.containsKey(author)) {&#10;                result[author] = mutableListOf()&#10;            }&#10;            result.getValue(author) += book&#10;        }&#10;    }&#10;    return result" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package dataClasses2&#10;&#10;import atomictest.eq&#10;&#10;data class Book(val title: String, val authors: List&lt;Author&gt;)&#10;&#10;data class Author(val name: String)&#10;&#10;fun createAuthorToBooksMap(books: List&lt;Book&gt;): Map&lt;Author, List&lt;Book&gt;&gt; {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val books = listOf(&#10;            Book(&quot;Computer Interfacing with Pascal &amp; C&quot;, listOf(Author(&quot;Bruce Eckel&quot;))),&#10;            Book(&quot;Using C++&quot;, listOf(Author(&quot;Bruce Eckel&quot;))),&#10;            Book(&quot;C++ Inside &amp; Out&quot;, listOf(Author(&quot;Bruce Eckel&quot;))),&#10;            Book(&quot;Blackbelt C++: The Masters Collection&quot;, listOf(Author(&quot;Bruce Eckel&quot;))),&#10;            Book(&quot;Thinking in C++: Introduction to Standard C++&quot;, listOf(Author(&quot;Bruce Eckel&quot;))),&#10;            Book(&quot;Thinking in C++, Vol. 2: Practical Programming&quot;, listOf(Author(&quot;Bruce Eckel&quot;), Author(&quot;Chuck Allison&quot;))),&#10;            Book(&quot;Thinking in Java&quot;, listOf(Author(&quot;Bruce Eckel&quot;))),&#10;            Book(&quot;First Steps in Flex&quot;, listOf(Author(&quot;Bruce Eckel&quot;))),&#10;            Book(&quot;Atomic Scala&quot;, listOf(Author(&quot;Bruce Eckel&quot;), Author(&quot;Dianne Marsh&quot;))),&#10;            Book(&quot;On Java 8&quot;, listOf(Author(&quot;Bruce Eckel&quot;))),&#10;            Book(&quot;Kotlin in Action&quot;, listOf(Author(&quot;Dmitry Jemerov&quot;), Author(&quot;Svetlana Isakova&quot;))),&#10;            Book(&quot;Atomic Kotlin&quot;, listOf(Author(&quot;Bruce Eckel&quot;), Author(&quot;Svetlana Isakova&quot;)))&#10;    )&#10;    val authorToBooksMap = createAuthorToBooksMap(books)&#10;    authorToBooksMap.getValue(Author(&quot;Bruce Eckel&quot;)).size eq 11&#10;    authorToBooksMap.getValue(Author(&quot;Svetlana Isakova&quot;)).first().title eq &quot;Kotlin in Action&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package dataClasses2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestBooksExample {&#10;    @Test&#10;    fun test2SimpleOneBookOneAuthor() {&#10;        val book = Book(&quot;Book&quot;, listOf(Author(&quot;Author&quot;)))&#10;        val list = listOf(book)&#10;        Assert.assertEquals(&quot;Wrong result for $list:&quot;,&#10;                mapOf(Author(&quot;Author&quot;) to listOf(book)),&#10;                createAuthorToBooksMap(list))&#10;    }&#10;&#10;    @Test&#10;    fun test2SimpleOneBookTwoAuthors() {&#10;        val book = Book(&quot;Book&quot;, listOf(Author(&quot;first author&quot;), Author(&quot;second author&quot;)))&#10;        val list = listOf(book)&#10;        Assert.assertEquals(&quot;Wrong result for $list:&quot;,&#10;                mapOf(Author(&quot;first author&quot;) to listOf(book),&#10;                        Author(&quot;second author&quot;) to listOf(book)),&#10;                createAuthorToBooksMap(list))&#10;    }&#10;&#10;    @Test&#10;    fun test2SimpleOneAuthorTwoBook() {&#10;        val list = listOf(Book(&quot;first Book&quot;, listOf(Author(&quot;Author&quot;))),&#10;                Book(&quot;second Book&quot;, listOf(Author(&quot;Author&quot;))))&#10;        Assert.assertEquals(&quot;Wrong result for $list:&quot;,&#10;                mapOf(Author(&quot;Author&quot;) to list),&#10;                createAuthorToBooksMap(list))&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() {&#10;        val bruce = Author(&quot;Bruce Eckel&quot;)&#10;        val chuck = Author(&quot;Chuck Allison&quot;)&#10;        val dianne = Author(&quot;Dianne Marsh&quot;)&#10;        val dmitry = Author(&quot;Dmitry Jemerov&quot;)&#10;        val svetlana = Author(&quot;Svetlana Isakova&quot;)&#10;&#10;        val first = Book(&quot;Computer Interfacing with Pascal &amp; C&quot;, listOf(bruce))&#10;        val second = Book(&quot;Using C++&quot;, listOf(bruce))&#10;        val third = Book(&quot;C++ Inside &amp; Out&quot;, listOf(bruce))&#10;        val fourth = Book(&quot;Blackbelt C++: The Masters Collection&quot;, listOf(bruce))&#10;        val thinkingInCPlusPlus = Book(&quot;Thinking in C++: Introduction to Standard C++&quot;, listOf(bruce))&#10;        val thinkingInCPlusPlusVolume2 = Book(&quot;Thinking in C++, Vol. 2: Practical Programming&quot;, listOf(bruce, chuck))&#10;        val thinkingInJava = Book(&quot;Thinking in Java&quot;, listOf(bruce))&#10;        val flex = Book(&quot;First Steps in Flex&quot;, listOf(bruce))&#10;        val atomicScala = Book(&quot;Atomic Scala&quot;, listOf(bruce, dianne))&#10;        val onJava8 = Book(&quot;On Java 8&quot;, listOf(bruce))&#10;        val kotlinInAction = Book(&quot;Kotlin in Action&quot;, listOf(dmitry, svetlana))&#10;        val atomicKotlin = Book(&quot;Atomic Kotlin&quot;, listOf(bruce, svetlana))&#10;        val books = listOf(&#10;                first, second, third, fourth,&#10;                thinkingInCPlusPlus,&#10;                thinkingInCPlusPlusVolume2,&#10;                thinkingInJava,&#10;                flex,&#10;                atomicScala,&#10;                onJava8,&#10;                kotlinInAction,&#10;                atomicKotlin&#10;        )&#10;        val expected = mapOf(&#10;                bruce to listOf(first, second, third, fourth,&#10;                        thinkingInCPlusPlus, thinkingInCPlusPlusVolume2,&#10;                        thinkingInJava, flex, atomicScala, onJava8, atomicKotlin),&#10;                chuck to listOf(thinkingInCPlusPlusVolume2),&#10;                dianne to listOf(atomicScala),&#10;                dmitry to listOf(kotlinInAction),&#10;                svetlana to listOf(kotlinInAction, atomicKotlin)&#10;        )&#10;        val actual = createAuthorToBooksMap(books)&#10;        Assert.assertEquals(&quot;Wrong result for sample:&quot;, expected, actual)&#10;    }&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570356000" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="149988" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="175303" />
                      <option name="index" value="8" />
                      <option name="name" value="Nullable Types" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570994000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Nullable Types&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/107299/step/1&quot;&gt;Read &amp;quot;Nullable Types&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497855" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Dereference.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Dereference.kt" />
                                      <option name="text" value="// NullableTypes/Dereference.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val s1: String = &quot;abc&quot;&#10;  val s2: String? = s1&#10;&#10;  s1.length eq 3          // [1]&#10;  // Doesn't compile:&#10;  // s2.length            // [2]&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ExplicitCheck.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ExplicitCheck.kt" />
                                      <option name="text" value="// NullableTypes/ExplicitCheck.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val s: String? = &quot;abc&quot;&#10;  if (s != null)&#10;    s.length eq 3&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/NullInMaps.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/NullInMaps.kt" />
                                      <option name="text" value="// NullableTypes/NullInMaps.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val map = mapOf(0 to &quot;yes&quot;, 1 to &quot;no&quot;)&#10;  map[2] eq null&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/NullableInMap.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/NullableInMap.kt" />
                                      <option name="text" value="// NullableTypes/NullableInMap.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val map = mapOf(0 to &quot;yes&quot;, 1 to &quot;no&quot;)&#10;  val first: String? = map[0]&#10;  val second: String? = map[2]&#10;  first eq &quot;yes&quot;&#10;  second eq null&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/NullableTypes.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/NullableTypes.kt" />
                                      <option name="text" value="// NullableTypes/NullableTypes.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val s1 = &quot;abc&quot;            // [1]&#10;&#10;  // Compile-time error:&#10;  // val s2: String = null  // [2]&#10;&#10;  // Nullable definitions:&#10;  val s3: String? = null    // [3]&#10;  val s4: String? = s1&#10;&#10;  // Compile-time error:&#10;  // val s5: String = s4    // [4]&#10;  val s6 = s4               // [5]&#10;&#10;  s1 eq &quot;abc&quot;&#10;  s3 eq null&#10;  s4 eq &quot;abc&quot;&#10;  s6 eq &quot;abc&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570359000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Nullable Types (#1)&lt;/h2&gt;&lt;p&gt;Change &lt;code&gt;takeHamsterByName&lt;/code&gt; function in the &lt;code&gt;Cage&lt;/code&gt; class so that &#10;it returned &lt;code&gt;null&lt;/code&gt; if the cage doesn't contain a hamster with the given name.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Usability+%2F+Nullable+Types+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497856" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="565" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="565" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="hamsters[name]" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package nullableTypes1&#10;&#10;import atomictest.eq&#10;&#10;class Hamster(val name: String) {&#10;    override fun toString(): String {&#10;        return &quot;Hamster('$name')&quot;&#10;    }&#10;}&#10;&#10;class Cage(private val maxCapacity: Int) {&#10;    private val hamsters: MutableMap&lt;String, Hamster&gt; =&#10;            mutableMapOf()&#10;&#10;    fun put(hamster: Hamster): Boolean =&#10;            if (hamsters.size == maxCapacity)&#10;                false&#10;            else {&#10;                hamsters[hamster.name] = hamster&#10;                true&#10;            }&#10;&#10;    fun takeHamsterByName(name: String): Hamster? =&#10;            TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val cage = Cage(1)&#10;    cage.takeHamsterByName(&quot;Alice&quot;) eq null&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package nullableTypes1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestHamstersAndNullableTypes {&#10;    @Test&#10;    fun test1SampleSuccess() {&#10;        val cage = Cage(1)&#10;        cage.put(Hamster(&quot;Alice&quot;))&#10;        Assert.assertEquals(&quot;'takeHamsterByName' should return a hamster with a given name&quot;,&#10;                &quot;Hamster('Alice')&quot;, cage.takeHamsterByName(&quot;Alice&quot;).toString())&#10;    }&#10;&#10;    @Test&#10;    fun test2SampleNoHamster() {&#10;        val cage = Cage(1)&#10;        Assert.assertNull(&quot;Expected null when cage doesn't contain a hamster with a given name:&quot;,&#10;                cage.takeHamsterByName(&quot;Alice&quot;))&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570359000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Nullable Types (#1)&lt;/h2&gt;&lt;p&gt;Implement the &lt;code&gt;countHexadecimalCodes&lt;/code&gt; function which counts the number &#10;of times a hexadecimal code occurs in the &lt;code&gt;codes&lt;/code&gt; list.&#10;It returns a map from an integer corresponding to each hexadecimal code in &#10;&lt;code&gt;codes&lt;/code&gt; to a number of its occurrences in &lt;code&gt;codes&lt;/code&gt;.&#10;The function ignores the strings in input which don't represent hexadecimal&#10;codes.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Usability+%2F+Nullable+Types+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497857" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="To convert a string representing a hexadecimal code to a number use &#10;the `toIntOrNull(radix: Int)` extension function on String, passing &#10;`16` as an argument." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="114" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="114" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="val result = mutableMapOf&lt;Int, Int&gt;()&#10;    for (code in codes) {&#10;        val value = code.toIntOrNull(16)&#10;        if (value != null) {&#10;            val occurrences = result[value]&#10;            result[value] = if (occurrences == null) 1 else occurrences + 1&#10;        }&#10;    }&#10;    return result" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package nullableTypes2&#10;&#10;import atomictest.eq&#10;&#10;fun countHexadecimalCodes(codes: List&lt;String&gt;): Map&lt;Int, Int&gt; {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    countHexadecimalCodes(listOf(&#10;            &quot;1&quot;, &quot;3&quot;, &quot;7&quot;, &quot;8&quot;, &quot;A&quot;, &quot;B&quot;, &quot;F&quot;)) eq&#10;            mapOf(1 to 1, 3 to 1, 7 to 1, 8 to 1, 10 to 1, 11 to 1, 15 to 1)&#10;&#10;    countHexadecimalCodes(listOf(&quot;1A&quot;, &quot;1A&quot;, &quot;1A&quot;)) eq&#10;            mapOf(26 to 3)&#10;&#10;    countHexadecimalCodes(listOf(&quot;Q&quot;)) eq mapOf()&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package nullableTypes2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestCountingHexadecimalCodes {&#10;    private fun testCountingHexadecimalCodes(codes: List&lt;String&gt;, expected: Map&lt;Int, Int&gt;) {&#10;        Assert.assertEquals(&quot;Wrong result for $codes:&quot;, expected, countHexadecimalCodes(codes))&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = testCountingHexadecimalCodes(&#10;            listOf(&quot;1&quot;, &quot;3&quot;, &quot;7&quot;, &quot;8&quot;, &quot;A&quot;, &quot;B&quot;, &quot;F&quot;),&#10;            mapOf(1 to 1, 3 to 1, 7 to 1, 8 to 1, 10 to 1, 11 to 1, 15 to 1))&#10;&#10;    @Test&#10;    fun test2Sample() = testCountingHexadecimalCodes(listOf(&quot;1A&quot;, &quot;1A&quot;, &quot;1A&quot;), mapOf(26 to 3))&#10;&#10;    @Test&#10;    fun test3Sample() = testCountingHexadecimalCodes(listOf(&quot;Q&quot;), mapOf())&#10;&#10;    @Test&#10;    fun test4() = testCountingHexadecimalCodes(listOf(&quot;11&quot;, &quot;11&quot;, &quot;11&quot;), mapOf(17 to 3))&#10;&#10;    @Test&#10;    fun test5() = testCountingHexadecimalCodes(listOf(&quot;AB&quot;, &quot;1AAB&quot;, &quot;23&quot;), mapOf(171 to 1, 6827 to 1, 35 to 1))&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570360000" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="149989" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="175304" />
                      <option name="index" value="9" />
                      <option name="name" value="Safe Calls &amp; the Elvis Operator" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538570997000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Safe Calls &amp;amp; the Elvis Operator&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/107300/step/1&quot;&gt;Read &amp;quot;Safe Calls &amp;amp; the Elvis Operator&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497858" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/ChainedCalls.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ChainedCalls.kt" />
                                      <option name="text" value="// SafeCallsAndElvis/ChainedCalls.kt&#10;package safecalls&#10;import atomictest.eq&#10;&#10;class Person(&#10;  val name: String,&#10;  var friend: Person? = null&#10;)&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val alice = Person(&quot;Alice&quot;)&#10;  alice.friend?.friend?.name eq null  // [1]&#10;&#10;  val bob = Person(&quot;Bob&quot;)&#10;  val charlie = Person(&quot;Charlie&quot;, bob)&#10;  bob.friend = charlie&#10;  bob.friend?.friend?.name eq &quot;Bob&quot;   // [2]&#10;&#10;  (alice.friend?.friend?.name&#10;    ?: &quot;Unknown&quot;) eq &quot;Unknown&quot;        // [3]&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/DereferenceNull.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/DereferenceNull.kt" />
                                      <option name="text" value="// SafeCallsAndElvis/DereferenceNull.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val s: String? = null&#10;  // Won't compile:&#10;  // s.length        // [1]&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ElvisCall.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ElvisCall.kt" />
                                      <option name="text" value="// SafeCallsAndElvis/ElvisCall.kt&#10;package elvisoperator&#10;import atomictest.eq&#10;&#10;fun checkLength(s: String?, expected: Int) {&#10;  val length1 =&#10;    if (s != null) s.length else 0  // [1]&#10;  val length2 = s?.length ?: 0      // [2]&#10;  length1 eq expected&#10;  length2 eq expected&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  checkLength(&quot;abc&quot;, 3)&#10;  checkLength(null, 0)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ElvisOperator.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ElvisOperator.kt" />
                                      <option name="text" value="// SafeCallsAndElvis/ElvisOperator.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val s1: String? = &quot;abc&quot;&#10;  (s1 ?: &quot;---&quot;) eq &quot;abc&quot;&#10;&#10;  val s2: String? = null&#10;  (s2 ?: &quot;---&quot;) eq &quot;---&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/SafeCall.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/SafeCall.kt" />
                                      <option name="text" value="// SafeCallsAndElvis/SafeCall.kt&#10;package safecalls&#10;import atomictest.eq&#10;&#10;fun checkLength(s: String?, expected: Int?) {&#10;  val length1 =&#10;    if (s != null) s.length else null   // [1]&#10;  val length2 = s?.length               // [2]&#10;  length1 eq expected&#10;  length2 eq expected&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  checkLength(&quot;abc&quot;, 3)&#10;  checkLength(null, null)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/SafeOperation.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/SafeOperation.kt" />
                                      <option name="text" value="// SafeCallsAndElvis/SafeOperation.kt&#10;&#10;fun String.echo() {&#10;  println(this.toUpperCase())&#10;  println(this)&#10;  println(this.toLowerCase())&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val s1: String? = &quot;Howdy!&quot;&#10;  s1?.echo()                     // [1]&#10;  val s2: String? = null&#10;  s2?.echo()                     // [2]&#10;}&#10;/* Output:&#10;HOWDY!&#10;Howdy!&#10;howdy!&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570363000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Safe Calls &amp;amp; the Elvis Operator (#1)&lt;/h2&gt;&lt;p&gt;Implement the extension function &lt;code&gt;comesFromMunich&lt;/code&gt; checking that a client's city&#10;is &amp;quot;Munich&amp;quot;. If the city is unspecified the function should return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Usability+%2F+Safe+Calls+%26+the+Elvis+Operator+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497859" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="422" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="422" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="&#10;        personalInfo?.address?.city == &quot;Munich&quot;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package safeCallsandTheElvisOperator1&#10;&#10;import atomictest.eq&#10;&#10;data class Client(&#10;        val name: String,&#10;        val personalInfo: PersonalInfo? = null)&#10;&#10;data class PersonalInfo(&#10;        val email: String? = null,&#10;        val address: Address? = null)&#10;&#10;data class Address(&#10;        val country: String? = null,&#10;        val city: String? = null,&#10;        val street: String? = null)&#10;&#10;fun Client.comesFromMunich(): Boolean = TODO()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val alice = Client(&quot;Alice&quot;,&#10;            PersonalInfo(address = Address(&quot;Germany&quot;, &quot;Munich&quot;)))&#10;    alice.comesFromMunich() eq true&#10;    Client(&quot;Bob&quot;).comesFromMunich() eq false&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package safeCallsandTheElvisOperator1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestClientFromMunich {&#10;    @Test&#10;    fun test1SampleFromMunich() {&#10;        val client = Client(&quot;Alice&quot;,&#10;                PersonalInfo(address = Address(&quot;Germany&quot;, &quot;Munich&quot;)))&#10;        Assert.assertTrue(&quot;Client $client comes from Munich&quot;,&#10;                client.comesFromMunich())&#10;    }&#10;&#10;    @Test&#10;    fun test2SampleNotFromMunich() {&#10;        val client = Client(&quot;Bob&quot;)&#10;        Assert.assertFalse(&quot;Client $client doesn't come from Munich&quot;,&#10;                client.comesFromMunich())&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570363000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Safe Calls &amp;amp; the Elvis Operator (#2)&lt;/h2&gt;&lt;p&gt;Implement the extension function &lt;code&gt;getFullInfo()&lt;/code&gt; returning a string value.&#10;It should list the properties of the class as in the example below and&#10;add &lt;code&gt;&amp;quot;Unspecified&amp;quot;&lt;/code&gt; if the corresponding value is &lt;code&gt;null&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;name: Alice&#10;email: alice@gmail.com&#10;country: Germany&#10;city: Munich&#10;street: Unspecified&#10;&lt;/code&gt;&lt;/pre&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Usability+%2F+Safe+Calls+%26+the+Elvis+Operator+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497860" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="0" />
                                                <option name="offset" value="360" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="0" />
                                            <option name="offset" value="360" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="" />
                                            <option name="possibleAnswer" value="fun checkUnspecified(s: String?) = s&#10;        ?: &quot;Unspecified&quot;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="397" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="397" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value=" &quot;&quot;&quot;&#10;       |name: $name&#10;       |email: ${checkUnspecified(personalInfo?.email)}&#10;       |country: ${checkUnspecified(personalInfo?.address?.country)}&#10;       |city: ${checkUnspecified(personalInfo?.address?.city)}&#10;       |street: ${checkUnspecified(personalInfo?.address?.street)}&#10;    &quot;&quot;&quot;.trimMargin()" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package safeCallsandTheElvisOperator2&#10;&#10;data class Client(&#10;        val name: String,&#10;        val personalInfo: PersonalInfo? = null)&#10;&#10;data class PersonalInfo(&#10;        val email: String? = null,&#10;        val address: Address? = null)&#10;&#10;data class Address(&#10;        val country: String? = null,&#10;        val city: String? = null,&#10;        val street: String? = null)&#10;&#10;&#10;&#10;fun Client.getFullInfo(): String = TODO()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val alice = Client(&quot;Alice&quot;,&#10;            PersonalInfo(&#10;                    email = &quot;alice@gmail.com&quot;,&#10;                    address = Address(&quot;Germany&quot;, &quot;Munich&quot;)))&#10;    println(alice.getFullInfo())&#10;    println(&quot;---&quot;)&#10;    println(Client(&quot;Bob&quot;).getFullInfo())&#10;}&#10;/* Output:&#10;name: Alice&#10;email: alice@gmail.com&#10;country: Germany&#10;city: Munich&#10;street: Unspecified&#10;---&#10;name: Bob&#10;email: Unspecified&#10;country: Unspecified&#10;city: Unspecified&#10;street: Unspecified&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package safeCallsandTheElvisOperator2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestClientFullInfo {&#10;    private fun checkFullInfoRepresentation(client: Client, fullInfo: String) {&#10;        Assert.assertEquals(&quot;Wrong full info representation:&quot;, fullInfo.trimMargin(), client.getFullInfo())&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() {&#10;        checkFullInfoRepresentation(&#10;                Client(&quot;Alice&quot;, PersonalInfo(&#10;                        email = &quot;alice@gmail.com&quot;,&#10;                        address = Address(&quot;Germany&quot;, &quot;Munich&quot;))),&#10;                &quot;&quot;&quot;&#10;                |name: Alice&#10;                |email: alice@gmail.com&#10;                |country: Germany&#10;                |city: Munich&#10;                |street: Unspecified&quot;&quot;&quot;)&#10;    }&#10;&#10;    @Test&#10;    fun test2Sample() {&#10;        checkFullInfoRepresentation(Client(&quot;Bob&quot;), &quot;&quot;&quot;&#10;            |name: Bob&#10;            |email: Unspecified&#10;            |country: Unspecified&#10;            |city: Unspecified&#10;            |street: Unspecified&quot;&quot;&quot;.trimMargin()&#10;        )&#10;    }&#10;&#10;    @Test&#10;    fun test3() {&#10;        checkFullInfoRepresentation(&#10;                Client(&quot;Harry&quot;, PersonalInfo(&#10;                        address = Address(street = &quot;4 Privet Drive&quot;)&#10;                )), &quot;&quot;&quot;&#10;                |name: Harry&#10;                |email: Unspecified&#10;                |country: Unspecified&#10;                |city: Unspecified&#10;                |street: 4 Privet Drive&quot;&quot;&quot;.trimMargin())&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570364000" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="149990" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="175305" />
                      <option name="index" value="10" />
                      <option name="name" value="Non-null Assertions" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538571001000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Non-&lt;code&gt;null&lt;/code&gt; Assertions&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/107301/step/1&quot;&gt;Read &amp;quot;Non-&lt;code&gt;null&lt;/code&gt; Assertions&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497861" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/NonNullAssert.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/NonNullAssert.kt" />
                                      <option name="text" value="// NonNullAssertions/NonNullAssert.kt&#10;import atomictest.*&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val s1: String? = &quot;abc&quot;&#10;  s1!! eq &quot;abc&quot;&#10;&#10;  val s2: String? = null&#10;  // Compiles, but produces a&#10;  // KotlinNullPointerException:&#10;  capture {&#10;    val s3: String = s2!!&#10;  } eq &quot;KotlinNullPointerException&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/NonNullAssertCall.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/NonNullAssertCall.kt" />
                                      <option name="text" value="// NonNullAssertions/NonNullAssertCall.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val s1: String? = &quot;abc&quot;&#10;  s1!!.length eq 3&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ValueFromMap.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ValueFromMap.kt" />
                                      <option name="text" value="// NonNullAssertions/ValueFromMap.kt&#10;import atomictest.*&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val map = mapOf(1 to &quot;one&quot;)&#10;  map[1]!!.toUpperCase() eq &quot;ONE&quot;&#10;  map.getValue(1).toUpperCase() eq &quot;ONE&quot;&#10;  capture {&#10;    map[2]!!.toUpperCase()&#10;  } eq &quot;KotlinNullPointerException&quot;&#10;  capture {&#10;    map.getValue(2).toUpperCase()&#10;  } eq &quot;NoSuchElementException: &quot; +&#10;    &quot;Key 2 is missing in the map.&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570367000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Non-&lt;code&gt;null&lt;/code&gt; Assertions (#1)&lt;/h2&gt;&lt;p&gt;Implement the function &lt;code&gt;sumOfFirstAndLast&lt;/code&gt; which returns a sum of the first and&#10;the last elements in a list of integers. If the list is empty, zero should&#10;be returned, if the list consists of one element only, this element should&#10;be returned as a result.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Usability+%2F+Non-null+Assertions+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497862" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="96" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="96" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="&#10;        when {&#10;            list.isEmpty() -&gt; 0&#10;            list.size == 1 -&gt; list.first()&#10;            else -&gt; list.first() + list.last()&#10;        }" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package nonnullAssertions1&#10;&#10;import atomictest.eq&#10;&#10;fun sumOfFirstAndLast(list: List&lt;Int&gt;): Int = TODO()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    sumOfFirstAndLast(listOf()) eq 0&#10;    sumOfFirstAndLast(listOf(1)) eq 1&#10;    sumOfFirstAndLast(listOf(1, 2)) eq 3&#10;    sumOfFirstAndLast(listOf(1, 2, 3)) eq 4&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package nonnullAssertions1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestNonNullAssertion {&#10;    private fun testResult(list: List&lt;Int&gt;, expected: Int) {&#10;        Assert.assertEquals(&quot;Wrong result for $list:&quot;, expected, sumOfFirstAndLast(list))&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = testResult(listOf(), 0)&#10;&#10;    @Test&#10;    fun test2Sample() = testResult(listOf(1), 1)&#10;&#10;    @Test&#10;    fun test3Sample() = testResult(listOf(1, 2), 3)&#10;&#10;    @Test&#10;    fun test4Sample() = testResult(listOf(1, 2, 3), 4)&#10;&#10;    @Test&#10;    fun test5() = testResult(listOf(1, 7, 11), 12)&#10;&#10;    @Test&#10;    fun test6() = testResult(listOf(11), 11)&#10;&#10;    @Test&#10;    fun test7() = testResult(listOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 11)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570368000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Non-&lt;code&gt;null&lt;/code&gt; Assertions (#2)&lt;/h2&gt;&lt;p&gt;Implement the &lt;code&gt;maxEqualsMinInAbsoluteValue&lt;/code&gt; function which takes &#10;a list of integers as an argument and checks that the maximum value &#10;in the list equals the minimum value in an absolute value.&#10;If the list is empty, &lt;code&gt;false&lt;/code&gt; should be returned.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Usability+%2F+Non-null+Assertions+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497863" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="147" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="147" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="if (list.isEmpty()) return false&#10;    return list.max()!!.absoluteValue == list.min()!!.absoluteValue" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package nonnullAssertions2&#10;&#10;import atomictest.eq&#10;import kotlin.math.absoluteValue&#10;&#10;fun maxEqualsMinInAbsoluteValue(list: List&lt;Int&gt;): Boolean {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    maxEqualsMinInAbsoluteValue(listOf(-10, 1, 10)) eq true&#10;    maxEqualsMinInAbsoluteValue(listOf(10, 10)) eq true&#10;    maxEqualsMinInAbsoluteValue(listOf(-10, 1)) eq false&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package nonnullAssertions2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestNonNullAssertion {&#10;    private fun testResult(list: List&lt;Int&gt;, expected: Boolean) {&#10;        Assert.assertEquals(&quot;Wrong result for $list:&quot;, expected, maxEqualsMinInAbsoluteValue(list))&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = testResult(listOf(-10, 1, 10), true)&#10;&#10;    @Test&#10;    fun test2Sample() = testResult(listOf(10, 10), true)&#10;&#10;    @Test&#10;    fun test3Sample() = testResult(listOf(-10, 1), false)&#10;&#10;    @Test&#10;    fun test4() = testResult(listOf(-100, 100, 100), true)&#10;&#10;    @Test&#10;    fun test5() = testResult(listOf(-10, -5, 5, -1, 1), false)&#10;&#10;    @Test&#10;    fun test6() = testResult(listOf(-5, 5, -1, 1, 6), false)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570368000" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="149991" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="175306" />
                      <option name="index" value="11" />
                      <option name="name" value="Extensions for Nullable Types" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538571007000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Extensions for Nullable Types&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/107302/step/1&quot;&gt;Read &amp;quot;Extensions for Nullable Types&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497864" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Definition.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Definition.kt" />
                                      <option name="text" value="// NullableExtensions/Definition.kt&#10;import atomictest.eq&#10;&#10;fun String?.isNullOrEmpty(): Boolean =&#10;  this == null || this.isEmpty()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  &quot;&quot;.isNullOrEmpty() eq true&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/NullableParameter.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/NullableParameter.kt" />
                                      <option name="text" value="// NullableExtensions/NullableParameter.kt&#10;import atomictest.eq&#10;&#10;fun isNullOrEmpty(s: String?): Boolean =&#10;  s == null || s.isEmpty()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  isNullOrEmpty(null) eq true&#10;  isNullOrEmpty(&quot;&quot;) eq true&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/StringIsNullOr.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/StringIsNullOr.kt" />
                                      <option name="text" value="// NullableExtensions/StringIsNullOr.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val s1: String? = null&#10;  s1.isNullOrEmpty() eq true&#10;  s1.isNullOrBlank() eq true&#10;&#10;  val s2 = &quot;&quot;&#10;  s2.isNullOrEmpty() eq true&#10;  s2.isNullOrBlank() eq true&#10;&#10;  val s3: String = &quot; \t\n&quot;&#10;  s3.isNullOrEmpty() eq false&#10;  s3.isNullOrBlank() eq true&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570371000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Extensions for Nullable Types (#1)&lt;/h2&gt;&lt;p&gt;Implement the extension function &lt;code&gt;orEmpty&lt;/code&gt; that returns the string if it is not &#10;&lt;code&gt;null&lt;/code&gt;, or the empty string otherwise.&lt;/p&gt;&lt;p&gt;The Kotlin standard library contains the same function.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Usability+%2F+Extensions+for+Nullable+Types+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497865" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="91" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="91" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="if (this != null) this else &quot;&quot;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package extensionsforNullableTypes1&#10;&#10;import atomictest.eq&#10;&#10;fun String?.orEmpty(): String = TODO()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;&#10;    null.orEmpty() eq &quot;&quot;&#10;&#10;    &quot;abc&quot;.orEmpty() eq &quot;abc&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package extensionsforNullableTypes1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestOrEmpty {&#10;    private fun checkExpectedValue(s: String?, value: String) {&#10;        Assert.assertEquals(&quot;Wrong value for $s:&quot;, value, s.orEmpty())&#10;    }&#10;&#10;    @Test fun test1Sample() = checkExpectedValue(null, &quot;&quot;)&#10;&#10;    @Test fun test2Sample() = checkExpectedValue(&quot;abc&quot;, &quot;abc&quot;)&#10;&#10;    @Test fun test3() = checkExpectedValue(&quot;s&quot;, &quot;s&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570372000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Extensions for Nullable Types (#2)&lt;/h2&gt;&lt;p&gt;Implement &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; functions on nullable Boolean which take another &#10;nullable Boolean as an argument and return &lt;code&gt;null&lt;/code&gt; if either the receiver or &#10;the argument is null. For non-null values these functions should behave &#10;similarly to regular &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; operations.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Usability+%2F+Extensions+for+Nullable+Types+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497866" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="112" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="112" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="if (this != null &amp;&amp; that != null) this &amp;&amp; that else null" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="172" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="172" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="if (this != null &amp;&amp; that != null) this || that else null" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package extensionsforNullableTypes2&#10;&#10;import atomictest.eq&#10;&#10;fun Boolean?.and(that: Boolean?): Boolean? =&#10;        TODO()&#10;&#10;fun Boolean?.or(that: Boolean?): Boolean? =&#10;        TODO()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val b = true&#10;    b.and(null) eq null&#10;    null.or(b) eq null&#10;    b.or(false) eq true&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package extensionsforNullableTypes2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestExtensionsForNullable {&#10;&#10;    private fun checkValues(receiver: Boolean?, argument: Boolean?) {&#10;        Assert.assertEquals(&quot;Wrong result for $receiver.and($argument)&quot;,&#10;                receiver.and(argument), expectedAnd(receiver, argument))&#10;        Assert.assertEquals(&quot;Wrong result for $receiver.or($argument)&quot;,&#10;                receiver.or(argument), expectedOr(receiver, argument))&#10;    }&#10;&#10;    private fun expectedAnd(receiver: Boolean?, argument: Boolean?): Boolean? =&#10;            if (receiver != null &amp;&amp; argument != null) receiver &amp;&amp; argument else null&#10;&#10;    private fun expectedOr(receiver: Boolean?, argument: Boolean?): Boolean? =&#10;            if (receiver != null &amp;&amp; argument != null) receiver || argument else null&#10;&#10;    @Test&#10;    fun testAll() {&#10;        val booleans = listOf(true, false)&#10;        for (first in booleans) {&#10;            for (second in booleans) {&#10;                checkValues(first, second)&#10;            }&#10;        }&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570373000" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="149992" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="175307" />
                      <option name="index" value="12" />
                      <option name="name" value="Introduction to Generics" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538571012000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Introduction to Generics&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/107303/step/1&quot;&gt;Read &amp;quot;Introduction to Generics&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497867" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/AnyInstead.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/AnyInstead.kt" />
                                      <option name="text" value="// IntroGenerics/AnyInstead.kt&#10;package introgenerics&#10;import atomictest.eq&#10;&#10;class AnyHolder(private val value: Any) {&#10;  fun getValue(): Any = value&#10;}&#10;&#10;class Dog {&#10;  fun bark() = &quot;Ruff!&quot;&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val holder = AnyHolder(Dog())&#10;  val any = holder.getValue()&#10;  // Won't compile:&#10;  // any.bark()&#10;&#10;  val genericHolder = GenericHolder(Dog())&#10;  val dog = genericHolder.getValue()&#10;  dog.bark() eq &quot;Ruff!&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/GenericFunction.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/GenericFunction.kt" />
                                      <option name="text" value="// IntroGenerics/GenericFunction.kt&#10;package introgenerics&#10;import atomictest.eq&#10;&#10;fun &lt;T&gt; identity(arg: T): T = arg&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  identity(&quot;Yellow&quot;) eq &quot;Yellow&quot;&#10;  identity(1) eq 1&#10;  identity(Dog()).bark() eq &quot;Ruff!&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/GenericHolder.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/GenericHolder.kt" />
                                      <option name="text" value="// IntroGenerics/GenericHolder.kt&#10;package introgenerics&#10;import atomictest.eq&#10;&#10;class GenericHolder&lt;T&gt;(              // [1]&#10;  private val value: T&#10;) {&#10;  fun getValue(): T = value&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val h1 = GenericHolder(Automobile(&quot;Ford&quot;))&#10;  val a: Automobile = h1.getValue()  // [2]&#10;  a eq &quot;Automobile(brand=Ford)&quot;&#10;&#10;  val h2 = GenericHolder(1)&#10;  val i: Int = h2.getValue()         // [3]&#10;  i eq 1&#10;&#10;  val h3 = GenericHolder(&quot;Chartreuse&quot;)&#10;  val s: String = h3.getValue()      // [4]&#10;  s eq &quot;Chartreuse&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/GenericListExtensions.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/GenericListExtensions.kt" />
                                      <option name="text" value="// IntroGenerics/GenericListExtensions.kt&#10;package introgenerics&#10;import atomictest.eq&#10;&#10;fun &lt;T&gt; List&lt;T&gt;.first(): T {&#10;  if (isEmpty())&#10;    throw NoSuchElementException(&quot;Empty List&quot;)&#10;  return this[0]&#10;}&#10;&#10;fun &lt;T&gt; List&lt;T&gt;.firstOrNull(): T? {&#10;  return if (isEmpty()) null else this[0]&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  listOf(1, 2, 3).first() eq 1&#10;&#10;  val i: Int? =                     // [1]&#10;    listOf(1, 2, 3).firstOrNull()&#10;  i eq 1&#10;&#10;  val s: String? =                  // [2]&#10;    listOf&lt;String&gt;().firstOrNull()&#10;  s eq null&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/RigidHolder.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/RigidHolder.kt" />
                                      <option name="text" value="// IntroGenerics/RigidHolder.kt&#10;package introgenerics&#10;import atomictest.eq&#10;&#10;data class Automobile(val brand: String)&#10;&#10;class RigidHolder(private val a: Automobile) {&#10;  fun getValue() = a&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val holder = RigidHolder(Automobile(&quot;BMW&quot;))&#10;  holder.getValue() eq&#10;    &quot;Automobile(brand=BMW)&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570375000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Introduction to Generics (#1)&lt;/h2&gt;&lt;p&gt;Implement the &lt;code&gt;secondOrNull&lt;/code&gt; and &lt;code&gt;penultimateOrNull&lt;/code&gt; extension functions &#10;on a &lt;code&gt;List&lt;/code&gt; returning a second and second last elements accordingly or &#10;&lt;code&gt;null&lt;/code&gt; if the list contains less than two elements.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Usability+%2F+Introduction+to+Generics+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497868" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="43" />
                                                <option name="offset" value="55" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="43" />
                                            <option name="offset" value="55" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="fun &lt;T&gt; List&lt;T&gt;.secondOrNull(): T? = TODO()" />
                                            <option name="possibleAnswer" value="fun &lt;T&gt; List&lt;T&gt;.secondOrNull(): T? = getOrNull(1)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="48" />
                                                <option name="offset" value="100" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="48" />
                                            <option name="offset" value="100" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="fun &lt;T&gt; List&lt;T&gt;.penultimateOrNull(): T? = TODO()" />
                                            <option name="possibleAnswer" value="fun &lt;T&gt; List&lt;T&gt;.penultimateOrNull(): T? = getOrNull(size - 2)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package introductiontoGenerics1&#10;&#10;import atomictest.eq&#10;&#10;fun &lt;T&gt; List&lt;T&gt;.secondOrNull(): T? = TODO()&#10;&#10;fun &lt;T&gt; List&lt;T&gt;.penultimateOrNull(): T? = TODO()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val ints = listOf(1, 2, 3)&#10;    ints.secondOrNull() eq 2&#10;    ints.penultimateOrNull() eq 2&#10;&#10;    val strings = listOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;)&#10;    strings.secondOrNull() eq &quot;b&quot;&#10;    strings.penultimateOrNull() eq &quot;c&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package introductiontoGenerics1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestSecond {&#10;    private fun &lt;T&gt; checkSecondFunctions(list: List&lt;T&gt;, second: T?, penultimate: T?) {&#10;        Assert.assertEquals(&quot;Wrong `second` element for $list:&quot;,&#10;                list.secondOrNull(), second)&#10;        Assert.assertEquals(&quot;Wrong `penultimate` element for $list:&quot;,&#10;                list.penultimateOrNull(), penultimate)&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() {&#10;        checkSecondFunctions(listOf(1, 2, 3), 2, 2)&#10;    }&#10;&#10;    @Test&#10;    fun test2Sample() {&#10;        checkSecondFunctions(listOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;), &quot;b&quot;, &quot;c&quot;)&#10;    }&#10;&#10;    @Test&#10;    fun test3() {&#10;        checkSecondFunctions(listOf('a', 'b', 'c', 'd', 'e', 'f', 'x', 'y', 'z'), 'b', 'y')&#10;    }&#10;&#10;    @Test&#10;    fun test4OneElement() {&#10;        checkSecondFunctions(listOf(1), null, null)&#10;    }&#10;&#10;    @Test&#10;    fun test5Empty() {&#10;        checkSecondFunctions(listOf(), null, null)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570376000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Introduction to Generics (#2)&lt;/h2&gt;&lt;p&gt;Implement the &lt;code&gt;reversed&lt;/code&gt; extension function on a &lt;code&gt;List&lt;/code&gt; &#10;that returns a new list containing the same elements in a reversed order.&lt;/p&gt;&lt;p&gt;Note that the standard library already contains the &lt;code&gt;reversed&lt;/code&gt; function,&#10;but your task is to implement this function from scratch.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Usability+%2F+Introduction+to+Generics+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497869" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="133" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="133" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="for (i in lastIndex downTo 0) {&#10;        result += get(i)&#10;    }&#10;    " />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package introductiontoGenerics2&#10;&#10;import atomictest.eq&#10;&#10;fun &lt;T&gt; List&lt;T&gt;.reversed(): List&lt;T&gt; {&#10;    val result = mutableListOf&lt;T&gt;()&#10;    TODO()&#10;    return result&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val list = listOf(1, 2, 3)&#10;    list.reversed() eq listOf(3, 2, 1)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package introductiontoGenerics2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;import kotlin.collections.reversed as reversedLibrary&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestGenerics {&#10;    private fun &lt;T&gt; checkReversed(list: List&lt;T&gt;) {&#10;        Assert.assertEquals(&quot;Wrong result for $list&quot;,&#10;                list.reversed(), list.reversedLibrary()&#10;        )&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = checkReversed(listOf(1, 2, 3))&#10;&#10;    @Test&#10;    fun test2() = checkReversed(listOf('a', 'b', 'c', 'd', 'e'))&#10;&#10;    @Test&#10;    fun test3() = checkReversed(listOf(&quot;a&quot;))&#10;&#10;    @Test&#10;    fun test4() = checkReversed(listOf&lt;Int&gt;())&#10;&#10;    @Test&#10;    fun test5() = checkReversed(listOf(null))&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570377000" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="149993" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="175308" />
                      <option name="index" value="13" />
                      <option name="name" value="Extension Properties" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538571014000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Extension Properties&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/107304/step/1&quot;&gt;Read &amp;quot;Extension Properties&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497870" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/AnyFromListOfStar.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/AnyFromListOfStar.kt" />
                                      <option name="text" value="// ExtensionProperties/AnyFromListOfStar.kt&#10;package extensionproperties&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list: List&lt;*&gt; = listOf(1, 2)&#10;  val any: Any? = list[0]&#10;  any eq 1&#10;  // Doesn't compile:&#10;  // any + 1&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/GenericListExt.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/GenericListExt.kt" />
                                      <option name="text" value="// ExtensionProperties/GenericListExt.kt&#10;package extensionproperties&#10;import atomictest.eq&#10;&#10;fun &lt;T&gt; List&lt;T&gt;.first(): T {&#10;  if (isEmpty())&#10;    throw&#10;      NoSuchElementException(&quot;Empty List.&quot;)&#10;  return this[0]&#10;}&#10;&#10;val &lt;T&gt; List&lt;T&gt;.firstOrNull: T?&#10;  get() = if (isEmpty()) null else this[0]&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  listOf(1, 2, 3).first() eq 1&#10;  listOf(1, 2, 3).firstOrNull eq 1&#10;  listOf&lt;String&gt;().firstOrNull eq null&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ListOfStar.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ListOfStar.kt" />
                                      <option name="text" value="// ExtensionProperties/ListOfStar.kt&#10;package extensionproperties&#10;import atomictest.eq&#10;&#10;val List&lt;*&gt;.indices: IntRange&#10;  get() = 0 until size&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  listOf(1).indices eq 0..0&#10;  listOf('a', 'b', 'c', 'd').indices eq 0..3&#10;  emptyList&lt;Int&gt;().indices eq IntRange.EMPTY&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/StringIndices.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/StringIndices.kt" />
                                      <option name="text" value="// ExtensionProperties/StringIndices.kt&#10;package extensionproperties&#10;import atomictest.eq&#10;&#10;val String.indices: IntRange&#10;  get() = 0 until length&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  &quot;abc&quot;.indices eq 0..2&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570379000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Extension Properties (#1)&lt;/h2&gt;&lt;p&gt;Convert &lt;code&gt;secondOrNull&lt;/code&gt; and &lt;code&gt;penultimateOrNull&lt;/code&gt; from the previous atom &#10;to extension properties.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Usability+%2F+Extension+Properties+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497871" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="45" />
                                                <option name="offset" value="52" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="45" />
                                            <option name="offset" value="52" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Introduction to Generics" />
                                                <option name="placeholderIndex" value="0" />
                                                <option name="sectionName" value="Usability" />
                                                <option name="taskName" value="Exercise 1" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="val &lt;T&gt; List&lt;T&gt;.secondOrNull: T? get() = null" />
                                            <option name="possibleAnswer" value="val &lt;T&gt; List&lt;T&gt;.secondOrNull: T?&#10;    get() = getOrNull(1)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="50" />
                                                <option name="offset" value="99" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="50" />
                                            <option name="offset" value="99" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Introduction to Generics" />
                                                <option name="placeholderIndex" value="1" />
                                                <option name="sectionName" value="Usability" />
                                                <option name="taskName" value="Exercise 1" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="val &lt;T&gt; List&lt;T&gt;.penultimateOrNull: T? get() = null" />
                                            <option name="possibleAnswer" value="val &lt;T&gt; List&lt;T&gt;.penultimateOrNull: T?&#10;    get() = getOrNull(lastIndex - 1)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package extensionProperties1&#10;&#10;import atomictest.eq&#10;&#10;val &lt;T&gt; List&lt;T&gt;.secondOrNull: T? get() = null&#10;&#10;val &lt;T&gt; List&lt;T&gt;.penultimateOrNull: T? get() = null&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val ints = listOf(1, 2, 3)&#10;    ints.secondOrNull eq 2&#10;    ints.penultimateOrNull eq 2&#10;&#10;    val strings = listOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;)&#10;    strings.secondOrNull eq &quot;b&quot;&#10;    strings.penultimateOrNull eq &quot;c&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package extensionProperties1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestSecond {&#10;    private fun &lt;T&gt; checkSecondFunctions(list: List&lt;T&gt;, second: T?, penultimate: T?) {&#10;        Assert.assertEquals(&quot;Wrong `second` element for $list:&quot;,&#10;                list.secondOrNull, second)&#10;        Assert.assertEquals(&quot;Wrong `penultimate` element for $list:&quot;,&#10;                list.penultimateOrNull, penultimate)&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() {&#10;        checkSecondFunctions(listOf(1, 2, 3), 2, 2)&#10;    }&#10;&#10;    @Test&#10;    fun test2Sample() {&#10;        checkSecondFunctions(listOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;), &quot;b&quot;, &quot;c&quot;)&#10;    }&#10;&#10;    @Test&#10;    fun test3() {&#10;        checkSecondFunctions(listOf('a', 'b', 'c', 'd', 'e', 'f', 'x', 'y', 'z'), 'b', 'y')&#10;    }&#10;&#10;    @Test&#10;    fun test4OneElement() {&#10;        checkSecondFunctions(listOf(1), null, null)&#10;    }&#10;&#10;    @Test&#10;    fun test5Empty() {&#10;        checkSecondFunctions(listOf(), null, null)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570380000" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="149994" />
                    </Lesson>
                  </list>
                </option>
              </Section>
              <Section>
                <option name="courseId" value="20403" />
                <option name="customPresentableName" />
                <option name="id" value="66742" />
                <option name="index" value="4" />
                <option name="name" value="Functional Programming" />
                <option name="position" value="4" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1538571117000" />
                <option name="items">
                  <list>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="175309" />
                      <option name="index" value="1" />
                      <option name="name" value="Lambdas" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538571018000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Lambdas&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/107888/step/1&quot;&gt;Read &amp;quot;Lambdas&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497872" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/BasicLambda.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/BasicLambda.kt" />
                                      <option name="text" value="// Lambdas/BasicLambda.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf(1, 2, 3, 4)&#10;  val result = list.map({ n: Int -&gt; &quot;[$n]&quot; })&#10;  result eq listOf(&quot;[1]&quot;,&quot;[2]&quot;,&quot;[3]&quot;,&quot;[4]&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/JoinToString.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/JoinToString.kt" />
                                      <option name="text" value="// Lambdas/JoinToString.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf('a', 'b', 'c', 'd')&#10;  list.joinToString(&quot; &quot;) { &quot;[$it]&quot; } eq&#10;    &quot;[a] [b] [c] [d]&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/LambdaAndNamedArgs.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/LambdaAndNamedArgs.kt" />
                                      <option name="text" value="// Lambdas/LambdaAndNamedArgs.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf('a', 'b', 'c', 'd')&#10;  list.joinToString(&#10;    separator = &quot; &quot;,&#10;    transform = { &quot;[$it]&quot; }&#10;  ) eq  &quot;[a] [b] [c] [d]&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/LambdaIt.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/LambdaIt.kt" />
                                      <option name="text" value="// Lambdas/LambdaIt.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf(1, 2, 3, 4)&#10;  val result = list.map({ &quot;[$it]&quot; })&#10;  result eq listOf(&quot;[1]&quot;,&quot;[2]&quot;,&quot;[3]&quot;,&quot;[4]&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/LambdaTypeInference.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/LambdaTypeInference.kt" />
                                      <option name="text" value="// Lambdas/LambdaTypeInference.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf(1, 2, 3, 4)&#10;  val result = list.map({ n -&gt; &quot;[$n]&quot; })&#10;  result eq listOf(&quot;[1]&quot;,&quot;[2]&quot;,&quot;[3]&quot;,&quot;[4]&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ListIndicesMap.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ListIndicesMap.kt" />
                                      <option name="text" value="// Lambdas/ListIndicesMap.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf('a', 'b', 'c')&#10;  list.indices.map { &quot;[$it: ?]&quot;&#10;  } eq listOf(&quot;[0: ?]&quot;, &quot;[1: ?]&quot;, &quot;[2: ?]&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Mapping.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Mapping.kt" />
                                      <option name="text" value="// Lambdas/Mapping.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf('a', 'b', 'c', 'd')&#10;  val result =&#10;    list.map({ &quot;[${it.toUpperCase()}]&quot; })&#10;  result eq listOf(&quot;[A]&quot;,&quot;[B]&quot;,&quot;[C]&quot;,&quot;[D]&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/OmittingParentheses.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/OmittingParentheses.kt" />
                                      <option name="text" value="// Lambdas/OmittingParentheses.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf('a', 'b', 'c', 'd')&#10;  val result = list.map { &quot;[$it]&quot; }&#10;  result eq&#10;  listOf(&quot;[a]&quot;, &quot;[b]&quot;, &quot;[c]&quot;, &quot;[d]&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/TwoArgLambda.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/TwoArgLambda.kt" />
                                      <option name="text" value="// Lambdas/TwoArgLambda.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf('a', 'b', 'c')&#10;  list.mapIndexed { index, element -&gt;&#10;    &quot;[$index: $element]&quot;&#10;  } eq listOf(&quot;[0: a]&quot;, &quot;[1: b]&quot;, &quot;[2: c]&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Underscore.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Underscore.kt" />
                                      <option name="text" value="// Lambdas/Underscore.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf('a', 'b', 'c')&#10;  list.mapIndexed { index, _ -&gt; &quot;[$index: ?]&quot;&#10;  } eq listOf(&quot;[0: ?]&quot;, &quot;[1: ?]&quot;, &quot;[2: ?]&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ZeroArguments.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ZeroArguments.kt" />
                                      <option name="text" value="// Lambdas/ZeroArguments.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  run { -&gt; println(&quot;A Lambda&quot;) }&#10;  run { println(&quot;Without args&quot;) }&#10;}&#10;/* Output:&#10;A Lambda&#10;Without args&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570385000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Lambdas (#1)&lt;/h2&gt;&lt;p&gt;Finish the implementation of the &lt;code&gt;transform&lt;/code&gt; function so that&#10;it produced the results specified below.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Lambdas+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497873" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="109" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="109" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="it.length" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package lambdas1&#10;&#10;import atomictest.eq&#10;&#10;fun transform(list: List&lt;String&gt;): List&lt;Int&gt; {&#10;    return list.map { TODO() }&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    transform(listOf(&quot;abc&quot;, &quot;ab&quot;)) eq listOf(3, 2)&#10;    transform(listOf(&quot;&quot;, &quot;abdef&quot;, &quot;x&quot;)) eq listOf(0, 5, 1)&#10;    transform(listOf(&quot;123456789&quot;)) eq listOf(9)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package lambdas1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestBooks {&#10;    private fun checkList(list: List&lt;String&gt;) {&#10;        Assert.assertEquals(&quot;Wrong result for $list:&quot;, transform(list), list.map { it.length })&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = checkList(listOf(&quot;abc&quot;, &quot;ab&quot;))&#10;&#10;    @Test&#10;    fun test2Sample() = checkList(listOf(&quot;&quot;, &quot;abdef&quot;, &quot;x&quot;))&#10;&#10;    @Test&#10;    fun test3Sample() = checkList(listOf(&quot;123456789&quot;))&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570386000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Lambdas (#2)&lt;/h2&gt;&lt;p&gt;Implement &lt;code&gt;getAuthors()&lt;/code&gt; function that returns a set of authors&#10;which books are presented in the &lt;code&gt;books&lt;/code&gt; list.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Lambdas+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497874" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="186" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="186" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="return books.map { it.author }.toSet()" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package lambdas2&#10;&#10;import atomictest.eq&#10;&#10;data class Author(val name: String)&#10;&#10;data class Book(val title: String, val author: Author)&#10;&#10;fun getAuthors(books: List&lt;Book&gt;): Set&lt;Author&gt; {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val books = listOf(&#10;            Book(&quot;The Philosopher's Stone&quot;, Author(&quot;J. K. Rowling&quot;)),&#10;            Book(&quot;The Chamber of Secrets&quot;, Author(&quot;J. K. Rowling&quot;)),&#10;            Book(&quot;The Prisoner of Azkaban&quot;, Author(&quot;J. K. Rowling&quot;)),&#10;            Book(&quot;The Goblet of Fire&quot;, Author(&quot;J. K. Rowling&quot;)),&#10;            Book(&quot;The Order of the Phoenix&quot;, Author(&quot;J. K. Rowling&quot;)),&#10;            Book(&quot;The Half-Blood Prince&quot;, Author(&quot;J. K. Rowling&quot;)),&#10;            Book(&quot;The Deathly Hallows&quot;, Author(&quot;J. K. Rowling&quot;))&#10;    )&#10;    getAuthors(books) eq setOf(Author(&quot;J. K. Rowling&quot;))&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package lambdas2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestBooks {&#10;    private fun checkBooks(books: List&lt;Book&gt;, authors: Set&lt;Author&gt;) {&#10;        Assert.assertEquals(&quot;Wrong result for $books:&quot;, getAuthors(books), authors)&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() {&#10;        checkBooks(listOf(&#10;                Book(&quot;The Philosopher's Stone&quot;, Author(&quot;J. K. Rowling&quot;)),&#10;                Book(&quot;The Chamber of Secrets&quot;, Author(&quot;J. K. Rowling&quot;)),&#10;                Book(&quot;The Prisoner of Azkaban&quot;, Author(&quot;J. K. Rowling&quot;)),&#10;                Book(&quot;The Goblet of Fire&quot;, Author(&quot;J. K. Rowling&quot;)),&#10;                Book(&quot;The Order of the Phoenix&quot;, Author(&quot;J. K. Rowling&quot;)),&#10;                Book(&quot;The Half-Blood Prince&quot;, Author(&quot;J. K. Rowling&quot;)),&#10;                Book(&quot;The Deathly Hallows&quot;, Author(&quot;J. K. Rowling&quot;))&#10;        ), setOf(Author(&quot;J. K. Rowling&quot;)))&#10;    }&#10;&#10;    @Test&#10;    fun test2EmptyList() {&#10;        checkBooks(listOf(), setOf())&#10;    }&#10;&#10;    @Test&#10;    fun test3OneAuthor() {&#10;        checkBooks(listOf(Book(&quot;Doctor Zhivago&quot;, Author(&quot;Boris Pasternak&quot;))),&#10;                setOf(Author(&quot;Boris Pasternak&quot;)))&#10;    }&#10;&#10;    @Test&#10;    fun test4SeveralAuthors() {&#10;        checkBooks(listOf(Book(&quot;For Whom the Bell Tolls&quot;, Author(&quot;Ernest Hemingway&quot;)),&#10;                Book(&quot;The Old Man and the Sea&quot;, Author(&quot;Ernest Hemingway&quot;)),&#10;                Book(&quot;One Hundred Years of Solitude&quot;, Author(&quot;Gabriel García Márquez&quot;))),&#10;                setOf(Author(&quot;Ernest Hemingway&quot;), Author(&quot;Gabriel García Márquez&quot;)))&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570387000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Lambdas (#3)&lt;/h2&gt;&lt;p&gt;Implement &lt;code&gt;registerStudents()&lt;/code&gt; function creating a list of &lt;code&gt;Student&lt;/code&gt;s from&#10;a list of &lt;code&gt;String&lt;/code&gt;s. It should assign different &lt;code&gt;id&lt;/code&gt;s to students starting &#10;from &lt;code&gt;startId&lt;/code&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Lambdas+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497875" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="172" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="172" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="return names.mapIndexed { index, name -&gt; Student(startId + index, name) }" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package lambdas3&#10;&#10;import atomictest.eq&#10;&#10;data class Student(val id: Int, val name: String)&#10;&#10;fun registerStudents(names: List&lt;String&gt;, startId: Int = 0): List&lt;Student&gt; {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val students = listOf(&quot;Alice&quot;, &quot;Bob&quot;)&#10;    registerStudents(students) eq&#10;            listOf(Student(0, &quot;Alice&quot;), Student(1, &quot;Bob&quot;))&#10;&#10;    registerStudents(students, startId = 10) eq&#10;            listOf(Student(10, &quot;Alice&quot;), Student(11, &quot;Bob&quot;))&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package lambdas3&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestRegisterStudents {&#10;    private fun checkRegisterStudents(names: List&lt;String&gt;, startId: Int) {&#10;        Assert.assertEquals(&quot;Wrong result for startId = $startId, names = $names:&quot;,&#10;                names.mapIndexed { index, name -&gt; Student(index + startId, name) },&#10;                registerStudents(names, startId))&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = checkRegisterStudents(listOf(&quot;Alice&quot;, &quot;Bob&quot;), 0)&#10;&#10;    @Test&#10;    fun test2Sample() = checkRegisterStudents(listOf(&quot;Alice&quot;, &quot;Bob&quot;), 10)&#10;&#10;    @Test&#10;    fun test3() = checkRegisterStudents(listOf(&quot;Alice&quot;, &quot;Bob&quot;, &quot;Charlie&quot;), 1000)&#10;&#10;    @Test&#10;    fun test4() = checkRegisterStudents(listOf(), 0)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570388000" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="149995" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="175310" />
                      <option name="index" value="2" />
                      <option name="name" value="The Importance of Lambdas" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538571021000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;The Importance of Lambdas&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/107889/step/1&quot;&gt;Read &amp;quot;The Importance of Lambdas&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497876" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Closures.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Closures.kt" />
                                      <option name="text" value="// ImportanceOfLambdas/Closures.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf(1, 5, 7, 10)&#10;  val divider = 5&#10;&#10;  list.filter { it % divider == 0 } eq&#10;    listOf(5, 10)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Closures2.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Closures2.kt" />
                                      <option name="text" value="// ImportanceOfLambdas/Closures2.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf(1, 5, 7, 10)&#10;  var sum = 0&#10;  val divider = 5&#10;  list.filter { it % divider == 0 }&#10;    .forEach { sum += it }&#10;  sum eq 15&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Closures3.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Closures3.kt" />
                                      <option name="text" value="// ImportanceOfLambdas/Closures3.kt&#10;import atomictest.eq&#10;&#10;var x = 100&#10;&#10;fun useX() {&#10;  x++&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  useX()&#10;  x eq 101&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Filter.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Filter.kt" />
                                      <option name="text" value="// ImportanceOfLambdas/Filter.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf(1, 2, 3, 4)&#10;  val even = list.filter { it % 2 == 0 }&#10;  val greaterThan2 = list.filter { it &gt; 2 }&#10;  even eq listOf(2, 4)&#10;  greaterThan2 eq listOf(3, 4)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/FilterEven.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/FilterEven.kt" />
                                      <option name="text" value="// ImportanceOfLambdas/FilterEven.kt&#10;import atomictest.eq&#10;&#10;fun filterEven(nums: List&lt;Int&gt;): List&lt;Int&gt; {&#10;  val result = mutableListOf&lt;Int&gt;()&#10;  for (i in nums)&#10;    if (i % 2 == 0)    // [1]&#10;      result += i&#10;  return result&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  filterEven(listOf(1, 2, 3, 4)) eq&#10;  listOf(2, 4)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/GreaterThan2.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/GreaterThan2.kt" />
                                      <option name="text" value="// ImportanceOfLambdas/GreaterThan2.kt&#10;import atomictest.eq&#10;&#10;fun greaterThan2(nums: List&lt;Int&gt;): List&lt;Int&gt; {&#10;  val result = mutableListOf&lt;Int&gt;()&#10;  for (i in nums)&#10;    if (i &gt; 2)         // [1]&#10;      result += i&#10;  return result&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  greaterThan2(listOf(1, 2, 3, 4)) eq&#10;    listOf(3, 4)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/StoringLambda.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/StoringLambda.kt" />
                                      <option name="text" value="// ImportanceOfLambdas/StoringLambda.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf(1, 2, 3, 4)&#10;  val isEven = { e: Int -&gt; e % 2 == 0 }&#10;  val even: List&lt;Int&gt; = list.filter(isEven)&#10;  val hasEven: Boolean = list.any(isEven)&#10;  even eq listOf(2, 4)&#10;  hasEven eq true&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Sum.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Sum.kt" />
                                      <option name="text" value="// ImportanceOfLambdas/Sum.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf(1, 5, 7, 10)&#10;  val divider = 5&#10;  list.filter { it % divider == 0 }&#10;    .sum() eq 15&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570390000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;The Importance of Lambdas (#1)&lt;/h2&gt;&lt;p&gt;Implement &lt;code&gt;getNamesOfAdults()&lt;/code&gt; function which returns names of all people&#10;older than 17.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+The+Importance+of+Lambdas+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497877" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="157" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="157" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="return filter { it.age &gt; 17 }.map { it.name }" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package theImportanceofLambdas1&#10;&#10;import atomictest.eq&#10;&#10;class Person(val name: String, val age: Int)&#10;&#10;fun List&lt;Person&gt;.getNamesOfAdults(): List&lt;String&gt; {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val people = listOf(Person(&quot;Alice&quot;, 17), Person(&quot;Bob&quot;, 19))&#10;    people.getNamesOfAdults() eq listOf(&quot;Bob&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package theImportanceofLambdas1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestAdults {&#10;    private fun checkNames(people: List&lt;Person&gt;) {&#10;        Assert.assertEquals(&quot;Wrong result for $people:&quot;,&#10;                people.filter { it.age &gt; 17 }.map { it.name },&#10;                people.getNamesOfAdults())&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = checkNames(listOf(Person(&quot;Alice&quot;, 17), Person(&quot;Bob&quot;, 19)))&#10;&#10;    @Test&#10;    fun test2() = checkNames(listOf(Person(&quot;Alice&quot;, 17), Person(&quot;Bob&quot;, 19), Person(&quot;Charlie&quot;, 18)))&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570391000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;The Importance of Lambdas (#2)&lt;/h2&gt;&lt;p&gt;Implement &lt;code&gt;filterNonBlank()&lt;/code&gt; function that filters out all blank&#10;strings from the list.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+The+Importance+of+Lambdas+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497878" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="117" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="117" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="return strings.filter { it.isNotBlank() }" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package theImportanceofLambdas2&#10;&#10;import atomictest.eq&#10;&#10;fun filterNonBlank(strings: List&lt;String&gt;): List&lt;String&gt; {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    filterNonBlank(listOf(&quot;&quot;, &quot;a&quot;, &quot;  &quot;)) eq listOf(&quot;a&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package theImportanceofLambdas2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestFilterNonBlank {&#10;    private fun checkList(strings: List&lt;String&gt;) {&#10;        Assert.assertEquals(&quot;Wrong result for $strings&quot;,&#10;                strings.filter { it.isNotBlank() },&#10;                filterNonBlank(strings))&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = checkList(listOf(&quot;&quot;, &quot;a&quot;, &quot;  &quot;))&#10;&#10;    @Test&#10;    fun test2() = checkList(listOf(&quot;a&quot;, &quot;  &quot;, &quot;b&quot;, &quot;     &quot;, &quot;c&quot;))&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570392000" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="149996" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="175311" />
                      <option name="index" value="3" />
                      <option name="name" value="Operations on Collections" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538571025000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Operations on Collections&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/107890/step/1&quot;&gt;Read &amp;quot;Operations on Collections&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497879" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/ByOperations.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ByOperations.kt" />
                                      <option name="text" value="// OperationsOnCollections/ByOperations.kt&#10;import atomictest.eq&#10;&#10;data class Product(&#10;  val description: String,&#10;  val price: Double&#10;)&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val products = listOf(&#10;    Product(&quot;bread&quot;, 2.0),&#10;    Product(&quot;wine&quot;, 5.0)&#10;  )&#10;  val cheapest = products.minBy { it.price }&#10;  cheapest eq Product(&quot;bread&quot;, 2.0)&#10;&#10;  val sum = products.sumByDouble { it.price }&#10;  sum eq 7.0&#10;&#10;  products.sortedByDescending { it.price } eq&#10;  &quot;[Product(description=wine, price=5.0),&quot; +&#10;  &quot; Product(description=bread, price=2.0)]&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/CreatingLists.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/CreatingLists.kt" />
                                      <option name="text" value="// OperationsOnCollections/CreatingLists.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  // The lambda argument is the element index:&#10;  val list1 = List(10) { it }&#10;  list1 eq &quot;[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]&quot;&#10;&#10;  // A list of a single value:&#10;  val list2 = List(10) { 0 }&#10;  list2 eq &quot;[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]&quot;&#10;&#10;  // A list of letters:&#10;  val list3 = List(10) { 'a' + it }&#10;  list3 eq &quot;[a, b, c, d, e, f, g, h, i, j]&quot;&#10;&#10;  // Cycle through a sequence:&#10;  val list4 = List(10) { list3[it % 3] }&#10;  list4 eq &quot;[a, b, c, a, b, c, a, b, c, a]&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/FilterNotNull.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/FilterNotNull.kt" />
                                      <option name="text" value="// OperationsOnCollections/FilterNotNull.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf(1, 2, null)&#10;  list.filterNotNull() eq &quot;[1, 2]&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ListInit.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ListInit.kt" />
                                      <option name="text" value="// OperationsOnCollections/ListInit.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val n1 = List(5, { 10 * (it + 1) })&#10;  n1 eq &quot;[10, 20, 30, 40, 50]&quot;&#10;  val n2 = List(5) { 10 * (it + 1) }&#10;  n2 eq &quot;[10, 20, 30, 40, 50]&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/OperationsOnSets.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/OperationsOnSets.kt" />
                                      <option name="text" value="// OperationsOnCollections/OperationsOnSets.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val set = setOf(&quot;a&quot;, &quot;ab&quot;, &quot;ac&quot;)&#10;  set.maxBy { it.length }?.length eq 2&#10;  set.filter {&#10;    it.contains('b')&#10;  } eq listOf(&quot;ab&quot;)&#10;  set.map { it.length } eq listOf(1, 2, 2)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/PairOfLists.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/PairOfLists.kt" />
                                      <option name="text" value="// OperationsOnCollections/PairOfLists.kt&#10;import atomictest.eq&#10;&#10;fun createPair() = Pair(1, &quot;one&quot;)&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val (i, s) = createPair()&#10;  i eq 1&#10;  s eq &quot;one&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Partition.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Partition.kt" />
                                      <option name="text" value="// OperationsOnCollections/Partition.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf(-3, -1, 5, 7, 10)&#10;  val isPositive = { i: Int -&gt; i &gt; 0 }&#10;&#10;  list.filter(isPositive) eq &quot;[5, 7, 10]&quot;&#10;  list.filterNot(isPositive) eq &quot;[-3, -1]&quot;&#10;&#10;  val (pos, neg) = list.partition { it &gt; 0 }&#10;  pos eq &quot;[5, 7, 10]&quot;&#10;  neg eq &quot;[-3, -1]&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Predicates.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Predicates.kt" />
                                      <option name="text" value="// OperationsOnCollections/Predicates.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf(-3, -1, 5, 7, 10)&#10;&#10;  list.filter { it &gt; 0 } eq listOf(5, 7, 10)&#10;  list.count { it &gt; 0 } eq 3&#10;&#10;  list.find { it &gt; 0 } eq 5&#10;  list.firstOrNull { it &gt; 0 } eq 5&#10;  list.lastOrNull { it &lt; 0 } eq -1&#10;&#10;  list.any { it &gt; 0 } eq true&#10;  list.any { it != 0 } eq true&#10;&#10;  list.all { it &gt; 0 } eq false&#10;  list.all { it != 0 } eq true&#10;&#10;  list.none { it &gt; 0 } eq false&#10;  list.none { it == 0 } eq true&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/TakeOrDrop.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/TakeOrDrop.kt" />
                                      <option name="text" value="// OperationsOnCollections/TakeOrDrop.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf('a', 'b', 'c', 'X', 'Z')&#10;&#10;  list.takeLast(3) eq &quot;[c, X, Z]&quot;&#10;  list.takeLastWhile { it.isUpperCase() } eq&#10;    &quot;[X, Z]&quot;&#10;&#10;  list.drop(1) eq &quot;[b, c, X, Z]&quot;&#10;  list.dropWhile { it.isLowerCase() } eq&#10;    &quot;[X, Z]&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570394000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Operations on Collections (#1)&lt;/h2&gt;&lt;p&gt;Find the specified number of the oldest people in a group.&#10;Return their names sorted in an alphabetical order.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Operations+on+Collections+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497880" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="185" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="185" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="return people.sortedByDescending { it.age }&#10;            .take(requiredNumber).map { it.name }.sorted()" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package operationsonCollections1&#10;&#10;import atomictest.eq&#10;&#10;data class Person(val name: String, val age: Int)&#10;&#10;fun findOldest(people: List&lt;Person&gt;, requiredNumber: Int): List&lt;String&gt; {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val people = listOf(&#10;            Person(&quot;Bob&quot;, 30),&#10;            Person(&quot;Charlie&quot;, 20),&#10;            Person(&quot;Alice&quot;, 25))&#10;    findOldest(people, 1) eq listOf(&quot;Bob&quot;)&#10;    findOldest(people, 2) eq listOf(&quot;Alice&quot;, &quot;Bob&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package operationsonCollections1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestSecond {&#10;    private fun checkOldest(list: List&lt;Person&gt;, requiredNumber: Int) {&#10;        Assert.assertEquals(&quot;Wrong result for requiredNumber = $requiredNumber in $list:&quot;,&#10;                list.sortedByDescending { it.age }&#10;                        .take(requiredNumber).map { it.name }.sorted(),&#10;                findOldest(list, requiredNumber)&#10;        )&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() {&#10;        val people = listOf(&#10;                Person(&quot;Bob&quot;, 30),&#10;                Person(&quot;Charlie&quot;, 20),&#10;                Person(&quot;Alice&quot;, 25))&#10;        checkOldest(people, 1)&#10;        checkOldest(people, 2)&#10;    }&#10;&#10;    @Test&#10;    fun test2() {&#10;        val names = setOf(&quot;X&quot;, &quot;Y&quot;, &quot;Z&quot;)&#10;        val ages = setOf(10, 20, 30)&#10;        for (i in 1..10) {&#10;            val people = names.shuffled().zip(ages.shuffled()) {&#10;                name, age -&gt; Person(name, age)&#10;            }&#10;            checkOldest(people, 1)&#10;            checkOldest(people, 2)&#10;            checkOldest(people, 32)&#10;        }&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570395000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Operations on Collections (#2)&lt;/h2&gt;&lt;p&gt;Implement the &lt;code&gt;operation&lt;/code&gt; lambda body so that the predicates in the example&#10;produced the specified results.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Operations+on+Collections+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497881" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="84" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="84" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="&#10;    x in setOf(1, 5, 32)&#10;    // other options:&#10;    // x % 5 == 0&#10;    // x.toString().contains('5')&#10;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package operationsonCollections2&#10;&#10;import atomictest.eq&#10;&#10;val operation = { x: Int -&gt; TODO()}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val first = listOf(1, 5, 32, 45, 70, 511)&#10;    first.any(operation) eq true&#10;    first.all(operation) eq false&#10;    first.none(operation) eq false&#10;    first.count(operation) eq 3&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package operationsonCollections2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestSecond {&#10;    @Test&#10;    fun testSample() {&#10;        fun message(functionName: String) = &quot;Wrong result for '$functionName':&quot;&#10;&#10;        val first = listOf(1, 5, 32, 45, 70, 511)&#10;&#10;        Assert.assertEquals(message(&quot;any&quot;), first.any(operation), true)&#10;        Assert.assertEquals(message(&quot;all&quot;), first.all(operation), false)&#10;        Assert.assertEquals(message(&quot;none&quot;), first.none(operation), false)&#10;        Assert.assertEquals(message(&quot;count&quot;), first.count(operation), 3)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570396000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Operations on Collections (#3)&lt;/h2&gt;&lt;p&gt;Find sum of nullable integer numbers. &#10;Interpret &lt;code&gt;null&lt;/code&gt; as zero.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Operations+on+Collections+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497882" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="93" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="93" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="return list.filterNotNull().sum()" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package operationsonCollections3&#10;&#10;import atomictest.eq&#10;&#10;fun sum(list: List&lt;Int?&gt;): Int {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    sum(listOf(1, 2, null)) eq 3&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package operationsonCollections3&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestOperations {&#10;    private fun check(list: List&lt;Int?&gt;) {&#10;        Assert.assertEquals(&quot;Wrong result for $list&quot;,&#10;                list.filterNotNull().sum(),&#10;                sum(list))&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = check(listOf(1, 2, null))&#10;&#10;    @Test&#10;    fun test2Sample() = check(listOf(null, null, null))&#10;&#10;    @Test&#10;    fun test3() = check(listOf(1, 2, 3))&#10;&#10;    @Test&#10;    fun test4() = check(listOf(1, null, 1, null, 1, null, 1, null))&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570397000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Operations on Collections (#4)&lt;/h2&gt;&lt;p&gt;Functions &lt;code&gt;all()&lt;/code&gt;, &lt;code&gt;none()&lt;/code&gt; and &lt;code&gt;any()&lt;/code&gt; are interchangeable, you can use one&#10;or the other to implement the same functionality.&lt;br /&gt;&#10;Implement the functions &lt;code&gt;allNonZero()&lt;/code&gt; and &lt;code&gt;hasZero()&lt;/code&gt; using all three &#10;predicates in turn. &lt;code&gt;allNonZero()&lt;/code&gt; checks that all the elements in the list &#10;are non-zero; &lt;code&gt;hasZero()&lt;/code&gt; checks that the list contains &lt;code&gt;zero&lt;/code&gt; element.&#10;The implementations using &lt;code&gt;all()&lt;/code&gt; are given.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Operations+on+Collections+%2F+Exercise4&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="5" />
                            <option name="name" value="Exercise 4" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497883" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="0" />
                                                <option name="offset" value="131" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="0" />
                                            <option name="offset" value="131" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="" />
                                            <option name="possibleAnswer" value="" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="138" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="138" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="it == 0" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="2" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="0" />
                                                <option name="offset" value="177" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="0" />
                                            <option name="offset" value="177" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="" />
                                            <option name="possibleAnswer" value="!" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="3" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="183" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="183" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="it == 0" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="4" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="0" />
                                                <option name="offset" value="263" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="0" />
                                            <option name="offset" value="263" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="" />
                                            <option name="possibleAnswer" value="!" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="5" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="270" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="270" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="it == 0" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="6" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="0" />
                                                <option name="offset" value="306" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="0" />
                                            <option name="offset" value="306" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="" />
                                            <option name="possibleAnswer" value="" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="7" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="312" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="312" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="it == 0" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package operationsonCollections4&#10;&#10;import atomictest.eq&#10;&#10;fun List&lt;Int&gt;.allNonZero() = all { it != 0 }&#10;fun List&lt;Int&gt;.allNonZero1() = none { TODO() }&#10;fun List&lt;Int&gt;.allNonZero2() = any { TODO() }&#10;&#10;fun List&lt;Int&gt;.hasZero() = !all { it != 0 }&#10;fun List&lt;Int&gt;.hasZero1() = none { TODO() }&#10;fun List&lt;Int&gt;.hasZero2() = any { TODO() }&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val list1 = listOf(1, 2, 3)&#10;    list1.allNonZero() eq true&#10;    list1.allNonZero1() eq true&#10;    list1.allNonZero2() eq true&#10;&#10;    list1.hasZero() eq false&#10;    list1.hasZero1() eq false&#10;    list1.hasZero2() eq false&#10;&#10;    val list2 = listOf(0, 1, 2)&#10;    list2.allNonZero() eq false&#10;    list2.allNonZero1() eq false&#10;    list2.allNonZero2() eq false&#10;&#10;    list2.hasZero() eq true&#10;    list2.hasZero1() eq true&#10;    list2.hasZero2() eq true&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package operationsonCollections4&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestOperations {&#10;    private fun check(list: List&lt;Int&gt;) {&#10;        val nonZero = list.all { it != 0 }&#10;        Assert.assertEquals(&quot;Wrong result for 'allNonZero($list)'&quot;, nonZero, list.allNonZero())&#10;        Assert.assertEquals(&quot;Wrong result for 'allNonZero1($list)'&quot;, nonZero, list.allNonZero1())&#10;        Assert.assertEquals(&quot;Wrong result for 'allNonZero2($list)'&quot;, nonZero, list.allNonZero2())&#10;&#10;        val hasZero = list.any { it == 0 }&#10;        Assert.assertEquals(&quot;Wrong result for 'hasZero($list)'&quot;, hasZero, list.hasZero())&#10;        Assert.assertEquals(&quot;Wrong result for 'hasZero1($list)'&quot;, hasZero, list.hasZero1())&#10;        Assert.assertEquals(&quot;Wrong result for 'hasZero2($list)'&quot;, hasZero, list.hasZero2())&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = check(listOf(1, 2, 3))&#10;&#10;    @Test&#10;    fun test2Sample() = check(listOf(0, 1, 2))&#10;&#10;    @Test&#10;    fun test3() = check(listOf(0, 0, 0))&#10;&#10;    @Test&#10;    fun test4() = check(listOf(0, 1, 2, 0, 3, 4))&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570398000" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="149997" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="175312" />
                      <option name="index" value="4" />
                      <option name="name" value="Member References" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538571030000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Member References&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/107891/step/1&quot;&gt;Read &amp;quot;Member References&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497884" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/ConstructorReference.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ConstructorReference.kt" />
                                      <option name="text" value="// MemberReferences/ConstructorReference.kt&#10;package memberreferences3&#10;import atomictest.eq&#10;&#10;data class Student(&#10;  val id: Int,&#10;  val name: String&#10;)&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val names = listOf(&quot;Alice&quot;, &quot;Bob&quot;)&#10;  val students =&#10;    names.mapIndexed { index, name -&gt;&#10;      Student(index, name)&#10;    }&#10;  students eq listOf(Student(0, &quot;Alice&quot;),&#10;    Student(1, &quot;Bob&quot;))&#10;  names.mapIndexed(::Student) eq students&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/FunctionReference.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/FunctionReference.kt" />
                                      <option name="text" value="// MemberReferences/FunctionReference.kt&#10;package memberreferences2&#10;import atomictest.eq&#10;&#10;data class Message(&#10;  val sender: String,&#10;  val text: String,&#10;  val isRead: Boolean,&#10;  val attachments: List&lt;Attachment&gt;&#10;)&#10;&#10;data class Attachment(&#10;  val type: String,&#10;  val name: String&#10;)&#10;&#10;fun Message.isImportant(): Boolean =&#10;  text.contains(&quot;Salary increase&quot;) ||&#10;    attachments.any {&#10;      it.type == &quot;image&quot; &amp;&amp;&#10;      it.name.contains(&quot;cat&quot;)&#10;    }&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val messages = listOf(Message(&#10;    &quot;Boss&quot;, &quot;Let's discuss goals &quot; +&#10;    &quot;for next year&quot;, false,&#10;    listOf(Attachment(&quot;image&quot;, &quot;cute cats&quot;))))&#10;  messages.any(Message::isImportant) eq true&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/PropertyReference.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/PropertyReference.kt" />
                                      <option name="text" value="// MemberReferences/PropertyReference.kt&#10;package memberreferences1&#10;import atomictest.eq&#10;&#10;data class Message(&#10;  val sender: String,&#10;  val text: String,&#10;  val isRead: Boolean&#10;)&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val messages = listOf(&#10;    Message(&quot;Kitty&quot;, &quot;Hey!&quot;, true),&#10;    Message(&quot;Kitty&quot;, &quot;Where are you?&quot;, false))&#10;  val unread =&#10;    messages.filterNot(Message::isRead)&#10;  unread.size eq 1&#10;  unread.single().text eq &quot;Where are you?&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/SortWith.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/SortWith.kt" />
                                      <option name="text" value="// MemberReferences/SortWith.kt&#10;package memberreferences1&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val messages = listOf(&#10;    Message(&quot;Kitty&quot;, &quot;Hey!&quot;, true),&#10;    Message(&quot;Kitty&quot;, &quot;Where are you?&quot;, false),&#10;    Message(&quot;Boss&quot;, &quot;Meeting today&quot;, false))&#10;  messages.sortedWith(compareBy(&#10;    Message::isRead, Message::sender)) eq&#10;    listOf(&#10;      // First unread, sorted by sender:&#10;      Message(&quot;Boss&quot;, &quot;Meeting today&quot;, false),&#10;      Message(&quot;Kitty&quot;,&#10;        &quot;Where are you?&quot;, false),&#10;      // Then read, also sorted by sender:&#10;      Message(&quot;Kitty&quot;, &quot;Hey!&quot;, true))&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/TopLevelFunctionRef.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/TopLevelFunctionRef.kt" />
                                      <option name="text" value="// MemberReferences/TopLevelFunctionRef.kt&#10;package memberreferences2&#10;import atomictest.eq&#10;&#10;fun ignore(message: Message) =&#10;  !message.isImportant() &amp;&amp;&#10;    message.sender in setOf(&quot;Boss&quot;, &quot;Mom&quot;)&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val text = &quot;Let's discuss goals &quot; +&#10;    &quot;for the next year&quot;&#10;  val msgs = listOf(&#10;    Message(&quot;Boss&quot;, text, false, listOf()),&#10;    Message(&quot;Boss&quot;, text, false, listOf(&#10;      Attachment(&quot;image&quot;, &quot;cute cats&quot;))))&#10;  msgs.filter(::ignore).size eq 1&#10;  msgs.filterNot(::ignore).size eq 1&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570400000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Member References (#1)&lt;/h2&gt;&lt;p&gt;Complete the implementation of the &lt;code&gt;sortByGradeAndThenByName&lt;/code&gt; function: &#10;first sort the students by their grade in a descending order (starting from the&#10;largest), then sort them first by their surname, then by name.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Member+References+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497885" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="54" />
                                                <option name="offset" value="322" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="54" />
                                            <option name="offset" value="322" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO(&quot;compareByDescending(???).then(compareBy(???)))&quot;)" />
                                            <option name="possibleAnswer" value="compareByDescending(Student::grade)&#10;                .then(compareBy(Student::surname, Student::name))" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package memberReferences01&#10;&#10;import atomictest.eq&#10;&#10;data class Student(&#10;        val name: String,&#10;        val surname: String,&#10;        val grade: Int&#10;) {&#10;    override fun toString(): String {&#10;        return &quot;$name $surname ($grade)&quot;&#10;    }&#10;}&#10;&#10;fun List&lt;Student&gt;.sortByGradeAndThenByName(): List&lt;Student&gt; = sortedWith(&#10;        TODO(&quot;compareByDescending(???).then(compareBy(???)))&quot;))&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val people = listOf(&#10;            Student(&quot;Alice&quot;, &quot;Johnson&quot;, 1),&#10;            Student(&quot;Bob&quot;, &quot;Smith&quot;, 2),&#10;            Student(&quot;Charlie&quot;, &quot;Smith&quot;, 2))&#10;&#10;    people.sortByGradeAndThenByName() eq&#10;            &quot;[Bob Smith (2), Charlie Smith (2), &quot; +&#10;            &quot;Alice Johnson (1)]&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package memberReferences01&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;import java.util.*&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestMapImpl {&#10;    private fun check(&#10;            list: List&lt;Student&gt;&#10;    ) {&#10;        Assert.assertEquals(&quot;Wrong result for $list:&quot;,&#10;                list.sortedWith(compareByDescending(Student::grade)&#10;                        .then(compareBy(Student::surname, Student::name))),&#10;                list.sortByGradeAndThenByName())&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = check(listOf(&#10;            Student(&quot;Alice&quot;, &quot;Johnson&quot;, 3),&#10;            Student(&quot;Bob&quot;, &quot;Smith&quot;, 2),&#10;            Student(&quot;Charlie&quot;, &quot;Smith&quot;, 2)))&#10;&#10;    @Test&#10;    fun test2() = check(listOf(&#10;            Student(&quot;Alice&quot;, &quot;Johnson&quot;, 1),&#10;            Student(&quot;Bob&quot;, &quot;Smith&quot;, 1),&#10;            Student(&quot;Charlie&quot;, &quot;Smith&quot;, 1)))&#10;&#10;    @Test&#10;    fun test3() = check(listOf(&#10;            Student(&quot;Bob&quot;, &quot;Smith&quot;, 1),&#10;            Student(&quot;Alice&quot;, &quot;Smith&quot;, 1),&#10;            Student(&quot;Charlie&quot;, &quot;Smith&quot;, 1)))&#10;&#10;    @Test&#10;    fun test4() = check(listOf(&#10;            Student(&quot;Bob&quot;, &quot;Smith&quot;, 2),&#10;            Student(&quot;Alice&quot;, &quot;Smith&quot;, 3),&#10;            Student(&quot;Charlie&quot;, &quot;Smith&quot;, 1)))&#10;&#10;    @Test&#10;    fun test5() = check(listOf(&#10;            Student(&quot;Alice&quot;, &quot;Johnson&quot;, 1),&#10;            Student(&quot;Alice&quot;, &quot;Smith&quot;, 1),&#10;            Student(&quot;Alice&quot;, &quot;Jones&quot;, 1)))&#10;&#10;    @Test&#10;    fun test6() {&#10;        val names = ('A'..'E').map { &quot;$it&quot; }&#10;        val surnames = (1..6).map { &quot;S$it&quot; }&#10;        val random = Random()&#10;        repeat(20) {&#10;            check(names.shuffled().zip(surnames.shuffled()).map { (name, surname) -&gt;&#10;                Student(name, surname, random.nextInt(4))&#10;            })&#10;        }&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570401000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Member References (#2)&lt;/h2&gt;&lt;p&gt;To illustrate different types of member references, we'll consider three&#10;characteristics of natural numbers: whether a number is even, whether it's&#10;prime (doesn't have divisors other than 1 and itself), and whether it's&#10;perfect. The last one means that the sum of all the divisors excluding &#10;the number equals the number itself. For instance, 6 is the perfect number:&#10;&lt;code&gt;6 = 1 + 2 + 3&lt;/code&gt;, where 1, 2, 3 are the divisors.&lt;/p&gt;&lt;p&gt;&lt;code&gt;isEven&lt;/code&gt; is declared as extension property, &lt;code&gt;isPrime&lt;/code&gt; as extension function&#10;and &lt;code&gt;isPerfect&lt;/code&gt; as top-level function. Note that we have this inconsistency&#10;only to illustrate different types of member references.&lt;/p&gt;&lt;p&gt;You task is to complete the implementations, and pass the corresponding&#10;property or function reference to different filter invocations in &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Member+References+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497886" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="160" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="160" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="return (2 until i).filter { i % it == 0 }" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="203" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="203" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="return this != 1 &amp;&amp; getNonTrivialDivisors(this).isEmpty()" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="2" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="250" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="250" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="return i != 1 &amp;&amp; 1 + getNonTrivialDivisors(i).sum() == i" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="3" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="344" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="344" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="Int::isEven" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="4" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="403" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="403" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="Int::isPrime" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="5" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="574" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="574" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="::isPerfect" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package memberReferences02&#10;&#10;import atomictest.eq&#10;&#10;val Int.isEven: Boolean&#10;    get() = this % 2 == 0&#10;&#10;private fun getNonTrivialDivisors(i: Int): List&lt;Int&gt; {&#10;    TODO()&#10;}&#10;&#10;fun Int.isPrime(): Boolean {&#10;    TODO()&#10;}&#10;&#10;fun isPerfect(i: Int): Boolean {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val range = 1..1000&#10;    val even = range.filter(TODO())&#10;    even.size eq 500&#10;&#10;    val prime = range.filter(TODO())&#10;    prime.take(7) eq listOf(2, 3, 5, 7, 11, 13, 17)&#10;    prime.takeLast(7) eq&#10;            listOf(953, 967, 971, 977, 983, 991, 997)&#10;&#10;    val perfect = range.filter(TODO())&#10;    perfect eq listOf(6, 28, 496)&#10;    // 6 = 1 + 2 + 3&#10;    // 28 = 1 + 2 + 4 + 7 + 14&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package memberReferences02&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestMapImpl {&#10;    @Test&#10;    fun test1Sample() {&#10;        val range = 1..1000&#10;        val even = range.filter(/*&lt;taskWindow&gt;*/Int::isEven/*&lt;/taskWindow&gt;*/)&#10;        Assert.assertEquals(&quot;Wrong result for `even` collection:&quot;, 500, even.size)&#10;&#10;        val prime = range.filter(/*&lt;taskWindow&gt;*/Int::isPrime/*&lt;/taskWindow&gt;*/)&#10;        Assert.assertEquals(&quot;Wrong result for `prime` collection:&quot;,&#10;                listOf(953, 967, 971, 977, 983, 991, 997), prime.takeLast(7))&#10;&#10;        val perfect = range.filter(/*&lt;taskWindow&gt;*/::isPerfect/*&lt;/taskWindow&gt;*/)&#10;        Assert.assertEquals(&quot;Wrong result for `perfect` collection:&quot;,&#10;                listOf(6, 28, 496), perfect)&#10;&#10;    }&#10;&#10;    private fun testPrime(i: Int, isPrime: Boolean) {&#10;        Assert.assertEquals(&quot;The number $i ${if (isPrime) &quot;should&quot; else &quot;shouldn't&quot;} be prime&quot;, isPrime, i.isPrime())&#10;    }&#10;&#10;    @Test&#10;    fun test2Prime() {&#10;        testPrime(2, true)&#10;        testPrime(5, true)&#10;        testPrime(1861, true)&#10;        testPrime(2399, true)&#10;        testPrime(5569, true)&#10;        testPrime(6737, true)&#10;        testPrime(12007, true)&#10;&#10;        testPrime(1, false)&#10;        testPrime(10, false)&#10;        testPrime(2397, false)&#10;        testPrime(6739, false)&#10;    }&#10;&#10;    @Test&#10;    fun test3Perfect() {&#10;        val i = 8128&#10;        Assert.assertTrue(&quot;The number $i should be perfect&quot;, isPerfect(i))&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570402000" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="149998" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="175313" />
                      <option name="index" value="5" />
                      <option name="name" value="Function Types" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538571035000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Function Types&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/107892/step/1&quot;&gt;Read &amp;quot;Function Types&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497887" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/AnyFunImplementation.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/AnyFunImplementation.kt" />
                                      <option name="text" value="// FunctionTypes/AnyFunImplementation.kt&#10;import atomictest.eq&#10;&#10;fun &lt;T&gt; List&lt;T&gt;.any(                    // [1]&#10;  predicate: (T) -&gt; Boolean             // [2]&#10;): Boolean {&#10;  for (element in this) {&#10;    if (predicate(element))             // [3]&#10;      return true&#10;  }&#10;  return false&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val ints = listOf(1, 2, -3)&#10;  ints.any { it &gt; 0 } eq true           // [4]&#10;&#10;  val strings = listOf(&quot;abc&quot;, &quot; &quot;)&#10;  strings.any { it.isBlank() } eq true  // [5]&#10;  strings.any { it.isBlank() } eq true  // [5]&#10;&#10;  strings.any(String::isNotBlank) eq    // [6]&#10;    true&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/DefiningRepeat.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/DefiningRepeat.kt" />
                                      <option name="text" value="// FunctionTypes/DefiningRepeat.kt&#10;package definingrepeat&#10;&#10;fun repeat(&#10;  times: Int,&#10;  action: (Int) -&gt; Unit           // [1]&#10;) {&#10;  for (index in 0 until times)&#10;    action(index)                 // [2]&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  repeat(3) { println(&quot;#$it&quot;) }   // [3]&#10;}&#10;/* Output:&#10;#0&#10;#1&#10;#2&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/FunctionTypeExamples.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/FunctionTypeExamples.kt" />
                                      <option name="text" value="// FunctionTypes/FunctionTypeExamples.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val helloWorld: () -&gt; String =&#10;    { &quot;Hello, world!&quot; }&#10;  helloWorld() eq &quot;Hello, world!&quot;&#10;&#10;  val sum: (Int, Int) -&gt; Int =&#10;    { x, y -&gt; x + y }&#10;  sum(1, 2) eq 3&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/NullableFunctionType.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/NullableFunctionType.kt" />
                                      <option name="text" value="// FunctionTypes/NullableFunctionType.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val returnTypeNullable: (String) -&gt; Int? =&#10;    { null }&#10;  val mightBeNull: ((String) -&gt; Int)? = null&#10;  returnTypeNullable(&quot;abc&quot;) eq null&#10;  // Won't compile without a null check:&#10;  // mightBeNull(&quot;abc&quot;)&#10;  if (mightBeNull != null) {&#10;    mightBeNull(&quot;abc&quot;)&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/NullableReturnType.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/NullableReturnType.kt" />
                                      <option name="text" value="// FunctionTypes/NullableReturnType.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val transform: (String) -&gt; Int? =&#10;    { s: String -&gt; s.toIntOrNull() }&#10;  transform(&quot;112&quot;) eq 112&#10;  transform(&quot;abc&quot;) eq null&#10;&#10;  val list = listOf(&quot;112&quot;, &quot;abc&quot;)&#10;  list.mapNotNull(transform) eq listOf(112)&#10;  list.mapNotNull { it.toIntOrNull() } eq&#10;    listOf(112)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/RepeatByInt.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/RepeatByInt.kt" />
                                      <option name="text" value="// FunctionTypes/RepeatByInt.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  repeat(2) { println(&quot;hi!&quot;) }&#10;}&#10;/* Output:&#10;hi!&#10;hi!&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/RepeatVerbose.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/RepeatVerbose.kt" />
                                      <option name="text" value="// FunctionTypes/RepeatVerbose.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  repeat(2, { println(&quot;hi!&quot;) })&#10;}&#10;/* Output:&#10;hi!&#10;hi!&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/SimpleOperation.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/SimpleOperation.kt" />
                                      <option name="text" value="// FunctionTypes/SimpleOperation.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val isPositive: (Int) -&gt; Boolean =&#10;    { it &gt; 0 }&#10;  val list = listOf(1, 2, -3)&#10;  list.any(isPositive) eq true&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570405000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Function Types (#1)&lt;/h2&gt;&lt;p&gt;Implement &lt;code&gt;map()&lt;/code&gt; function by hand.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Function+Types+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497888" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="141" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="141" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="for (e in this) {&#10;        result += transform(e)&#10;    }" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package functionTypes1&#10;&#10;import atomictest.eq&#10;&#10;fun &lt;T, R&gt; List&lt;T&gt;.map(transform: (T) -&gt; R): List&lt;R&gt; {&#10;    val result = mutableListOf&lt;R&gt;()&#10;    TODO()&#10;    return result&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val list = listOf(1, 2, 3)&#10;    list.map { &quot;$it!&quot; } eq listOf(&quot;1!&quot;, &quot;2!&quot;, &quot;3!&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package functionTypes1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;import kotlin.collections.map as mapLibrary&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestMapImpl {&#10;    private fun &lt;T, R&gt; check(&#10;            list: List&lt;T&gt;,&#10;            predicateStr: String,&#10;            predicate: (T) -&gt; R&#10;    ) {&#10;        Assert.assertEquals(&quot;Wrong result for $list\n&quot; +&#10;                &quot;predicate = $predicateStr&quot;,&#10;                list.map(predicate),&#10;                list.mapLibrary(predicate))&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = check(listOf(1, 2, 3), &quot;\$it!&quot;) { &quot;$it!&quot; }&#10;&#10;    @Test&#10;    fun test2() = check(listOf(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;), &quot;{ it.toInt() }&quot;) { it.toInt() }&#10;&#10;    @Test&#10;    fun test3() = check(listOf(&quot;1&quot;, &quot;2&quot;, &quot;d&quot;), &quot;{ it.toIntOrNull() }&quot;) { it.toIntOrNull() }&#10;&#10;    @Test&#10;    fun test4() = check(listOf('a', 'b', 'd'), &quot;{ it + 1 }&quot;) { it + 1 }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570406000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Function Types (#2)&lt;/h2&gt;&lt;p&gt;Replace the code that calls first &lt;code&gt;filter()&lt;/code&gt;, then &lt;code&gt;map()&lt;/code&gt; with one invocation &#10;of the function &lt;code&gt;mapNotNull()&lt;/code&gt;. Complete the implementation of &lt;code&gt;transform2()&lt;/code&gt; &#10;function so that it worked similarly to &lt;code&gt;transform1()&lt;/code&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Function+Types+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497889" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="203" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="203" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="if (it % 2 == 0) it * it else null" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package functionTypes2&#10;&#10;import atomictest.eq&#10;&#10;fun List&lt;Int&gt;.transform1(): List&lt;Int&gt; {&#10;    return filter { it % 2 == 0 }.map { it * it }&#10;}&#10;&#10;fun List&lt;Int&gt;.transform2(): List&lt;Int&gt; {&#10;    return mapNotNull { TODO() }&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val list = listOf(1, 2, 3)&#10;    list.transform1() eq listOf(4)&#10;    list.transform2() eq listOf(4)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package functionTypes2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestMapNotNull {&#10;    private fun check(&#10;            list: List&lt;Int&gt;&#10;    ) {&#10;        Assert.assertEquals(&quot;Wrong result for $list:&quot;,&#10;                list.filter { it % 2 == 0 }.map { it * it },&#10;                list.transform2())&#10;        list.transform1()&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = check(listOf(1, 2, 3))&#10;&#10;    @Test&#10;    fun test2() = check(listOf(1, -2, 3, -4))&#10;&#10;    @Test&#10;    fun test3() = check(listOf(11, 22, 30))&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570406000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Function Types (#3)&lt;/h2&gt;&lt;p&gt;Implement &lt;code&gt;mapIndexedNotNull()&lt;/code&gt; function by hand. Like &lt;code&gt;mapNotNull()&lt;/code&gt; it applies &#10;the given transformation to each element and filters out &lt;code&gt;null&lt;/code&gt;s. &#10;Like &lt;code&gt;mapIndexed()&lt;/code&gt; it bases the transformation on both the element and &#10;its index.&lt;/p&gt;&lt;p&gt;Note the generic types &lt;code&gt;R?&lt;/code&gt; (in &lt;code&gt;(Int, T) -&amp;gt; R?&lt;/code&gt;) and &lt;code&gt;List&amp;lt;R&amp;gt;&lt;/code&gt;.&#10;Lambda argument may return &lt;code&gt;null&lt;/code&gt; as a result, so lambda's return type&#10;is nullable &lt;code&gt;R?&lt;/code&gt;. &lt;code&gt;mapIndexNotNull()&lt;/code&gt; returns a list of non-nullable elements, &#10;so the function return type is &lt;code&gt;List&amp;lt;R&amp;gt;&lt;/code&gt;. To express that &lt;code&gt;R&lt;/code&gt; is a non-nullable &#10;type, we specify the constraint on a generic type parameter &lt;code&gt;R : Any&lt;/code&gt;. Type &#10;constraints will be covered in [Generics] later.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Function+Types+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497890" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="181" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="181" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="&#10;    for ((index, e) in this.withIndex()) {&#10;        val transformed = transform(index, e)&#10;        if (transformed != null) {&#10;            result += transformed&#10;        }&#10;    }&#10;    " />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package functionTypes3&#10;&#10;import atomictest.eq&#10;&#10;fun &lt;T, R : Any&gt; Iterable&lt;T&gt;.mapIndexedNotNull(&#10;        transform: (Int, T) -&gt; R?&#10;): List&lt;R&gt; {&#10;    val result = mutableListOf&lt;R&gt;()&#10;    TODO()&#10;    return result&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val list = listOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;)&#10;    list.mapIndexedNotNull { index, s -&gt;&#10;        if (index % 2 == 0) &quot;$s!&quot; else null&#10;    } eq listOf(&quot;a!&quot;, &quot;c!&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package functionTypes3&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;import kotlin.collections.mapIndexedNotNull as mapIndexedNotNullLibrary&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestMapIndexedNotNullImpl {&#10;    private fun &lt;T, R : Any&gt; check(&#10;            list: List&lt;T&gt;,&#10;            predicateStr: String,&#10;            predicate: (Int, T) -&gt; R?&#10;    ) {&#10;        Assert.assertEquals(&quot;Wrong result for $list\n&quot; +&#10;                &quot;predicate = $predicateStr&quot;,&#10;                list.mapIndexedNotNull(predicate),&#10;                list.mapIndexedNotNullLibrary(predicate))&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = check(listOf(1, 2, 3), &quot;{ index, e -&gt; \&quot;\$index: \$e!\&quot; }&quot;) { index, e -&gt; &quot;$index: $e!&quot; }&#10;&#10;    @Test&#10;    fun test2() = check(listOf(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;), &quot;{ index, e -&gt; index + e.toInt() }&quot;) { index, e -&gt; index + e.toInt() }&#10;&#10;    @Test&#10;    fun test3() = check(listOf(&quot;1&quot;, &quot;2&quot;, &quot;d&quot;),&#10;            &quot;&quot;&quot;&#10;            {&#10;                index, e -&gt;&#10;                val i = e.toIntOrNull()&#10;                if (i == null) null else index * i&#10;            }&quot;&quot;&quot;.replaceIndent()&#10;    ) { index, e -&gt;&#10;        val i = e.toIntOrNull()&#10;        if (i == null) null else index * i&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570407000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Function Types (#4)&lt;/h2&gt;&lt;p&gt;Implement &lt;code&gt;andThen()&lt;/code&gt; function. It combines the actions of two functions.&#10;&lt;code&gt;f.andThen(g)&lt;/code&gt; should return a new function that first applies &lt;code&gt;f&lt;/code&gt;, and then &#10;applies &lt;code&gt;g&lt;/code&gt; to the result: &lt;code&gt;{arg -&amp;gt; g(f(arg))}&lt;/code&gt;.&#10;Note that &lt;code&gt;andThen()&lt;/code&gt; is declared as an extension function on a function type.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Function+Types+%2F+Exercise4&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="5" />
                            <option name="name" value="Exercise 4" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497891" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="105" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="105" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="action(this(a))" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package functionTypes4&#10;&#10;fun &lt;A, B, C&gt; ((A) -&gt; B).andThen(action: (B) -&gt; C): (A) -&gt; C =&#10;        { a: A -&gt; TODO() }&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val multiply2: (Int) -&gt; Int = { x: Int -&gt; x * 2 }&#10;    val println: (Int) -&gt; Unit = { i: Int -&gt; println(&quot;Result: $i&quot;) }&#10;&#10;    val composition = multiply2.andThen(println)&#10;    composition(5)&#10;}&#10;/* Output:&#10;Result: 10&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package functionTypes4&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestAndThen {&#10;    private fun &lt;A, B, C&gt; check(&#10;            arg: A,&#10;            f: (A) -&gt; B,&#10;            g: (B) -&gt; C,&#10;            fStr: String,&#10;            gStr: String&#10;    ) {&#10;        Assert.assertEquals(&quot;Wrong result for f(g(arg))\n&quot; +&#10;                &quot;arg = $arg\n&quot; +&#10;                &quot;f = $fStr\n&quot; +&#10;                &quot;g = $gStr&quot;,&#10;                g(f(arg)),&#10;                f.andThen(g)(arg))&#10;    }&#10;&#10;    @Test&#10;    fun test1() = check(&quot;123&quot;,&#10;            f = { s: String -&gt; s.toInt() },&#10;            g = { i: Int -&gt; i + 1 },&#10;            fStr = &quot;{ s: String -&gt; s.toInt() }&quot;,&#10;            gStr = &quot;{ i: Int -&gt; i + 1 }&quot;)&#10;&#10;    @Test&#10;    fun test2() = check(111,&#10;            f = { i: Int -&gt; i + 1 },&#10;            g = { i: Int -&gt; i.toString() },&#10;            fStr = &quot;{ i: Int -&gt; i + 1 }&quot;,&#10;            gStr = &quot;{ i: Int -&gt; i.toString() }&quot;)&#10;&#10;    @Test&#10;    fun test3() = check(listOf(1, 2, 3),&#10;            f = { l: List&lt;Int&gt; -&gt; l.map { it + 1 } },&#10;            g = { l: List&lt;Int&gt; -&gt; l.joinToString() },&#10;            fStr = &quot;{ l: List&lt;Int&gt; -&gt; l.map { it + 1 } }&quot;,&#10;            gStr = &quot;{ l: List&lt;Int&gt; -&gt; l.joinToString() }&quot;)&#10;&#10;    @Test&#10;    fun test4() = check(&quot;ABC&quot;,&#10;            f = { s: String -&gt; s.toIntOrNull() },&#10;            g = { i: Int? -&gt; i ?: 0 },&#10;            fStr = &quot;{ s: String -&gt; s.toIntOrNull() }&quot;,&#10;            gStr = &quot;{ i: Int? -&gt; i ?: 0 }&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570408000" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="149999" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="175314" />
                      <option name="index" value="6" />
                      <option name="name" value="Manipulating Lists" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538571041000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Manipulating Lists&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/107893/step/1&quot;&gt;Read &amp;quot;Manipulating Lists&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497892" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Flatten.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Flatten.kt" />
                                      <option name="text" value="// ManipulatingLists/Flatten.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf(&#10;    listOf(1, 2, 3),&#10;    listOf(4, 5, 6))&#10;  list.flatten() eq listOf(1, 2, 3, 4, 5, 6)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/FlattenAndFlatMap.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/FlattenAndFlatMap.kt" />
                                      <option name="text" value="// ManipulatingLists/FlattenAndFlatMap.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val intRange = 1..3&#10;&#10;  intRange.map {               // [1]&#10;    a -&gt; intRange.map { b -&gt; a to b }&#10;  } eq &quot;[&quot; +&#10;    &quot;[(1, 1), (1, 2), (1, 3)], &quot; +&#10;    &quot;[(2, 1), (2, 2), (2, 3)], &quot; +&#10;    &quot;[(3, 1), (3, 2), (3, 3)]&quot; +&#10;  &quot;]&quot;&#10;&#10;  intRange.map {               // [2]&#10;    a -&gt; intRange.map { b -&gt; a to b }&#10;  }.flatten() eq &quot;[&quot; +&#10;    &quot;(1, 1), (1, 2), (1, 3), &quot; +&#10;    &quot;(2, 1), (2, 2), (2, 3), &quot; +&#10;    &quot;(3, 1), (3, 2), (3, 3)&quot; +&#10;  &quot;]&quot;&#10;&#10;  intRange.flatMap {           // [3]&#10;    a -&gt; intRange.map { b -&gt; a to b }&#10;  } eq &quot;[&quot; +&#10;    &quot;(1, 1), (1, 2), (1, 3), &quot; +&#10;    &quot;(2, 1), (2, 2), (2, 3), &quot; +&#10;    &quot;(3, 1), (3, 2), (3, 3)&quot; +&#10;  &quot;]&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/WhyFlatMap.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/WhyFlatMap.kt" />
                                      <option name="text" value="// ManipulatingLists/WhyFlatMap.kt&#10;package manipulatinglists&#10;import atomictest.eq&#10;&#10;class Book(&#10;  val title: String,&#10;  val authors: List&lt;String&gt;&#10;)&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val books = listOf(&#10;    Book(&quot;1984&quot;, listOf(&quot;George Orwell&quot;)),&#10;    Book(&quot;Ulysses&quot;, listOf(&quot;James Joyce&quot;))&#10;  )&#10;  books.map { it.authors }.flatten() eq&#10;    listOf(&quot;George Orwell&quot;, &quot;James Joyce&quot;)&#10;&#10;  books.flatMap { it.authors } eq&#10;    listOf(&quot;George Orwell&quot;, &quot;James Joyce&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ZipAndTransform.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ZipAndTransform.kt" />
                                      <option name="text" value="// ManipulatingLists/ZipAndTransform.kt&#10;package manipulatinglists&#10;import atomictest.eq&#10;&#10;data class Person(&#10;  val name: String,&#10;  val id: Int&#10;)&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val names = listOf(&quot;Bob&quot;, &quot;Jill&quot;, &quot;Jim&quot;)&#10;  val ids = listOf(1731, 9274, 8378)&#10;  names.zip(ids) {&#10;    name, id -&gt; Person(name, id)&#10;  } eq &quot;[Person(name=Bob, id=1731), &quot; +&#10;    &quot;Person(name=Jill, id=9274), &quot; +&#10;    &quot;Person(name=Jim, id=8378)]&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Zipper.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Zipper.kt" />
                                      <option name="text" value="// ManipulatingLists/Zipper.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val left = listOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;)&#10;  val right = listOf(&quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;)&#10;&#10;  left.zip(right) eq                 // [1]&#10;    &quot;[(a, q), (b, r), (c, s), (d, t)]&quot;&#10;&#10;  left.zip(0..4) eq                  // [2]&#10;    &quot;[(a, 0), (b, 1), (c, 2), (d, 3)]&quot;&#10;&#10;  (10..100).zip(right) eq            // [3]&#10;    &quot;[(10, q), (11, r), (12, s), (13, t)]&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ZippingWithNext.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ZippingWithNext.kt" />
                                      <option name="text" value="// ManipulatingLists/ZippingWithNext.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf('a', 'b', 'c', 'd')&#10;&#10;  list.zipWithNext() eq listOf(&#10;    Pair('a', 'b'),&#10;    Pair('b', 'c'),&#10;    Pair('c', 'd'))&#10;&#10;  list.zipWithNext { a, b -&gt; &quot;$a$b&quot; } eq&#10;    &quot;[ab, bc, cd]&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570411000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Manipulating Lists (#1)&lt;/h2&gt;&lt;p&gt;Implement &lt;code&gt;zipWithIndex()&lt;/code&gt; function.&#10;It should return a list of pairs, where first element in a pair is an element,&#10;and the second one is its index. Implement the function using &lt;code&gt;zip()&lt;/code&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Manipulating+Lists+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497893" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="16" />
                                                <option name="offset" value="111" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="16" />
                                            <option name="offset" value="111" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO(&quot;zip(???)&quot;)" />
                                            <option name="possibleAnswer" value="zip(indices)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package manipulatingLists1&#10;&#10;import atomictest.eq&#10;&#10;fun &lt;T&gt; List&lt;T&gt;.zipWithIndex(): List&lt;Pair&lt;T, Int&gt;&gt; =&#10;        TODO(&quot;zip(???)&quot;)&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val list = listOf('a', 'b', 'c')&#10;    list.zipWithIndex() eq&#10;            &quot;[(a, 0), (b, 1), (c, 2)]&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package manipulatingLists1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestMapImpl {&#10;    private fun &lt;T&gt; check(&#10;            list: List&lt;T&gt;&#10;    ) {&#10;        Assert.assertEquals(&quot;Wrong result for $list:&quot;,&#10;                list.zip(list.indices),&#10;                list.zipWithIndex())&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = check(listOf('a', 'b', 'c'))&#10;&#10;    @Test&#10;    fun test2() = check(listOf(1, 2, 3, 4, 5))&#10;&#10;    @Test&#10;    fun test3() = check(listOf(&quot;ab&quot;, &quot;bd&quot;))&#10;&#10;    @Test&#10;    fun test4() = check(listOf&lt;Any&gt;())&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570411000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Manipulating Lists (#2)&lt;/h2&gt;&lt;p&gt;Now implement &lt;code&gt;zipWithIndex()&lt;/code&gt; function using &lt;code&gt;mapIndexed()&lt;/code&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Manipulating+Lists+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497894" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="26" />
                                                <option name="offset" value="111" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="26" />
                                            <option name="offset" value="111" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO(&quot;mapIndexed { ??? }&quot;)" />
                                            <option name="possibleAnswer" value="mapIndexed { index, e -&gt; Pair(e, index) }" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package manipulatingLists2&#10;&#10;import atomictest.eq&#10;&#10;fun &lt;T&gt; List&lt;T&gt;.zipWithIndex(): List&lt;Pair&lt;T, Int&gt;&gt; =&#10;        TODO(&quot;mapIndexed { ??? }&quot;)&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val list = listOf('a', 'b', 'c')&#10;    list.zipWithIndex() eq&#10;            &quot;[(a, 0), (b, 1), (c, 2)]&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package manipulatingLists2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestMapImpl {&#10;    private fun &lt;T&gt; check(&#10;            list: List&lt;T&gt;&#10;    ) {&#10;        Assert.assertEquals(&quot;Wrong result for $list:&quot;,&#10;                list.zip(list.indices),&#10;                list.zipWithIndex())&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = check(listOf('a', 'b', 'c'))&#10;&#10;    @Test&#10;    fun test2() = check(listOf(1, 2, 3, 4, 5))&#10;&#10;    @Test&#10;    fun test3() = check(listOf(&quot;ab&quot;, &quot;bd&quot;))&#10;&#10;    @Test&#10;    fun test4() = check(listOf&lt;Any&gt;())&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570412000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Manipulating Lists (#3)&lt;/h2&gt;&lt;p&gt;Change the implementation of &lt;code&gt;createAuthorToBooksMap()&lt;/code&gt; function from &#10;[Data Classes] using operations for manipulating collections. &#10;&lt;code&gt;createAuthorToBooksMap()&lt;/code&gt; takes a list of books as an argument and &#10;builds a map from each author to the books he or she authored.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Manipulating+Lists+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497895" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="227" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="227" />
                                            <option name="placeholderDependency">
                                              <AnswerPlaceholderDependency>
                                                <option name="fileName" value="src/Task.kt" />
                                                <option name="lessonName" value="Data Classes" />
                                                <option name="placeholderIndex" value="0" />
                                                <option name="sectionName" value="Usability" />
                                                <option name="taskName" value="Exercise 2" />
                                                <option name="visible" value="true" />
                                              </AnswerPlaceholderDependency>
                                            </option>
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="val authors = books.flatMap { it.authors }.toSet()&#10;    return authors.map { author -&gt; author to books.filter { author in it.authors } }.toMap()" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package manipulatingLists3&#10;&#10;import atomictest.eq&#10;&#10;data class Book(val title: String, val authors: List&lt;Author&gt;)&#10;&#10;data class Author(val name: String)&#10;&#10;fun createAuthorToBooksMap(books: List&lt;Book&gt;): Map&lt;Author, List&lt;Book&gt;&gt; {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val books = listOf(&#10;            Book(&quot;Computer Interfacing with Pascal &amp; C&quot;, listOf(Author(&quot;Bruce Eckel&quot;))),&#10;            Book(&quot;Using C++&quot;, listOf(Author(&quot;Bruce Eckel&quot;))),&#10;            Book(&quot;C++ Inside &amp; Out&quot;, listOf(Author(&quot;Bruce Eckel&quot;))),&#10;            Book(&quot;Blackbelt C++: The Masters Collection&quot;, listOf(Author(&quot;Bruce Eckel&quot;))),&#10;            Book(&quot;Thinking in C++: Introduction to Standard C++&quot;, listOf(Author(&quot;Bruce Eckel&quot;))),&#10;            Book(&quot;Thinking in C++, Vol. 2: Practical Programming&quot;, listOf(Author(&quot;Bruce Eckel&quot;), Author(&quot;Chuck Allison&quot;))),&#10;            Book(&quot;Thinking in Java&quot;, listOf(Author(&quot;Bruce Eckel&quot;))),&#10;            Book(&quot;First Steps in Flex&quot;, listOf(Author(&quot;Bruce Eckel&quot;))),&#10;            Book(&quot;Atomic Scala&quot;, listOf(Author(&quot;Bruce Eckel&quot;), Author(&quot;Dianne Marsh&quot;))),&#10;            Book(&quot;On Java 8&quot;, listOf(Author(&quot;Bruce Eckel&quot;))),&#10;            Book(&quot;Kotlin in Action&quot;, listOf(Author(&quot;Dmitry Jemerov&quot;), Author(&quot;Svetlana Isakova&quot;))),&#10;            Book(&quot;Atomic Kotlin&quot;, listOf(Author(&quot;Bruce Eckel&quot;), Author(&quot;Svetlana Isakova&quot;)))&#10;    )&#10;    val authorToBooksMap = createAuthorToBooksMap(books)&#10;    authorToBooksMap.getValue(Author(&quot;Bruce Eckel&quot;)).size eq 11&#10;    authorToBooksMap.getValue(Author(&quot;Svetlana Isakova&quot;)).first().title eq &quot;Kotlin in Action&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package manipulatingLists3&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestBooksExample {&#10;    @Test&#10;    fun test2SimpleOneBookOneAuthor() {&#10;        val book = Book(&quot;Book&quot;, listOf(Author(&quot;Author&quot;)))&#10;        val list = listOf(book)&#10;        Assert.assertEquals(&quot;Wrong result for $list:&quot;,&#10;                mapOf(Author(&quot;Author&quot;) to listOf(book)),&#10;                createAuthorToBooksMap(list))&#10;    }&#10;&#10;    @Test&#10;    fun test2SimpleOneBookTwoAuthors() {&#10;        val book = Book(&quot;Book&quot;, listOf(Author(&quot;first author&quot;), Author(&quot;second author&quot;)))&#10;        val list = listOf(book)&#10;        Assert.assertEquals(&quot;Wrong result for $list:&quot;,&#10;                mapOf(Author(&quot;first author&quot;) to listOf(book),&#10;                        Author(&quot;second author&quot;) to listOf(book)),&#10;                createAuthorToBooksMap(list))&#10;    }&#10;&#10;    @Test&#10;    fun test2SimpleOneAuthorTwoBook() {&#10;        val list = listOf(Book(&quot;first Book&quot;, listOf(Author(&quot;Author&quot;))),&#10;                Book(&quot;second Book&quot;, listOf(Author(&quot;Author&quot;))))&#10;        Assert.assertEquals(&quot;Wrong result for $list:&quot;,&#10;                mapOf(Author(&quot;Author&quot;) to list),&#10;                createAuthorToBooksMap(list))&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() {&#10;        val bruce = Author(&quot;Bruce Eckel&quot;)&#10;        val chuck = Author(&quot;Chuck Allison&quot;)&#10;        val dianne = Author(&quot;Dianne Marsh&quot;)&#10;        val dmitry = Author(&quot;Dmitry Jemerov&quot;)&#10;        val svetlana = Author(&quot;Svetlana Isakova&quot;)&#10;&#10;        val first = Book(&quot;Computer Interfacing with Pascal &amp; C&quot;, listOf(bruce))&#10;        val second = Book(&quot;Using C++&quot;, listOf(bruce))&#10;        val third = Book(&quot;C++ Inside &amp; Out&quot;, listOf(bruce))&#10;        val fourth = Book(&quot;Blackbelt C++: The Masters Collection&quot;, listOf(bruce))&#10;        val thinkingInCPlusPlus = Book(&quot;Thinking in C++: Introduction to Standard C++&quot;, listOf(bruce))&#10;        val thinkingInCPlusPlusVolume2 = Book(&quot;Thinking in C++, Vol. 2: Practical Programming&quot;, listOf(bruce, chuck))&#10;        val thinkingInJava = Book(&quot;Thinking in Java&quot;, listOf(bruce))&#10;        val flex = Book(&quot;First Steps in Flex&quot;, listOf(bruce))&#10;        val atomicScala = Book(&quot;Atomic Scala&quot;, listOf(bruce, dianne))&#10;        val onJava8 = Book(&quot;On Java 8&quot;, listOf(bruce))&#10;        val kotlinInAction = Book(&quot;Kotlin in Action&quot;, listOf(dmitry, svetlana))&#10;        val atomicKotlin = Book(&quot;Atomic Kotlin&quot;, listOf(bruce, svetlana))&#10;        val books = listOf(&#10;                first, second, third, fourth,&#10;                thinkingInCPlusPlus,&#10;                thinkingInCPlusPlusVolume2,&#10;                thinkingInJava,&#10;                flex,&#10;                atomicScala,&#10;                onJava8,&#10;                kotlinInAction,&#10;                atomicKotlin&#10;        )&#10;        val expected = mapOf(&#10;                bruce to listOf(first, second, third, fourth,&#10;                        thinkingInCPlusPlus, thinkingInCPlusPlusVolume2,&#10;                        thinkingInJava, flex, atomicScala, onJava8, atomicKotlin),&#10;                chuck to listOf(thinkingInCPlusPlusVolume2),&#10;                dianne to listOf(atomicScala),&#10;                dmitry to listOf(kotlinInAction),&#10;                svetlana to listOf(kotlinInAction, atomicKotlin)&#10;        )&#10;        val actual = createAuthorToBooksMap(books)&#10;        Assert.assertEquals(&quot;Wrong result for sample:&quot;, expected, actual)&#10;    }&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570413000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Manipulating Lists (#4)&lt;/h2&gt;&lt;p&gt;Implement the function &lt;code&gt;getFriendSuggestions()&lt;/code&gt;. It should return&#10;friends of friends of the person, excluding those people who are his or her&#10;friends already.&#10;For instance, for the following friend connections:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Alice - Bob&#10;Bob - Charlie&#10;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;getFriendSuggestions()&lt;/code&gt; should return Charlie for Alice, because Charlie&#10;is a friend of Alice's friend Bob and isn't yet a friend of Alice.&lt;/p&gt;&lt;p&gt;No friend suggestions for Alice in the following case, Bob and Charlie are&#10;already her friends:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Alice - Bob&#10;Alice - Charlie&#10;Bob - Charlie&#10;&lt;/code&gt;&lt;/pre&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Manipulating+Lists+%2F+Exercise4&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="5" />
                            <option name="name" value="Exercise 4" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497896" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="289" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="289" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="return (person.friends.flatMap { it.friends }.toSet()&#10;            - person.friends - person)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package manipulatingLists4&#10;&#10;import atomictest.eq&#10;&#10;class Person(&#10;        val name: String&#10;) {&#10;    val friends: MutableList&lt;Person&gt; = mutableListOf()&#10;&#10;    override fun toString() = &quot;($name, friends: ${friends.map { it.name }})&quot;&#10;}&#10;&#10;fun getFriendSuggestions(person: Person): Set&lt;Person&gt; {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val alice = Person(&quot;Alice&quot;)&#10;    val bob = Person(&quot;Bob&quot;)&#10;    val charlie = Person(&quot;Charlie&quot;)&#10;&#10;    alice.friends += bob&#10;    bob.friends += alice&#10;    bob.friends += charlie&#10;    charlie.friends += bob&#10;&#10;    getFriendSuggestions(alice) eq setOf(charlie)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package manipulatingLists4&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;import kotlin.collections.flatMap as flatMapLibrary&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestFriendSuggestions {&#10;    @Test&#10;    fun test1Sample() {&#10;        val alice = Person(&quot;Alice&quot;)&#10;        val bob = Person(&quot;Bob&quot;)&#10;        val charlie = Person(&quot;Charlie&quot;)&#10;&#10;        alice.friends += bob&#10;        bob.friends += alice&#10;        bob.friends += charlie&#10;        charlie.friends += bob&#10;&#10;        Assert.assertEquals(&quot;Wrong result for sample&quot;,&#10;                setOf(charlie), getFriendSuggestions(alice))&#10;    }&#10;&#10;    @Test&#10;    fun test2() {&#10;        val persons = (0..6).map { Person(&quot;#$it&quot;) }&#10;        fun connection(i: Int, j: Int) {&#10;            persons[i].friends += persons[j]&#10;            persons[j].friends += persons[i]&#10;        }&#10;        connection(0, 1)&#10;        connection(0, 2)&#10;        connection(1, 3)&#10;        connection(1, 4)&#10;        connection(5, 6)&#10;&#10;        Assert.assertEquals(&quot;Wrong suggestions for #0 in $persons&quot;,&#10;                listOf(3, 4).map { persons[it] }.toSet(),&#10;                getFriendSuggestions(persons[0]))&#10;    }&#10;&#10;    @Test&#10;    fun test3() {&#10;        val persons = (0..2).map { Person(&quot;#$it&quot;) }&#10;        fun connection(i: Int, j: Int) {&#10;            persons[i].friends += persons[j]&#10;            persons[j].friends += persons[i]&#10;        }&#10;        connection(0, 1)&#10;        connection(0, 2)&#10;        connection(1, 2)&#10;&#10;        Assert.assertEquals(&quot;Wrong suggestions for #0 in $persons&quot;,&#10;                setOf&lt;Person&gt;(),&#10;                getFriendSuggestions(persons[0]))&#10;    }&#10;&#10;    @Test&#10;    fun test4() {&#10;        val persons = (0..4).map { Person(&quot;#$it&quot;) }&#10;        fun connection(i: Int, j: Int) {&#10;            persons[i].friends += persons[j]&#10;            persons[j].friends += persons[i]&#10;        }&#10;        connection(0, 1)&#10;        connection(0, 2)&#10;        connection(1, 3)&#10;        connection(3, 4)&#10;&#10;        Assert.assertEquals(&quot;Wrong suggestions for #0 in $persons&quot;,&#10;                setOf(persons[3]),&#10;                getFriendSuggestions(persons[0]))&#10;    }&#10;&#10;&#10;    @Test&#10;    fun test5() {&#10;        val persons = (0..6).map { Person(&quot;#$it&quot;) }&#10;        fun connection(i: Int, j: Int) {&#10;            persons[i].friends += persons[j]&#10;            persons[j].friends += persons[i]&#10;        }&#10;        connection(0, 1)&#10;        connection(0, 2)&#10;        connection(1, 3)&#10;        connection(3, 4)&#10;        connection(2, 4)&#10;&#10;        Assert.assertEquals(&quot;Wrong suggestions for #0 in $persons&quot;,&#10;                listOf(3, 4).map { persons[it] }.toSet(),&#10;                getFriendSuggestions(persons[0]))&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570414000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Manipulating Lists (#5)&lt;/h2&gt;&lt;p&gt;To better understand &lt;code&gt;flatten()&lt;/code&gt; and &lt;code&gt;flatMap()&lt;/code&gt; functions, implement one &#10;using another.&#10;In this task, implement &lt;code&gt;flatMap()&lt;/code&gt; using &lt;code&gt;flatten()&lt;/code&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Manipulating+Lists+%2F+Exercise5&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="6" />
                            <option name="name" value="Exercise 5" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497897" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="21" />
                                                <option name="offset" value="115" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="21" />
                                            <option name="offset" value="115" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO(&quot;???.flatten()&quot;)" />
                                            <option name="possibleAnswer" value="map(f).flatten()" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package manipulatingLists5&#10;&#10;import atomictest.eq&#10;&#10;fun &lt;T, R&gt; List&lt;T&gt;.flatMap(f: (T) -&gt; List&lt;R&gt;): List&lt;R&gt; =&#10;        TODO(&quot;???.flatten()&quot;)&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val list = listOf(3, 1, 4)&#10;&#10;    list.flatMap { (0..it).toList() } eq&#10;            listOf(0, 1, 2, 3, 0, 1, 0, 1, 2, 3, 4)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package manipulatingLists5&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;import kotlin.collections.flatMap as flatMapLibrary&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestFlatMap {&#10;    private fun &lt;T, R&gt; checkFlatMap(&#10;            list: List&lt;T&gt;,&#10;            transform: (T) -&gt; List&lt;R&gt;&#10;    ) {&#10;        Assert.assertEquals(&quot;Wrong 'flatMap' implementation&quot;,&#10;                list.flatMapLibrary(transform),&#10;                list.flatMap(transform))&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = checkFlatMap(listOf(3, 1, 4)) { (0..it).toList() }&#10;&#10;    @Test&#10;    fun test2() = checkFlatMap(listOf(10, 20, 30)) { listOf(it, it + 1, it + 2) }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570415000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Manipulating Lists (#6)&lt;/h2&gt;&lt;p&gt;Implement &lt;code&gt;flatten()&lt;/code&gt; using &lt;code&gt;flatMap()&lt;/code&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Manipulating+Lists+%2F+Exercise6&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="7" />
                            <option name="name" value="Exercise 6" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497898" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="111" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="111" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="it" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package manipulatingLists6&#10;&#10;import atomictest.eq&#10;&#10;fun &lt;T&gt; List&lt;List&lt;T&gt;&gt;.flatten(): List&lt;T&gt; =&#10;        flatMap { TODO() }&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val listOfLists = listOf(listOf(1, 2, 3), listOf(4, 5, 6))&#10;&#10;    listOfLists.flatten() eq listOf(1, 2, 3, 4, 5, 6)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package manipulatingLists6&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;import kotlin.collections.flatten as flattenLibrary&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestFlatten {&#10;    private fun &lt;T&gt; checkFlatten(&#10;            list: List&lt;List&lt;T&gt;&gt;&#10;    ) {&#10;        Assert.assertEquals(&quot;Wrong 'flatten' implementation&quot;,&#10;                list.flattenLibrary(), list.flatten())&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = checkFlatten(listOf(listOf(1, 2, 3), listOf(4, 5, 6)))&#10;&#10;    @Test&#10;    fun test5() = checkFlatten(listOf(listOf('a', 'b'), listOf('c', 'd', 'e', 'f')))&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570416000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Manipulating Lists (#7)&lt;/h2&gt;&lt;p&gt;Implement &lt;code&gt;filter()&lt;/code&gt; using &lt;code&gt;flatMap()&lt;/code&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Manipulating+Lists+%2F+Exercise7&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="8" />
                            <option name="name" value="Exercise 7" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497899" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="121" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="121" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="if (f(it)) listOf(it) else emptyList()" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package manipulatingLists7&#10;&#10;import atomictest.eq&#10;&#10;fun &lt;T&gt; List&lt;T&gt;.filter(f: (T) -&gt; Boolean): List&lt;T&gt; =&#10;        flatMap { TODO() }&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val list = listOf(1, 12, 22, 31)&#10;    list.filter { it.toString().contains(&quot;2&quot;) } eq&#10;            listOf(12, 22)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package manipulatingLists7&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;import kotlin.collections.filter as filterLibrary&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestFilter {&#10;    private fun &lt;T&gt; checkFilter(&#10;            list: List&lt;T&gt;,&#10;            predicate: (T) -&gt; Boolean&#10;    ) {&#10;        Assert.assertEquals(&quot;Wrong 'filter' implementation&quot;,&#10;                list.filterLibrary(predicate), list.filter(predicate))&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = checkFilter(listOf(1, 12, 22, 31)) { it.toString().contains(&quot;2&quot;) }&#10;&#10;    @Test&#10;    fun test2() = checkFilter(listOf(&quot;abc&quot;, &quot;cd&quot;)) { it.contains('a') }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570417000" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="150000" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="175315" />
                      <option name="index" value="7" />
                      <option name="name" value="From Lists to Maps" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538571051000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;From Lists to Maps&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/107894/step/1&quot;&gt;Read &amp;quot;From Lists to Maps&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497900" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/AssociateBy.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/AssociateBy.kt" />
                                      <option name="text" value="// FromListsToMaps/AssociateBy.kt&#10;import fromliststomaps.*&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val map: Map&lt;String, Person&gt; =&#10;    people().associateBy { it.name }&#10;  map eq mapOf(&#10;    &quot;Alice&quot; to Person(&quot;Alice&quot;, 21),&#10;    &quot;Arthricia&quot; to Person(&quot;Arthricia&quot;, 15),&#10;    &quot;Bob&quot; to Person(&quot;Bob&quot;, 25),&#10;    &quot;Bill&quot; to Person(&quot;Bill&quot;, 25),&#10;    &quot;Birdperson&quot; to Person(&quot;Birdperson&quot;, 42),&#10;    &quot;Charlie&quot; to Person(&quot;Charlie&quot;, 21),&#10;    &quot;Crocubot&quot; to Person(&quot;Crocubot&quot;, 42),&#10;    &quot;Franz&quot; to Person(&quot;Franz&quot;, 21),&#10;    &quot;Revolio&quot; to Person(&quot;Revolio&quot;, 33))&#10;&#10;  // associateBy() fails when the key isn't&#10;  // unique -- elements disappear:&#10;  val ages = people().associateBy { it.age }&#10;  ages eq mapOf(&#10;    21 to Person(&quot;Franz&quot;, 21),&#10;    15 to Person(&quot;Arthricia&quot;, 15),&#10;    25 to Person(&quot;Bill&quot;, 25),&#10;    42 to Person(&quot;Crocubot&quot;, 42),&#10;    33 to Person(&quot;Revolio&quot;, 33))&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/FilteringMap.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/FilteringMap.kt" />
                                      <option name="text" value="// FromListsToMaps/FilteringMap.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val map = mapOf(1 to &quot;one&quot;,&#10;    2 to &quot;two&quot;, 3 to &quot;three&quot;, 4 to &quot;four&quot;)&#10;&#10;  map.filterKeys { it % 2 == 1 } eq&#10;    &quot;{1=one, 3=three}&quot;&#10;&#10;  map.filterValues { it.contains('o') } eq&#10;    &quot;{1=one, 2=two, 4=four}&quot;&#10;&#10;  map.filter { entry -&gt;&#10;    entry.key % 2 == 1 &amp;&amp;&#10;      entry.value.contains('o')&#10;  } eq &quot;{1=one}&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/GetOrPut.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/GetOrPut.kt" />
                                      <option name="text" value="// FromListsToMaps/GetOrPut.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val map = mapOf(1 to &quot;one&quot;, 2 to &quot;two&quot;)&#10;&#10;  map.getOrElse(0) { &quot;zero&quot; } eq &quot;zero&quot;&#10;&#10;  val mutableMap = map.toMutableMap()&#10;  mutableMap.getOrPut(0) { &quot;zero&quot; } eq&#10;    &quot;zero&quot;&#10;  mutableMap eq &quot;{1=one, 2=two, 0=zero}&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/GroupBy.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/GroupBy.kt" />
                                      <option name="text" value="// FromListsToMaps/GroupBy.kt&#10;import fromliststomaps.*&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val map: Map&lt;Int, List&lt;Person&gt;&gt; =&#10;    people().groupBy(Person::age)&#10;  map[15] eq listOf(Person(&quot;Arthricia&quot;, 15))&#10;  map[21] eq listOf(&#10;    Person(&quot;Alice&quot;, 21),&#10;    Person(&quot;Charlie&quot;, 21),&#10;    Person(&quot;Franz&quot;, 21))&#10;  map[22] eq null&#10;  map[25] eq listOf(&#10;    Person(&quot;Bob&quot;, 25),&#10;    Person(&quot;Bill&quot;, 25))&#10;  map[33] eq listOf(Person(&quot;Revolio&quot;, 33))&#10;  map[42] eq listOf(&#10;    Person(&quot;Birdperson&quot;, 42),&#10;    Person(&quot;Crocubot&quot;, 42))&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/GroupByVsFilter.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/GroupByVsFilter.kt" />
                                      <option name="text" value="// FromListsToMaps/GroupByVsFilter.kt&#10;import fromliststomaps.*&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val groups =&#10;    people().groupBy { it.name.first() }&#10;  // groupBy() produces map-speed access:&#10;  groups['A'] eq listOf(Person(&quot;Alice&quot;, 21),&#10;    Person(&quot;Arthricia&quot;, 15))&#10;  groups['Z'] eq null&#10;&#10;  // Must repeat filter() for each character:&#10;  people().filter {&#10;    it.name.first() == 'A'&#10;  } eq listOf(Person(&quot;Alice&quot;, 21),&#10;      Person(&quot;Arthricia&quot;, 15))&#10;  people().filter {&#10;    it.name.first() == 'F'&#10;  } eq listOf(Person(&quot;Franz&quot;, 21))&#10;&#10;  people().partition {&#10;    it.name.first() == 'A'&#10;  } eq Pair(&#10;    listOf(Person(&quot;Alice&quot;, 21),&#10;      Person(&quot;Arthricia&quot;, 15)),&#10;    listOf(Person(&quot;Bob&quot;, 25),&#10;      Person(&quot;Bill&quot;, 25),&#10;      Person(&quot;Birdperson&quot;, 42),&#10;      Person(&quot;Charlie&quot;, 21),&#10;      Person(&quot;Crocubot&quot;, 42),&#10;      Person(&quot;Franz&quot;, 21),&#10;      Person(&quot;Revolio&quot;, 33)))&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/People.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/People.kt" />
                                      <option name="text" value="// FromListsToMaps/People.kt&#10;package fromliststomaps&#10;&#10;data class Person(&#10;  val name: String,&#10;  val age: Int&#10;)&#10;&#10;fun people() = listOf(&quot;Alice&quot;, &quot;Arthricia&quot;,&#10;  &quot;Bob&quot;, &quot;Bill&quot;, &quot;Birdperson&quot;, &quot;Charlie&quot;,&#10;  &quot;Crocubot&quot;, &quot;Franz&quot;, &quot;Revolio&quot;).zip(&#10;  listOf(21,15,25,25,42,21,42,21,33)) {&#10;    name, age -&gt; Person(name, age)&#10;  }" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/SimilarOperation.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/SimilarOperation.kt" />
                                      <option name="text" value="// FromListsToMaps/SimilarOperation.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val map = mapOf(1 to &quot;one&quot;,&#10;    -2 to &quot;minus two&quot;)&#10;  map.any { (key, _) -&gt; key &lt; 0 } eq true&#10;  map.all { (key, _) -&gt; key &lt; 0 } eq false&#10;  map.maxBy { it.key }?.value eq &quot;one&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/TransformingMap.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/TransformingMap.kt" />
                                      <option name="text" value="// FromListsToMaps/TransformingMap.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val even = mapOf(2 to &quot;two&quot;, 4 to &quot;four&quot;)&#10;  even.map {                            // [1]&#10;    &quot;${it.key}=${it.value}&quot;&#10;  } eq listOf(&quot;2=two&quot;, &quot;4=four&quot;)&#10;&#10;  even.map { (key, value) -&gt;            // [2]&#10;    &quot;$key=$value&quot;&#10;  } eq listOf(&quot;2=two&quot;, &quot;4=four&quot;)&#10;&#10;  even.mapKeys { (num, _) -&gt; -num }     // [3]&#10;    .mapValues { (_, str) -&gt; &quot;minus $str&quot; } eq&#10;    mapOf(-2 to &quot;minus two&quot;,&#10;      -4 to &quot;minus four&quot;)&#10;&#10;  even.map { (key, value) -&gt;&#10;    -key to &quot;minus $value&quot;&#10;  }.toMap() eq mapOf(-2 to &quot;minus two&quot;, // [4]&#10;    -4 to &quot;minus four&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570420000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;From Lists to Maps (#1)&lt;/h2&gt;&lt;p&gt;Implement the function that given a list of people builds a map where key &#10;is age and value is a list of names of people of this age.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+From+Lists+to+Maps+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497901" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="175" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="175" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="return people.groupBy(Person::age).mapValues { (_, group) -&gt;&#10;        group.map(Person::name)&#10;    }" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package fromListstoMaps01&#10;&#10;import atomictest.eq&#10;&#10;data class Person(val name: String, val age: Int)&#10;&#10;fun buildAgeToNamesMap(people: List&lt;Person&gt;): Map&lt;Int, List&lt;String&gt;&gt; {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val people = listOf(Person(&quot;Alice&quot;, 21),&#10;            Person(&quot;Bob&quot;, 25), Person(&quot;Charlie&quot;, 25))&#10;&#10;    buildAgeToNamesMap(people) eq&#10;            mapOf(21 to listOf(&quot;Alice&quot;),&#10;                    25 to listOf(&quot;Bob&quot;, &quot;Charlie&quot;))&#10;&#10;    buildString {  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package fromListstoMaps01&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestPersonsMap {&#10;    private fun check(&#10;            list: List&lt;Person&gt;&#10;    ) {&#10;        Assert.assertEquals(&quot;Wrong result for $list:&quot;,&#10;                list.groupBy(Person::age).mapValues { (_, group) -&gt;&#10;                    group.map(Person::name)&#10;                },&#10;                buildAgeToNamesMap(list))&#10;&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = check(listOf(Person(&quot;Alice&quot;, 21),&#10;            Person(&quot;Bob&quot;, 25), Person(&quot;Charlie&quot;, 25)))&#10;&#10;&#10;    @Test&#10;    fun test2() = check(listOf())&#10;&#10;    @Test&#10;    fun test3() = check(listOf(Person(&quot;Alice&quot;, 21), Person(&quot;Bob&quot;, 25)))&#10;&#10;    @Test&#10;    fun test4() = check(listOf(Person(&quot;Bob&quot;, 25), Person(&quot;Charlie&quot;, 25)))&#10;&#10;    @Test&#10;    fun test5() = check(listOf(&#10;            Person(&quot;A&quot;, 10), Person(&quot;B&quot;, 10),&#10;            Person(&quot;C&quot;, 20), Person(&quot;D&quot;, 20), Person(&quot;E&quot;, 20), Person(&quot;F&quot;, 20),&#10;            Person(&quot;X&quot;, 30), Person(&quot;Y&quot;, 30), Person(&quot;Z&quot;, 30)&#10;    ))&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570421000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;From Lists to Maps (#2)&lt;/h2&gt;&lt;p&gt;Implement &lt;code&gt;groupBy()&lt;/code&gt; function. Use &lt;code&gt;getOrPut()&lt;/code&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+From+Lists+to+Maps+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497902" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="173" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="173" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="for (element in this) {&#10;        val list = result.getOrPut(keySelector(element)) { mutableListOf() }&#10;        list += element&#10;    }" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package fromListstoMaps02&#10;&#10;import atomictest.eq&#10;&#10;fun &lt;T, R&gt; List&lt;T&gt;.groupBy(keySelector: (T) -&gt; R): Map&lt;R, List&lt;T&gt;&gt; {&#10;    val result = mutableMapOf&lt;R, MutableList&lt;T&gt;&gt;()&#10;    TODO()&#10;    return result&#10;}&#10;&#10;data class Person(val name: String, val age: Int)&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val people = listOf(Person(&quot;Alice&quot;, 21),&#10;            Person(&quot;Bob&quot;, 25), Person(&quot;Charlie&quot;, 25))&#10;&#10;    people.groupBy(Person::age) eq &quot;&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package fromListstoMaps02&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;import kotlin.collections.groupBy as groupByLibrary&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestPersonsMap {&#10;    private fun &lt;T, R&gt; check(&#10;            list: List&lt;T&gt;,&#10;            keySelector: (T) -&gt; R,&#10;            keySelectorStr: String&#10;    ) {&#10;        Assert.assertEquals(&quot;Wrong result for $list grouped by $keySelectorStr&quot;,&#10;                list.groupByLibrary(keySelector),&#10;                list.groupBy(keySelector))&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = check(listOf(Person(&quot;Alice&quot;, 21),&#10;            Person(&quot;Bob&quot;, 25), Person(&quot;Charlie&quot;, 25)),&#10;            Person::age, &quot;Person::age&quot;)&#10;&#10;    @Test&#10;    fun test2() = check(listOf(&quot;abc&quot;, &quot;ahh&quot;, &quot;never&quot;),&#10;            { it.first() }, &quot;{ it.first() }&quot;)&#10;&#10;    @Test&#10;    fun test3() = check((1..20).toList(), { it % 3 }, &quot;{ it % 3 }&quot;)&#10;&#10;    @Test&#10;    fun test4() = check(listOf(Person(&quot;Alice&quot;, 21),&#10;            Person(&quot;Bob&quot;, 25), Person(&quot;Charlie&quot;, 25)),&#10;            Person::name, &quot;Person::name&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570423000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;From Lists to Maps (#3)&lt;/h2&gt;&lt;p&gt;Implement &lt;code&gt;associateBy&lt;/code&gt; using &lt;code&gt;groupBy&lt;/code&gt;.&#10;If two elements have the same key returned by &lt;code&gt;keySelector&lt;/code&gt; the last one should &#10;be added to the map.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+From+Lists+to+Maps+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497903" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="24" />
                                                <option name="offset" value="124" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="24" />
                                            <option name="offset" value="124" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO(&quot;groupBy(???).???&quot;)" />
                                            <option name="possibleAnswer" value="groupBy(keySelector).mapValues { it.value.last() }" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package fromListstoMaps03&#10;&#10;import atomictest.eq&#10;&#10;fun &lt;T, R&gt; List&lt;T&gt;.associateBy(keySelector: (T) -&gt; R): Map&lt;R, T&gt; =&#10;        TODO(&quot;groupBy(???).???&quot;)&#10;&#10;data class Person(val name: String, val age: Int)&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val people = listOf(Person(&quot;Alice&quot;, 21),&#10;            Person(&quot;Bob&quot;, 25), Person(&quot;Charlie&quot;, 25))&#10;&#10;    people.associateBy(Person::name) eq &quot;&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package fromListstoMaps03&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;import kotlin.collections.associateBy as associateByLibrary&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestPersonsMap {&#10;    private fun &lt;T, R&gt; check(&#10;            list: List&lt;T&gt;,&#10;            keySelector: (T) -&gt; R,&#10;            keySelectorStr: String&#10;    ) {&#10;        Assert.assertEquals(&quot;Wrong result for $list associated by $keySelectorStr&quot;,&#10;                list.associateByLibrary(keySelector),&#10;                list.associateBy(keySelector))&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = check(listOf(Person(&quot;Alice&quot;, 21),&#10;            Person(&quot;Bob&quot;, 25), Person(&quot;Charlie&quot;, 25)),&#10;            Person::age, &quot;Person::age&quot;)&#10;&#10;    @Test&#10;    fun test2() = check(listOf(&quot;abc&quot;, &quot;ahh&quot;, &quot;never&quot;),&#10;            { it.first() }, &quot;{ it.first() }&quot;)&#10;&#10;    @Test&#10;    fun test3() = check((1..5).toList(), { it }, &quot;{ it }&quot;)&#10;&#10;    @Test&#10;    fun test4() = check(listOf(Person(&quot;Alice&quot;, 21),&#10;            Person(&quot;Bob&quot;, 25), Person(&quot;Charlie&quot;, 25)),&#10;            Person::name, &quot;Person::name&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570424000" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="150001" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="175316" />
                      <option name="index" value="8" />
                      <option name="name" value="Lambda with Receiver" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538571061000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Lambda with Receiver&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/107895/step/1&quot;&gt;Read &amp;quot;Lambda with Receiver&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497904" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/BuildString.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/BuildString.kt" />
                                      <option name="text" value="// LambdaWithReceiver/BuildString.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  buildString {&#10;    append(&quot;Alphabet: &quot;)&#10;    for (ch in 'a'..'z')&#10;      append(ch)&#10;  } eq&#10;  &quot;Alphabet: abcdefghijklmnopqrstuvwxyz&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/BuildStringAndThis.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/BuildStringAndThis.kt" />
                                      <option name="text" value="// LambdaWithReceiver/BuildStringAndThis.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  buildString {&#10;    this.append(&quot;Alphabet: &quot;)     // [1]&#10;    for (ch in 'a'..'z')&#10;      append(ch)                  // [2]&#10;  } eq&#10;  &quot;Alphabet: abcdefghijklmnopqrstuvwxyz&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Declarations.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Declarations.kt" />
                                      <option name="text" value="// LambdaWithReceiver/Declarations.kt&#10;package lambdawithreceiver&#10;import atomictest.eq&#10;&#10;fun buildString1(&#10;  builderAction:&#10;    (StringBuilder) -&gt; Unit   // [1]&#10;): String {&#10;  val sb = StringBuilder()&#10;  builderAction(sb)           // [2]&#10;  return sb.toString()&#10;}&#10;&#10;fun buildString2(&#10;  builderAction:&#10;    StringBuilder.() -&gt; Unit  // [3]&#10;): String {&#10;  val sb = StringBuilder()&#10;  sb.builderAction()          // [4]&#10;  return sb.toString()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  buildString1 {&#10;    it.append(&quot;Regular lambda&quot;)&#10;  } eq &quot;Regular lambda&quot;&#10;&#10;  buildString2 {&#10;    append(&quot;Lambda with receiver&quot;)&#10;  } eq &quot;Lambda with receiver&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Extensions.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Extensions.kt" />
                                      <option name="text" value="// LambdaWithReceiver/Extensions.kt&#10;package lambdawithreceiver&#10;&#10;fun StringBuilder.appendAlphabet() {&#10;  this.append(&quot;Alphabet:&quot;)   // Explicit&#10;  for (ch in 'a'..'z')&#10;    append(ch)               // Implicit&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/RegularLambda.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/RegularLambda.kt" />
                                      <option name="text" value="// LambdaWithReceiver/RegularLambda.kt&#10;package regularlambda&#10;import atomictest.eq&#10;&#10;fun buildStr(&#10;  builderAction: (StringBuilder) -&gt; Unit&#10;): String {&#10;  val sb = StringBuilder()&#10;  builderAction(sb)&#10;  return sb.toString()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  buildStr {&#10;    it.append(&quot;Alphabet: &quot;)&#10;    for (ch in 'a'..'z')&#10;      it.append(ch)&#10;  } eq&#10;  &quot;Alphabet: abcdefghijklmnopqrstuvwxyz&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/StringBuilder.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/StringBuilder.kt" />
                                      <option name="text" value="// LambdaWithReceiver/StringBuilder.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val stringBuilder = StringBuilder()  // [1]&#10;  stringBuilder.append(&quot;Alphabet: &quot;)   // [2]&#10;  for (ch in 'a'..'z')&#10;    stringBuilder.append(ch)           // [3]&#10;  stringBuilder.toString() eq          // [4]&#10;    &quot;Alphabet: abcdefghijklmnopqrstuvwxyz&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570426000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Lambda with Receiver (#1)&lt;/h2&gt;&lt;p&gt;Implement the &lt;code&gt;drawSquare()&lt;/code&gt; function returning a square of star symbols in a string.&#10;It takes &lt;code&gt;width&lt;/code&gt; as an argument.&#10;For &lt;code&gt;width = 3&lt;/code&gt; the following output is expected:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;***&#10;***&#10;***&#10;&lt;/code&gt;&lt;/pre&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Lambda+with+Receiver+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497905" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="98" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="98" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="repeat(width) {&#10;        appendln(&quot;*&quot;.repeat(width))&#10;    }" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package lambdawithReceiver1&#10;&#10;import atomictest.eq&#10;&#10;fun drawSquare(width: Int) = buildString {&#10;    TODO()&#10;}.trim()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    drawSquare(3) eq&#10;            &quot;&quot;&quot;|***&#10;               |***&#10;               |***&quot;&quot;&quot;.trimMargin()&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package lambdawithReceiver1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestDrawSquare {&#10;  private fun check(width: Int) {&#10;    Assert.assertEquals(&quot;Wrong result for width = $width:&quot;,&#10;      buildString {&#10;        repeat(width) {&#10;          appendln(&quot;*&quot;.repeat(width))&#10;        }&#10;      }.trim(),&#10;      drawSquare(width))&#10;  }&#10;&#10;  @Test&#10;  fun test1Sample() = check(3)&#10;&#10;  @Test&#10;  fun test2() = check(0)&#10;&#10;  @Test&#10;  fun test3() = check(1)&#10;&#10;  @Test&#10;  fun test4() = check(5)&#10;&#10;  @Test&#10;  fun test5() = check(6)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570427000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Lambda with Receiver (#2)&lt;/h2&gt;&lt;p&gt;Implement a toy function &lt;code&gt;buildList()&lt;/code&gt; similar to &lt;code&gt;buildString()&lt;/code&gt; which creates&#10;a mutable list and applies actions passed in a lambda argument.&#10;Note that there's no practical need in such function in the standard library,&#10;just implement it as an exercise.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Lambda+with+Receiver+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497906" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="119" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="119" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="&#10;    val list = mutableListOf&lt;Int&gt;()&#10;    list.action()&#10;    return list" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package lambdawithReceiver2&#10;&#10;import atomictest.eq&#10;&#10;fun buildList(action: MutableList&lt;Int&gt;.() -&gt; Unit): List&lt;Int&gt; {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val list = buildList {&#10;        add(0)&#10;        for (i in 1..5) {&#10;            add(i)&#10;        }&#10;    }&#10;    list eq listOf(0, 1, 2, 3, 4, 5)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package lambdawithReceiver2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestBuildList {&#10;    private fun check(&#10;            message: String,&#10;            action: MutableList&lt;Int&gt;.() -&gt; Unit&#10;    ) {&#10;        Assert.assertEquals(message,&#10;                mutableListOf&lt;Int&gt;().apply(action),&#10;                buildList(action))&#10;&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = check(&quot;Wrong result for sample:&quot;) {&#10;        add(0)&#10;        for (i in 1..5) {&#10;            add(i)&#10;        }&#10;    }&#10;&#10;    @Test&#10;    fun test2() = check(&quot;Wrong result for 'buildList { add(42) }':&quot;) {&#10;        add(42)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570428000" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="150002" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="175317" />
                      <option name="index" value="9" />
                      <option name="name" value="The with() Function" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538571069000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;The &lt;code&gt;with()&lt;/code&gt; Function&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/107896/step/1&quot;&gt;Read &amp;quot;The &lt;code&gt;with()&lt;/code&gt; Function&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497907" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Repetitive.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Repetitive.kt" />
                                      <option name="text" value="// WithFunction/Repetitive.kt&#10;package withfunction&#10;import atomictest.eq&#10;&#10;class Window(&#10;  val id: String,&#10;  var x: Int = 0,&#10;  var y: Int = 0,&#10;  var width: Int = 200,&#10;  var height: Int = 100&#10;)&#10;&#10;fun adjustWindow(window: Window) {&#10;  window.x = 10&#10;  window.y = 10&#10;  window.width *= 2&#10;  window.height *= 2&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val window = Window(&quot;my&quot;)&#10;  adjustWindow(window)&#10;  window.x eq 10&#10;  window.width eq 400&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/UsingWith.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/UsingWith.kt" />
                                      <option name="text" value="// WithFunction/UsingWith.kt&#10;package withfunction&#10;import atomictest.eq&#10;&#10;fun withAdjust(window: Window) {&#10;  with(window) {&#10;    x = 10&#10;    y = 10&#10;    width *= 2&#10;    height *= 2&#10;  }&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val window = Window(&quot;my&quot;)&#10;  withAdjust(window)&#10;  window.x eq 10&#10;  window.width eq 400&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/WithDeclaration.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/WithDeclaration.kt" />
                                      <option name="text" value="// WithFunction/WithDeclaration.kt&#10;package simplifieddeclaration&#10;import withfunction.Window&#10;&#10;fun &lt;T&gt; with(&#10;  receiver: T,                 // [1]&#10;  operations: T.() -&gt; Unit     // [2]&#10;) = receiver.operations()      // [3]&#10;&#10;fun withAdjust(window: Window) {&#10;  with(window) {               // [4]&#10;    this.x = 10                // [5]&#10;    y = 10                     // [6]&#10;    width *= 2&#10;    height *= 2&#10;  }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570430000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;The &lt;code&gt;with()&lt;/code&gt; Function (#1)&lt;/h2&gt;&lt;p&gt;Implement &lt;code&gt;buildString()&lt;/code&gt; using &lt;code&gt;with()&lt;/code&gt; helper function.&#10;Note that &lt;code&gt;with()&lt;/code&gt; returns the result of the lambda.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+The+with%28%29+Function+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497908" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="152" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="152" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="action()&#10;            toString()" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package thewithFunction1&#10;&#10;import atomictest.eq&#10;&#10;fun buildString(action: StringBuilder.() -&gt; Unit): String =&#10;        with(StringBuilder()) {&#10;            TODO()&#10;        }&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    buildString {&#10;        append(&quot;Alphabet: &quot;)&#10;        for (ch in 'a'..'z') {&#10;            append(ch)&#10;        }&#10;    } eq &quot;Alphabet: abcdefghijklmnopqrstuvwxyz&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package thewithFunction1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;import kotlin.text.buildString as buildStringLibrary&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestBuildStringViaWith {&#10;    private fun check(&#10;            message: String,&#10;            action: StringBuilder.() -&gt; Unit&#10;    ) {&#10;        Assert.assertEquals(message,&#10;                buildStringLibrary(action),&#10;                buildString(action))&#10;&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = check(&quot;Wrong result for sample&quot;) {&#10;        append(&quot;Alphabet: &quot;)&#10;        for (ch in 'a'..'z') {&#10;            append(ch)&#10;        }&#10;    }&#10;&#10;    @Test&#10;    fun test2() = check(&quot;&quot;&quot;Wrong result for 'buildString { append(&quot;hi!&quot;) }'&quot;&quot;&quot;) {&#10;        append(&quot;hi!&quot;)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570431000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;The &lt;code&gt;with()&lt;/code&gt; Function (#2)&lt;/h2&gt;&lt;p&gt;To better understand the difference between an ordinary lambda and&#10;a lambda with receiver, implement the toy &lt;code&gt;with2()&lt;/code&gt; function which&#10;takes an ordinary lambda as an argument instead of a lambda with receiver.&#10;Note that there're no function analogous to &lt;code&gt;with2()&lt;/code&gt; in the standard&#10;library, however, there're similar extension functions taking ordinary&#10;lambdas, as explained in [Library Helpers] atom.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+The+with%28%29+Function+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497909" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="253" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="253" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="return block(receiver)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package thewithFunction2&#10;&#10;import atomictest.eq&#10;&#10;class Window(&#10;        val id: String,&#10;        var x: Int = 0,&#10;        var y: Int = 0,&#10;        var width: Int = 200,&#10;        var height: Int = 100&#10;)&#10;&#10;fun &lt;T, R&gt; with2(receiver: T, block: (T) -&gt; R): R {&#10;    TODO()&#10;}&#10;&#10;fun adjustWindow(window: Window) {&#10;    with2(window) {&#10;        it.x = 10&#10;        it.y = 10&#10;        it.width *= 2&#10;        it.height *= 2&#10;    }&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val window = Window(&quot;my&quot;)&#10;    adjustWindow(window)&#10;    window.x eq 10&#10;    window.width eq 400&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package thewithFunction2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestWith2Function {&#10;    @Test&#10;    fun test1Sample() {&#10;        val window = Window(&quot;my&quot;)&#10;        with2(window) {&#10;            it.x = 10&#10;            it.y = 10&#10;            it.width *= 2&#10;            it.height *= 2&#10;        }&#10;        Assert.assertEquals(&quot;Wrong result for sample (x)&quot;, 10, window.x)&#10;        Assert.assertEquals(&quot;Wrong result for sample (y)&quot;, 10, window.y)&#10;        Assert.assertEquals(&quot;Wrong result for sample (width)&quot;, 400, window.width)&#10;        Assert.assertEquals(&quot;Wrong result for sample (height)&quot;, 200, window.height)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570432000" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="150003" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="175318" />
                      <option name="index" value="10" />
                      <option name="name" value="Library Helpers" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538571076000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Library Helpers&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/107897/step/1&quot;&gt;Read &amp;quot;Library Helpers&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497910" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Also.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Also.kt" />
                                      <option name="text" value="// LibraryHelpers/Also.kt&#10;package libraryhelpers&#10;&#10;fun showAdjustedWindow(window: Window) {&#10;  window.apply {&#10;    x = 7&#10;    y = 9&#10;    w *= 3&#10;    h *= 4&#10;  }.also {                   // [1]&#10;    showWindow(it)&#10;  }&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val w = Window()&#10;  println(w)&#10;  showAdjustedWindow(w)&#10;}&#10;/* Output:&#10;Window(id=none, x=0, y=0, w=200, h=100)&#10;Showing none window...&#10;Window(id=none, x=7, y=9, w=600, h=400)&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ApplyIfNotNull.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ApplyIfNotNull.kt" />
                                      <option name="text" value="// LibraryHelpers/ApplyIfNotNull.kt&#10;package libraryhelpers&#10;import atomictest.eq&#10;&#10;fun showMainWindow(&#10;  windowById: Map&lt;String, Window&gt;&#10;) {&#10;  val mainWindow =&#10;    windowById[&quot;main&quot;]?.apply {&#10;      x = 10&#10;      y = 10&#10;      w *= 2&#10;      h *= 2&#10;    } ?: return                 // [1]&#10;  showWindow(mainWindow)&#10;}&#10;&#10;fun showWindow(window: Window) {&#10;  // ...&#10;  println(&quot;Showing ${window.id} window...&quot;)&#10;  println(window)&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val mainWindow = Window(&quot;main&quot;)&#10;  showMainWindow(mapOf(&quot;main&quot; to mainWindow))&#10;  mainWindow.x eq 10&#10;  val noneWindow = Window()&#10;  showMainWindow(mapOf(&quot;none&quot; to noneWindow))&#10;  noneWindow.x eq 0&#10;}&#10;/* Output:&#10;Showing main window...&#10;Window(id=main, x=10, y=10, w=400, h=200)&#10;10&#10;0&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ApplyVsAlso.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ApplyVsAlso.kt" />
                                      <option name="text" value="// LibraryHelpers/ApplyVsAlso.kt&#10;package libraryhelpers&#10;import atomictest.eq&#10;&#10;fun Window.dup() =&#10;  Window(&quot;dup of $id&quot;).also {&#10;    it.x = this.x               // [1]&#10;    it.y = this.y&#10;    it.w = this.w&#10;    it.h = this.h&#10;  }&#10;&#10;fun Window.dup2() =&#10;  Window(&quot;dup of $id&quot;).also { win -&gt;&#10;    win.x = this.x&#10;    win.y = this.y&#10;    win.w = this.w&#10;    win.h = this.h&#10;  }&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val first = Window(&quot;first&quot;).apply {&#10;    w = 500&#10;    h = 100&#10;  }&#10;  val second = first.dup()&#10;  second.id eq &quot;dup of first&quot;&#10;  second.w eq 500&#10;  second.h eq 100&#10;  val third = second.dup()&#10;  third.id eq &quot;dup of dup of first&quot;&#10;  third.w eq 500&#10;  third.h eq 100&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/CheckingArgument.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/CheckingArgument.kt" />
                                      <option name="text" value="// LibraryHelpers/CheckingArgument.kt&#10;package libraryhelpers&#10;&#10;fun showGreetingWindow(&#10;  windowById: Map&lt;String, Window&gt;&#10;) {&#10;  val greetingWindow = windowById[&quot;greeting&quot;]&#10;  // Check for null using if:&#10;  if (greetingWindow != null) {&#10;    showWindow(greetingWindow)&#10;  }&#10;  // Check for null using let():&#10;  greetingWindow?.let {&#10;    showWindow(it)&#10;  }&#10;  // Explicit lambda argument:&#10;  greetingWindow?.let { win -&gt;&#10;    showWindow(win)&#10;  }&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  showGreetingWindow(mapOf(&#10;    &quot;greeting&quot; to Window(&quot;greeting&quot;)))&#10;  println(&quot;no Window:&quot;)&#10;  showGreetingWindow(mapOf())&#10;}&#10;/* Output:&#10;Showing greeting window...&#10;Window(id=greeting, x=0, y=0, w=200, h=100)&#10;Showing greeting window...&#10;Window(id=greeting, x=0, y=0, w=200, h=100)&#10;Showing greeting window...&#10;Window(id=greeting, x=0, y=0, w=200, h=100)&#10;no Window:&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Let.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Let.kt" />
                                      <option name="text" value="// LibraryHelpers/Let.kt&#10;package libraryhelpers&#10;&#10;fun showGreetingWindow2(&#10;  windowById: Map&lt;String, Window&gt;&#10;) {&#10;  windowById[&quot;greeting&quot;]?.let {&#10;    showWindow(it)&#10;  }&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  showGreetingWindow2(mapOf(&#10;    &quot;greeting&quot; to Window(&quot;greeting&quot;)))&#10;  println(&quot;no Window:&quot;)&#10;  showGreetingWindow2(mapOf())&#10;}&#10;/* Output:&#10;Showing greeting window...&#10;Window(id=greeting, x=0, y=0, w=200, h=100)&#10;no Window:&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/NullableReceiver.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/NullableReceiver.kt" />
                                      <option name="text" value="// LibraryHelpers/NullableReceiver.kt&#10;package libraryhelpers&#10;&#10;data class Window(  // Makes it displayable&#10;  val id: String = &quot;none&quot;,&#10;  var x: Int = 0,   // Horizontal location&#10;  var y: Int = 0,   // Vertical Location&#10;  var w: Int = 200, // Width&#10;  var h: Int = 100  // Height&#10;)&#10;&#10;fun adjustWindowIfNotNull(window: Window?) {&#10;  window?.run {          // [1]&#10;    this.x = 10          // [2]&#10;    y = 10&#10;    w *= 2&#10;    h *= 2&#10;    println(this)&#10;  }&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val windowOrNull: Window? = null&#10;  // Nothing happens:&#10;  adjustWindowIfNotNull(windowOrNull)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ResultOfApply.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ResultOfApply.kt" />
                                      <option name="text" value="// LibraryHelpers/ResultOfApply.kt&#10;package libraryhelpers&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val mutableList = mutableListOf&lt;Int&gt;()&#10;  val result = mutableList.apply {&#10;    add(17)&#10;    add(42)&#10;    remove(0)&#10;  }&#10;  result eq listOf(17, 42)&#10;  mutableList eq listOf(17, 42)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ResultOfWith.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ResultOfWith.kt" />
                                      <option name="text" value="// LibraryHelpers/ResultOfWith.kt&#10;package libraryhelpers&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val mutableList = mutableListOf&lt;Int&gt;()&#10;  val result = with(mutableList) {&#10;    add(17)&#10;    add(42)&#10;    remove(0)&#10;  }&#10;  result eq false&#10;  mutableList eq listOf(17, 42)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570435000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Library Helpers (#1)&lt;/h2&gt;&lt;p&gt;In the following examples the helper functions are used not in the most&#10;efficient way. In each case choose another helper function which better&#10;suits the context.&lt;/p&gt;&lt;p&gt;There are no tests for this task, just compare your version with the&#10;solution when you complete it.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Library+Helpers+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497911" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="87" />
                                                <option name="offset" value="118" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="87" />
                                            <option name="offset" value="118" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="&#10;    x.let {&#10;        it.first = 1&#10;        it.second = 2&#10;        it.third = 3&#10;    }&#10;    " />
                                            <option name="possibleAnswer" value="with(x) {&#10;        first = 1&#10;        second = 2&#10;        third = 3&#10;    }&#10;    " />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="94" />
                                                <option name="offset" value="287" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="94" />
                                            <option name="offset" value="287" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="&#10;    y?.let {&#10;        with(it) {&#10;            start()&#10;            finish()&#10;        }&#10;    }&#10;    " />
                                            <option name="possibleAnswer" value="y?.run {&#10;        start()&#10;        finish()&#10;    }&#10;    " />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="2" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="66" />
                                                <option name="offset" value="441" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="66" />
                                            <option name="offset" value="441" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="&#10;    val result = with(z) {&#10;        init()&#10;        this&#10;    }&#10;    " />
                                            <option name="possibleAnswer" value=" val result = z.apply {&#10;        init()&#10;    }&#10;    " />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package libraryHelpers1&#10;&#10;class X {&#10;    var first = 0&#10;    var second = 0&#10;    var third = 0&#10;}&#10;&#10;fun example1(x: X) {&#10;    &#10;    x.let {&#10;        it.first = 1&#10;        it.second = 2&#10;        it.third = 3&#10;    }&#10;    &#10;}&#10;&#10;class Y {&#10;    fun start() {}&#10;    fun finish() {}&#10;}&#10;&#10;fun example2(y: Y?) {&#10;    &#10;    y?.let {&#10;        with(it) {&#10;            start()&#10;            finish()&#10;        }&#10;    }&#10;    &#10;}&#10;&#10;class Z {&#10;    fun init() {}&#10;}&#10;&#10;fun example3(z: Z) {&#10;    &#10;    val result = with(z) {&#10;        init()&#10;        this&#10;    }&#10;    &#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    example1(X())&#10;    example2(Y())&#10;    example3(Z())&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package libraryHelpers1&#10;&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570435000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Library Helpers (#2)&lt;/h2&gt;&lt;p&gt;Implement all the helper functions &lt;code&gt;run&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;also&lt;/code&gt;.&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;center&quot;&gt;&lt;code&gt;receiver.&amp;lt;helper function&amp;gt; { ... }&lt;/code&gt;&lt;/th&gt;&lt;th align=&quot;center&quot;&gt;Take lambda with receiver:&lt;br&gt;&lt;code&gt;{ .. this .. }&lt;/code&gt;&lt;/th&gt;&lt;th align=&quot;center&quot;&gt;Take regular lambda:&lt;br&gt;&lt;code&gt;{ .. it .. }&lt;/code&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;Return result of the lambda&lt;/strong&gt;&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;&lt;code&gt;run&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;&lt;code&gt;let&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;intellij-row-even&quot;&gt;&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;Return receiver&lt;/strong&gt;&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;&lt;code&gt;apply&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;&lt;code&gt;also&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Library+Helpers+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497912" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="103" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="103" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="return receiver.block()" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="157" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="157" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="return block()" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="2" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="210" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="210" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="return block(this)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="3" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="266" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="266" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="block()&#10;    return this" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="4" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="320" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="320" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="block(this)&#10;    return this" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package libraryHelpers2&#10;&#10;import atomictest.eq&#10;&#10;fun &lt;T, R&gt; with(receiver: T, block: T.() -&gt; R): R {&#10;    TODO()&#10;}&#10;&#10;fun &lt;T, R&gt; T.run(block: T.() -&gt; R): R {&#10;    TODO()&#10;}&#10;&#10;fun &lt;T, R&gt; T.let(block: (T) -&gt; R): R {&#10;    TODO()&#10;}&#10;&#10;fun &lt;T&gt; T.apply(block: T.() -&gt; Unit): T {&#10;    TODO()&#10;}&#10;&#10;fun &lt;T&gt; T.also(block: (T) -&gt; Unit): T {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val sb = StringBuilder()&#10;    with (sb) {&#10;        append(&quot;0&quot;)&#10;    }&#10;    sb.toString() eq &quot;0&quot;&#10;&#10;    StringBuilder().run {&#10;        append(&quot;1&quot;)&#10;        toString()&#10;    } eq &quot;1&quot;&#10;&#10;    StringBuilder().let {&#10;        it.append(&quot;2&quot;)&#10;        it.toString()&#10;    } eq &quot;2&quot;&#10;&#10;    StringBuilder().apply {&#10;        append(&quot;3&quot;)&#10;    }.toString() eq &quot;3&quot;&#10;&#10;    StringBuilder().also {&#10;        it.append(&quot;4&quot;)&#10;    }.toString() eq &quot;4&quot;&#10;&#10;    class Rectangle(var width: Int = 0, var height: Int = 0)&#10;    val map = mapOf(&quot;square&quot; to Rectangle())&#10;    val square = map[&quot;square&quot;]?.apply {&#10;        width = 20&#10;        height = 20&#10;    }&#10;    square?.width eq 20&#10;    square?.height eq 20&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package libraryHelpers2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestPersonsMap {&#10;    private fun check(actual: String, expected: String) {&#10;        Assert.assertEquals(&quot;Wrong result for sample&quot;,&#10;                expected,&#10;                actual)&#10;&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() {&#10;        val sb = StringBuilder()&#10;        with(sb) {&#10;            append(&quot;0&quot;)&#10;        }&#10;        check(sb.toString(), &quot;0&quot;)&#10;&#10;    }&#10;    @Test&#10;    fun test2Sample() {&#10;        check(StringBuilder().run {&#10;            append(&quot;1&quot;)&#10;            toString()&#10;        }, &quot;1&quot;)&#10;    }&#10;&#10;    @Test&#10;    fun test3Sample() {&#10;        check(StringBuilder().let {&#10;            it.append(&quot;2&quot;)&#10;            it.toString()&#10;        }, &quot;2&quot;)&#10;    }&#10;&#10;    @Test&#10;    fun test4Sample() {&#10;        check(StringBuilder().apply {&#10;            append(&quot;3&quot;)&#10;        }.toString(), &quot;3&quot;)&#10;    }&#10;&#10;    @Test&#10;    fun test5Sample() {&#10;        check(StringBuilder().also {&#10;            it.append(&quot;4&quot;)&#10;        }.toString(), &quot;4&quot;)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570436000" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="150004" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="175319" />
                      <option name="index" value="11" />
                      <option name="name" value="Sequences" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538571082000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Sequences&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/107898/step/1&quot;&gt;Read &amp;quot;Sequences&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497913" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/EagerEvaluation.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/EagerEvaluation.kt" />
                                      <option name="text" value="// Sequences/EagerEvaluation.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf(1, 2, 3, 4)&#10;&#10;  list.filter { it % 2 == 0 }&#10;    .map { it * it }&#10;    .any { it &lt; 10 } eq true&#10;&#10;  // Identical to:&#10;  val mid1 = list.filter { it % 2 == 0 }&#10;  mid1 eq listOf(2, 4)&#10;  val mid2 = mid1.map { it * it }&#10;  mid2 eq listOf(4, 16)&#10;  mid2.any { it &lt; 10 } eq true&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/EagerVsLazyEvaluation.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/EagerVsLazyEvaluation.kt" />
                                      <option name="text" value="// Sequences/EagerVsLazyEvaluation.kt&#10;package sequences&#10;&#10;fun Int.isEven(): Boolean {&#10;  println(&quot;$this.isEven()&quot;)&#10;  return this % 2 == 0&#10;}&#10;&#10;fun Int.square(): Int {&#10;  println(&quot;$this.square()&quot;)&#10;  return this * this&#10;}&#10;&#10;fun Int.lessThanTen(): Boolean {&#10;  println(&quot;${this}.lessThanTen()&quot;)&#10;  return this &lt; 10&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf(1, 2, 3, 4)&#10;&#10;  println(&quot;----- List: -----&quot;)&#10;  val r1 = list&#10;    .filter(Int::isEven)&#10;    .map(Int::square)&#10;    .any(Int::lessThanTen)&#10;  println(r1)&#10;&#10;  println(&quot;--- Sequence: ---&quot;)&#10;  val r2 = list.asSequence()&#10;    .filter(Int::isEven)&#10;    .map(Int::square)&#10;    .any(Int::lessThanTen)&#10;  println(r2)&#10;}&#10;/* Output:&#10;----- List: -----&#10;1.isEven()&#10;2.isEven()&#10;3.isEven()&#10;4.isEven()&#10;2.square()&#10;4.square()&#10;4.lessThanTen()&#10;true&#10;--- Sequence: ---&#10;1.isEven()&#10;2.isEven()&#10;2.square()&#10;4.lessThanTen()&#10;true&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/NoComputationYet.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/NoComputationYet.kt" />
                                      <option name="text" value="// Sequences/NoComputationYet.kt&#10;package sequences&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf(1, 2, 3, 4)&#10;  val r = list.asSequence()&#10;    .filter(Int::isEven)&#10;    .map(Int::square)&#10;  println(r)&#10;}&#10;/* Sample output:&#10;kotlin.sequences.TransformingSequence@1218025c&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/TerminalOperations.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/TerminalOperations.kt" />
                                      <option name="text" value="// Sequences/TerminalOperations.kt&#10;package sequences&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf(1, 2, 3, 4)&#10;  val r = list.asSequence()&#10;    .filter(Int::isEven)&#10;    .map(Int::square)&#10;    .toList()&#10;  println(r)&#10;}&#10;/* Output:&#10;1.isEven()&#10;2.isEven()&#10;2.square()&#10;3.isEven()&#10;4.isEven()&#10;4.square()&#10;[4, 16]&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570439000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Sequences (#1)&lt;/h2&gt;&lt;p&gt;All the tasks for these atom use the classes &lt;code&gt;Instructor&lt;/code&gt;, &lt;code&gt;Student&lt;/code&gt;, &lt;code&gt;Lesson&lt;/code&gt;&#10;and &lt;code&gt;School&lt;/code&gt; defined in &lt;code&gt;School.kt&lt;/code&gt;. It represents an online language school &#10;that provides a service to organize remote lessons for an instructor and a group &#10;of students. Each student can sign up for classes with different instructors.&#10;After the lesson a student can rate it, and these ratings are stored together &#10;with the other information about the lesson.&lt;/p&gt;&lt;p&gt;Your first task is to find all the common lessons for a given student and &#10;instructor.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Sequences+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497914" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/School.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/School.kt" />
                                      <option name="text" value="package sequences1&#10;&#10;data class Instructor(val name: String)&#10;&#10;data class Student(val name: String)&#10;&#10;data class Lesson(&#10;        val instructor: Instructor,&#10;        val students: Set&lt;Student&gt;,&#10;        val rating: Map&lt;Student, Int&gt;&#10;)&#10;&#10;data class School(&#10;        val instructors: Set&lt;Instructor&gt;,&#10;        val students: Set&lt;Student&gt;,&#10;        val lessons: Sequence&lt;Lesson&gt;&#10;)" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="132" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="132" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="return lessons.filter {&#10;        instructor == it.instructor &amp;&amp; student in it.students&#10;    }" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package sequences1&#10;&#10;fun School.getCommonLessons(&#10;        instructor: Instructor,&#10;        student: Student&#10;): Sequence&lt;Lesson&gt; {&#10;    TODO()&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package sequences1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;abstract class TestSchool {&#10;    private val instructors = ('A'..'D')&#10;            .map { it to Instructor(&quot;Instructor-$it&quot;) }&#10;            .toMap()&#10;&#10;    protected fun inst(c: Char) = instructors.getValue(c)&#10;&#10;    private val students = (1..7)&#10;            .map { it to Student(&quot;Student-$it&quot;) }&#10;            .toMap()&#10;&#10;    protected fun st(i: Int) = students.getValue(i)&#10;&#10;    protected fun lsn(instructor: Char, vararg students: Int) =&#10;            Lesson(inst(instructor), students.map { st(it) }.toSet(), mapOf())&#10;&#10;    protected fun schl(lessons: List&lt;Lesson&gt;) =&#10;            School(instructors.values.toSet(), students.values.toSet(),&#10;                    lessons.asSequence())&#10;}&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestCommonLessons : TestSchool() {&#10;    private fun check(&#10;            instructor: Instructor,&#10;            student: Student,&#10;            schoolLessons: List&lt;Lesson&gt;,&#10;            result: List&lt;Int&gt;) {&#10;        Assert.assertEquals(&quot;Wrong result for ${instructor.name}, &quot; +&#10;                &quot;${student.name}, $schoolLessons:&quot;,&#10;                schoolLessons.filterIndexed { index, _ -&gt; index in result },&#10;                schl(schoolLessons).getCommonLessons(instructor, student).toList())&#10;    }&#10;&#10;    @Test&#10;    fun test1() {&#10;        check(inst('A'), st(1), listOf(lsn('A', 1)), listOf(0))&#10;    }&#10;&#10;    @Test&#10;    fun test2() {&#10;        check(inst('A'), st(1), listOf(&#10;                lsn('A', 1, 2, 3),&#10;                lsn('B', 1, 2, 3),&#10;                lsn('A', 1)&#10;        ), listOf(0, 2))&#10;    }&#10;&#10;    @Test&#10;    fun test3() {&#10;        check(inst('A'), st(1), listOf(&#10;                lsn('A', 2, 3),&#10;                lsn('B', 1, 2, 3),&#10;                lsn('A', 4)&#10;        ), listOf())&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570440000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Sequences (#2)&lt;/h2&gt;&lt;p&gt;Implement the functions &lt;code&gt;getStudentInstructors()&lt;/code&gt; and &lt;code&gt;getStudentsOf()&lt;/code&gt;.&#10;&lt;code&gt;getStudentInstructors()&lt;/code&gt; takes &lt;code&gt;Student&lt;/code&gt; as an argument and finds all &#10;instructors that had classes with this student. &#10;&lt;code&gt;getStudentsOf()&lt;/code&gt; takes &lt;code&gt;Instructor&lt;/code&gt; as an argument and finds all students&#10;that attended the classes with this instructor.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Sequences+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497915" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/School.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/School.kt" />
                                      <option name="text" value="package sequences2&#10;&#10;data class Instructor(val name: String)&#10;&#10;data class Student(val name: String)&#10;&#10;data class Lesson(&#10;        val instructor: Instructor,&#10;        val students: Set&lt;Student&gt;,&#10;        val rating: Map&lt;Student, Int&gt;&#10;)&#10;&#10;data class School(&#10;        val instructors: Set&lt;Instructor&gt;,&#10;        val students: Set&lt;Student&gt;,&#10;        val lessons: Sequence&lt;Lesson&gt;&#10;)" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="104" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="104" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="return lessons.filter {&#10;        student in it.students&#10;    }.mapTo(mutableSetOf()) { it.instructor }" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="193" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="193" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="return lessons.filter {&#10;        instructor == it.instructor&#10;    }.flatMapTo(mutableSetOf()) { it.students.asSequence() }" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package sequences2&#10;&#10;fun School.getStudentInstructors(&#10;        student: Student&#10;): Set&lt;Instructor&gt; {&#10;    TODO()&#10;}&#10;&#10;fun School.getStudentsOf(&#10;        instructor: Instructor&#10;): Set&lt;Student&gt; {&#10;    TODO()&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package sequences2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;abstract class TestSchool {&#10;    private val instructors = ('A'..'D')&#10;            .map { it to Instructor(&quot;Instructor-$it&quot;) }&#10;            .toMap()&#10;&#10;    protected fun inst(c: Char) = instructors.getValue(c)&#10;&#10;    private val students = (1..7)&#10;            .map { it to Student(&quot;Student-$it&quot;) }&#10;            .toMap()&#10;&#10;    protected fun st(i: Int) = students.getValue(i)&#10;&#10;    protected fun lsn(instructor: Char, vararg students: Int) =&#10;            Lesson(inst(instructor), students.map { st(it) }.toSet(), mapOf())&#10;&#10;    protected fun schl(lessons: List&lt;Lesson&gt;) =&#10;            School(instructors.values.toSet(), students.values.toSet(),&#10;                    lessons.asSequence())&#10;}&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestGettingInstructorOrStudent : TestSchool() {&#10;    private fun checkInstructors(&#10;            student: Student,&#10;            schoolLessons: List&lt;Lesson&gt;,&#10;            result: List&lt;Char&gt;&#10;    ) {&#10;        Assert.assertEquals(&quot;Wrong result for ${student.name}, &quot; +&#10;                &quot;$schoolLessons:&quot;,&#10;                result.map { inst(it) }.toSet(),&#10;                schl(schoolLessons).getStudentInstructors(student))&#10;    }&#10;&#10;    private fun checkStudents(&#10;            instructor: Instructor,&#10;            schoolLessons: List&lt;Lesson&gt;,&#10;            result: List&lt;Int&gt;&#10;    ) {&#10;        Assert.assertEquals(&quot;Wrong result for ${instructor.name}, &quot; +&#10;                &quot;$schoolLessons:&quot;,&#10;                result.map { st(it) }.toSet(),&#10;                schl(schoolLessons).getStudentsOf(instructor))&#10;    }&#10;&#10;    @Test&#10;    fun test1() {&#10;        checkInstructors(st(1), listOf(lsn('A', 1)), listOf('A'))&#10;    }&#10;&#10;    @Test&#10;    fun test2() {&#10;        checkInstructors(st(1), listOf(&#10;                lsn('A', 1, 2, 3),&#10;                lsn('B', 1, 2, 3),&#10;                lsn('A', 1)&#10;        ), listOf('A', 'B'))&#10;    }&#10;&#10;    @Test&#10;    fun test3() {&#10;        checkInstructors(st(1), listOf(&#10;                lsn('A', 2, 3),&#10;                lsn('B', 1, 2, 3),&#10;                lsn('A', 4)&#10;        ), listOf('B'))&#10;    }&#10;&#10;    @Test&#10;    fun test4() {&#10;        checkStudents(inst('A'), listOf(lsn('A', 1)), listOf(1))&#10;    }&#10;&#10;    @Test&#10;    fun test5() {&#10;        checkStudents(inst('A'), listOf(&#10;                lsn('A', 1, 2),&#10;                lsn('B', 1, 2, 3),&#10;                lsn('A', 4)&#10;        ), listOf(1, 2, 4))&#10;    }&#10;&#10;    @Test&#10;    fun test6() {&#10;        checkStudents(inst('C'), listOf(&#10;                lsn('A', 2, 3),&#10;                lsn('C', 1, 2),&#10;                lsn('C', 1, 2),&#10;                lsn('B', 1, 2, 3),&#10;                lsn('C', 3)&#10;        ), listOf(1, 2, 3))&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570441000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Sequences (#3)&lt;/h2&gt;&lt;p&gt;Implement the &lt;code&gt;getAverageRatingForInstructor()&lt;/code&gt; function which takes &#10;&lt;code&gt;Instructor&lt;/code&gt; as a parameter and calculates the average rating that the &#10;instructor was given by all the students that attended his or her classes.&#10;If a student attended several lessons of the instructor, the ratings for&#10;individual lessons should be treated separately.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Sequences+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497916" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/School.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/School.kt" />
                                      <option name="text" value="package sequences3&#10;&#10;data class Instructor(val name: String)&#10;&#10;data class Student(val name: String)&#10;&#10;data class Lesson(&#10;        val instructor: Instructor,&#10;        val students: Set&lt;Student&gt;,&#10;        val rating: Map&lt;Student, Int&gt;&#10;)&#10;&#10;data class School(&#10;        val instructors: Set&lt;Instructor&gt;,&#10;        val students: Set&lt;Student&gt;,&#10;        val lessons: Sequence&lt;Lesson&gt;&#10;)" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="103" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="103" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="lessons&#10;                .filter { it.instructor == instructor }&#10;                .flatMap { it.rating.values.asSequence() }&#10;                .average()" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package sequences3&#10;&#10;fun School.getAverageRatingForInstructor(instructor: Instructor): Double =&#10;        TODO()" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package sequences3&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;abstract class TestSchool {&#10;    private val instructors = ('A'..'D')&#10;            .map { it to Instructor(&quot;Instructor-$it&quot;) }&#10;            .toMap()&#10;&#10;    protected fun inst(c: Char) = instructors.getValue(c)&#10;&#10;    private val students = (1..7)&#10;            .map { it to Student(&quot;Student-$it&quot;) }&#10;            .toMap()&#10;&#10;    protected fun st(i: Int) = students.getValue(i)&#10;&#10;    protected fun lsn(instructor: Char, vararg students: Int) =&#10;            Lesson(inst(instructor), students.map { st(it) }.toSet(), mapOf())&#10;&#10;    protected fun lsn(instructor: Char, vararg ratings: Pair&lt;Int, Int&gt;): Lesson {&#10;        val ratingsMap = ratings.toMap().mapKeys { (_, i) -&gt; st(i) }&#10;        return Lesson(inst(instructor),&#10;                ratingsMap.keys,&#10;                ratingsMap)&#10;    }&#10;&#10;    protected fun schl(lessons: List&lt;Lesson&gt;) =&#10;            School(instructors.values.toSet(), students.values.toSet(),&#10;                    lessons.asSequence())&#10;}&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestAverageRating : TestSchool() {&#10;&#10;    private fun checkAverageRating(&#10;            instructor: Instructor,&#10;            schoolLessons: List&lt;Lesson&gt;,&#10;            rating: Double&#10;    ) {&#10;        Assert.assertEquals(&quot;Wrong result for ${instructor.name}, &quot; +&#10;                &quot;$schoolLessons:&quot;,&#10;                rating,&#10;                schl(schoolLessons).getAverageRatingForInstructor(instructor),&#10;                0.0001)&#10;    }&#10;&#10;    @Test&#10;    fun test1() {&#10;        checkAverageRating(inst('A'), listOf(lsn('A', 1 to 5)), 5.0)&#10;    }&#10;&#10;    @Test&#10;    fun test2() {&#10;        checkAverageRating(inst('A'), listOf(&#10;                lsn('A', 1 to 5, 2 to 4),&#10;                lsn('B', 1 to 4, 2 to 4, 3 to 4),&#10;                lsn('A', 1 to 4, 3 to 5)&#10;        ), 4.5)&#10;    }&#10;&#10;    @Test&#10;    fun test3() {&#10;        checkAverageRating(inst('C'), listOf(&#10;                lsn('A', 2 to 4, 3 to 5),&#10;                lsn('C', 1 to 5, 2 to 5),&#10;                lsn('C', 1 to 3, 2 to 3),&#10;                lsn('B', 1 to 4, 2 to 5, 3 to 3),&#10;                lsn('C', 3 to 4)&#10;        ), 4.0)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570442000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Sequences (#4)&lt;/h2&gt;&lt;p&gt;Implement the &lt;code&gt;findFavouriteInstructorForStudent()&lt;/code&gt; function.&#10;It takes &lt;code&gt;Student&lt;/code&gt; as a parameter and finds an instructor which classes this &#10;student takes more often. &#10;If there're several such instructors, the first one is returned,&#10;if a student took no classes at all yet, &lt;code&gt;null&lt;/code&gt; is returned.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Sequences+%2F+Exercise4&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="5" />
                            <option name="name" value="Exercise 4" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497917" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/School.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/School.kt" />
                                      <option name="text" value="package sequences4&#10;&#10;data class Instructor(val name: String)&#10;&#10;data class Student(val name: String)&#10;&#10;data class Lesson(&#10;        val instructor: Instructor,&#10;        val students: Set&lt;Student&gt;,&#10;        val rating: Map&lt;Student, Int&gt;&#10;)&#10;&#10;data class School(&#10;        val instructors: Set&lt;Instructor&gt;,&#10;        val students: Set&lt;Student&gt;,&#10;        val lessons: Sequence&lt;Lesson&gt;&#10;)" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="106" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="106" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="lessons&#10;        .filter { student in it.students }&#10;        .groupBy { it.instructor }&#10;        .maxBy { (_, lessons) -&gt; lessons.size }&#10;        ?.key" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package sequences4&#10;&#10;fun School.findFavouriteInstructorForStudent(student: Student): Instructor? =&#10;        TODO()" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package sequences4&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;abstract class TestSchool {&#10;    private val instructors = ('A'..'D')&#10;            .map { it to Instructor(&quot;Instructor-$it&quot;) }&#10;            .toMap()&#10;&#10;    protected fun inst(c: Char) = instructors.getValue(c)&#10;&#10;    private val students = (1..7)&#10;            .map { it to Student(&quot;Student-$it&quot;) }&#10;            .toMap()&#10;&#10;    protected fun st(i: Int) = students.getValue(i)&#10;&#10;    protected fun lsn(instructor: Char, vararg students: Int) =&#10;            Lesson(inst(instructor), students.map { st(it) }.toSet(), mapOf())&#10;&#10;    protected fun schl(lessons: List&lt;Lesson&gt;) =&#10;            School(instructors.values.toSet(), students.values.toSet(),&#10;                    lessons.asSequence())&#10;}&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestFavouriteInstructor : TestSchool() {&#10;    private fun checkFavouriteInstructor(&#10;            student: Student,&#10;            schoolLessons: List&lt;Lesson&gt;,&#10;            favInstructor: Instructor?&#10;    ) {&#10;        Assert.assertEquals(&quot;Wrong result for ${student.name}, &quot; +&#10;                &quot;$schoolLessons:&quot;,&#10;                favInstructor,&#10;                schl(schoolLessons).findFavouriteInstructorForStudent(student))&#10;    }&#10;&#10;    @Test&#10;    fun test1() {&#10;        checkFavouriteInstructor(st(1), listOf(lsn('A', 1)), inst('A'))&#10;    }&#10;&#10;    @Test&#10;    fun test2() {&#10;        checkFavouriteInstructor(st(2), listOf(lsn('A', 1)), null)&#10;    }&#10;&#10;&#10;    @Test&#10;    fun test3() {&#10;        checkFavouriteInstructor(st(1), listOf(lsn('A', 1), lsn('B', 1)), inst('A'))&#10;    }&#10;&#10;    @Test&#10;    fun test4() {&#10;        checkFavouriteInstructor(st(1), listOf(&#10;                lsn('A', 1, 2, 3),&#10;                lsn('B', 1, 2, 3),&#10;                lsn('A', 1)&#10;        ), inst('A'))&#10;    }&#10;&#10;    @Test&#10;    fun test5() {&#10;        checkFavouriteInstructor(st(1), listOf(&#10;                lsn('A', 1, 2, 3),&#10;                lsn('C', 1),&#10;                lsn('B', 2, 3),&#10;                lsn('A', 4),&#10;                lsn('C', 1, 3)&#10;        ), inst('C'))&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570443000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Sequences (#5)&lt;/h2&gt;&lt;p&gt;Implement &lt;code&gt;findInstructorsWithLargestClass()&lt;/code&gt; function.&#10;At first, it finds the maximum number of students that were attending one lesson.&#10;Then it finds all instructors that were leading lessons with the same number&#10;of students.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Sequences+%2F+Exercise5&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="6" />
                            <option name="name" value="Exercise 5" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497918" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/School.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/School.kt" />
                                      <option name="text" value="package sequences5&#10;&#10;data class Instructor(val name: String)&#10;&#10;data class Student(val name: String)&#10;&#10;data class Lesson(&#10;        val instructor: Instructor,&#10;        val students: Set&lt;Student&gt;,&#10;        val rating: Map&lt;Student, Int&gt;&#10;)&#10;&#10;data class School(&#10;        val instructors: Set&lt;Instructor&gt;,&#10;        val students: Set&lt;Student&gt;,&#10;        val lessons: Sequence&lt;Lesson&gt;&#10;)" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="88" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="88" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="val maxClassSize = lessons&#10;            .map { it.students.size }&#10;            .max()&#10;&#10;    return lessons.filter { it.students.size == maxClassSize }&#10;            .groupBy { it.instructor }&#10;            .keys" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package sequences5&#10;&#10;fun School.findInstructorsWithLargestClass(): Set&lt;Instructor&gt; {&#10;    TODO()&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package sequences5&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;abstract class TestSchool {&#10;    private val instructors = ('A'..'D')&#10;            .map { it to Instructor(&quot;Instructor-$it&quot;) }&#10;            .toMap()&#10;&#10;    protected fun inst(c: Char) = instructors.getValue(c)&#10;&#10;    private val students = (1..7)&#10;            .map { it to Student(&quot;Student-$it&quot;) }&#10;            .toMap()&#10;&#10;    protected fun st(i: Int) = students.getValue(i)&#10;&#10;    protected fun lsn(instructor: Char, vararg students: Int) =&#10;            Lesson(inst(instructor), students.map { st(it) }.toSet(), mapOf())&#10;&#10;    protected fun schl(lessons: List&lt;Lesson&gt;) =&#10;            School(instructors.values.toSet(), students.values.toSet(),&#10;                    lessons.asSequence())&#10;}&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestLargestClass : TestSchool() {&#10;    private fun checkInstructorsWithLargestClass(&#10;            schoolLessons: List&lt;Lesson&gt;,&#10;            instructors: List&lt;Char&gt;&#10;    ) {&#10;        Assert.assertEquals(&quot;Wrong result for $schoolLessons:&quot;,&#10;                instructors.map { inst(it) }.toSet(),&#10;                schl(schoolLessons).findInstructorsWithLargestClass())&#10;    }&#10;&#10;    @Test&#10;    fun test1() {&#10;        checkInstructorsWithLargestClass(listOf(lsn('A', 1)), listOf('A'))&#10;    }&#10;&#10;    @Test&#10;    fun test2() {&#10;        checkInstructorsWithLargestClass(listOf(lsn('A', 1, 2, 3), lsn('B', 1, 2)), listOf('A'))&#10;    }&#10;&#10;    @Test&#10;    fun test3() {&#10;        checkInstructorsWithLargestClass(listOf(lsn('A', 1, 2, 3), lsn('B', 1, 2, 3)), listOf('A', 'B'))&#10;    }&#10;&#10;    @Test&#10;    fun test4() {&#10;        checkInstructorsWithLargestClass(listOf(&#10;                lsn('A', 1),&#10;                lsn('B', 3),&#10;                lsn('A', 1, 2),&#10;                lsn('C', 3, 4)&#10;        ), listOf('A', 'C'))&#10;    }&#10;&#10;    @Test&#10;    fun test5() {&#10;        checkInstructorsWithLargestClass(listOf(&#10;                lsn('A', 1, 2, 3, 4),&#10;                lsn('B', 1, 2, 3),&#10;                lsn('A', 1),&#10;                lsn('B', 2, 3, 5)&#10;        ), listOf('A'))&#10;    }&#10;&#10;    @Test&#10;    fun test6() {&#10;        checkInstructorsWithLargestClass(listOf(&#10;                lsn('A', 1, 2, 3),&#10;                lsn('C', 1),&#10;                lsn('B', 2, 3),&#10;                lsn('A', 4),&#10;                lsn('C', 1, 3)&#10;        ), listOf('A'))&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570443000" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="150005" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="175320" />
                      <option name="index" value="12" />
                      <option name="name" value="More Library Functions" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538571094000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;More Library Functions&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/107899/step/1&quot;&gt;Read &amp;quot;More Library Functions&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497919" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/DefineTakeIf.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/DefineTakeIf.kt" />
                                      <option name="text" value="// MoreLibraryFunctions/DefineTakeIf.kt&#10;package definetakeif&#10;import atomictest.eq&#10;&#10;fun &lt;T&gt; T.takeIf(&#10;  predicate: (T) -&gt; Boolean&#10;): T? {&#10;  return if (predicate(this)) this else null&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  &quot;abc&quot;.takeIf { it != &quot;XXX&quot; } eq &quot;abc&quot;&#10;  &quot;XXX&quot;.takeIf { it != &quot;XXX&quot; } eq null&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/InputLines1.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/InputLines1.kt" />
                                      <option name="text" value="// MoreLibraryFunctions/InputLines1.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val lines = generateSequence {&#10;    val line = readLine()&#10;    if (line != &quot;XXX&quot;) line else null&#10;  }&#10;  println(lines.toList())&#10;}&#10;/* Input/Output:&#10;&gt;&gt;&gt; first&#10;&gt;&gt;&gt; second&#10;&gt;&gt;&gt; XXX&#10;[first, second]&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/InputLines2.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/InputLines2.kt" />
                                      <option name="text" value="// MoreLibraryFunctions/InputLines2.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val lines = generateSequence {&#10;    readLine()?.takeIf { it != &quot;XXX&quot; }&#10;  }&#10;  println(lines.toList())&#10;}&#10;/* Input/Output:&#10;&gt;&gt;&gt; first&#10;&gt;&gt;&gt; second&#10;&gt;&gt;&gt; XXX&#10;[first, second]&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/NumberSequence1.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/NumberSequence1.kt" />
                                      <option name="text" value="// MoreLibraryFunctions/NumberSequence1.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val naturalNumbers =&#10;    generateSequence(1) { it + 1 }&#10;  naturalNumbers.take(3).toList() eq&#10;    listOf(1, 2, 3)&#10;  naturalNumbers.take(10).sum() eq 55&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/NumberSequence2.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/NumberSequence2.kt" />
                                      <option name="text" value="// MoreLibraryFunctions/NumberSequence2.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  generateSequence(6) {&#10;    (it - 1).takeIf { it &gt; 0 }&#10;  }.toList() eq listOf(6, 5, 4, 3, 2, 1)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ReadingName.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ReadingName.kt" />
                                      <option name="text" value="// MoreLibraryFunctions/ReadingName.kt&#10;fun main(args: Array&lt;String&gt;) {&#10;  println(&quot;Enter your name:&quot;)&#10;  readLine()&#10;    ?.takeUnless { it.isBlank() }&#10;    ?.let { println(&quot;Your name is: $it&quot;) }&#10;}&#10;/* Input/Output:&#10;Enter your name:&#10;&gt;&gt;&gt; Sveta&#10;Your name is: Sveta&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ReadingNameWithIf.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ReadingNameWithIf.kt" />
                                      <option name="text" value="// MoreLibraryFunctions/ReadingNameWithIf.kt&#10;fun main(args: Array&lt;String&gt;) {&#10;  println(&quot;Enter your name:&quot;)&#10;  val line = readLine()&#10;  if (line?.isNotBlank() == true) {&#10;    println(&quot;Your name is: $line&quot;)&#10;  }&#10;}&#10;/* Input/Output:&#10;Enter your name:&#10;&gt;&gt;&gt; Sveta&#10;Your name is: Sveta&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570446000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;More Library Functions (#1)&lt;/h2&gt;&lt;p&gt;Write a function &lt;code&gt;from&lt;/code&gt; that generates an infinite stream of integers, &#10;starting from n, then n + 1, n + 2, and so on.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+More+Library+Functions+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497920" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="87" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="87" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="generateSequence(n) { it + 1 }" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package moreLibraryFunctions1&#10;&#10;import atomictest.eq&#10;&#10;fun from(n: Int): Sequence&lt;Int&gt; = TODO()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    from(10).take(2).toList() eq listOf(10, 11)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package moreLibraryFunctions1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestCreatingSequence {&#10;    @Test&#10;    fun test1Sample() {&#10;        Assert.assertEquals(&quot;Wrong result for sample&quot;,&#10;                listOf(10, 11),&#10;                from(10).take(2).toList())&#10;    }&#10;&#10;    @Test&#10;    fun test2() {&#10;        Assert.assertEquals(&quot;Wrong first elements of 'from(1000)' sequence:&quot;,&#10;                (1000..1010).toList(),&#10;                from(1000).take(11).toList())&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570447000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;More Library Functions (#2)&lt;/h2&gt;&lt;p&gt;Complete the function &lt;code&gt;fibonacciNumbers()&lt;/code&gt; that generates the infinite stream &#10;of Fibonacci numbers.&#10;Each new Fibonacci number is the sum of the previous two.&#10;The first two numbers are &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;, which produces the following sequence:&#10;&lt;code&gt;0, 1, 1, 2, 3, 5, 8, 13, 21, ...&lt;/code&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+More+Library+Functions+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497921" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="155" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="155" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="current -&gt;&#10;        val next = previous + current&#10;        previous = current&#10;        next" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package moreLibraryFunctions2&#10;&#10;import atomictest.eq&#10;&#10;fun fibonacciNumbers(): Sequence&lt;Int&gt; {&#10;    var previous = 1&#10;    return generateSequence(0) {&#10;        TODO()&#10;    }&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    fibonacciNumbers().take(10).toList() eq&#10;            listOf(0, 1, 1, 2, 3, 5, 8, 13, 21, 34)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package moreLibraryFunctions2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestFibonacciSequence {&#10;    @Test&#10;    fun test1Sample() {&#10;        Assert.assertEquals(&quot;Wrong result for sample&quot;,&#10;                listOf(0, 1, 1, 2, 3, 5, 8, 13, 21, 34),&#10;                fibonacciNumbers().take(10).toList())&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570448000" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="150006" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="175321" />
                      <option name="index" value="13" />
                      <option name="name" value="Functions Inside Functions" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538571100000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Functions Inside Functions&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/107900/step/1&quot;&gt;Read &amp;quot;Functions Inside Functions&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497922" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/CustomLabel.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/CustomLabel.kt" />
                                      <option name="text" value="// LocalFunctions/CustomLabel.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf(1, 2, 3, 4, 5)&#10;  val value = 3&#10;  list.forEach tag@{             // [1]&#10;    if (it == value) return@tag  // [2]&#10;  }&#10;  println(&quot;This line is called&quot;)&#10;}&#10;/* Output:&#10;This line is called&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/HelperFunction.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/HelperFunction.kt" />
                                      <option name="text" value="// LocalFunctions/HelperFunction.kt&#10;package localfunctions&#10;import atomictest.eq&#10;&#10;class Window(&#10;  var height: Int,&#10;  var width: Int,&#10;  var isVisible: Boolean&#10;)&#10;&#10;fun minimizeWindow(window: Window) {&#10;  with(window) {&#10;    if (!window.isVisible) return   // [1]&#10;    height = 0&#10;    width = 0&#10;  }&#10;  // ...                            // [2]&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  Window(100, 100, true)&#10;    .also { minimizeWindow(it) }&#10;    .height eq 0&#10;  Window(100, 100, false)&#10;    .also { minimizeWindow(it) }&#10;    .height eq 100&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/InterestingSessions.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/InterestingSessions.kt" />
                                      <option name="text" value="// LocalFunctions/InterestingSessions.kt&#10;package localfunctions&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  sessions.any(&#10;    fun(session: Session): Boolean {    // [1]&#10;      if (session.title.contains(&quot;Kotlin&quot;) &amp;&amp;&#10;        session.speaker in myFavSpeakers) {&#10;        return true&#10;      }&#10;      // ... more checks&#10;      return false&#10;    }) eq true&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/LabeledReturn.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/LabeledReturn.kt" />
                                      <option name="text" value="// LocalFunctions/LabeledReturn.kt&#10;package localfunctions&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  sessions.any { session -&gt;&#10;    if (session.title.contains(&quot;Kotlin&quot;) &amp;&amp;&#10;      session.speaker in myFavSpeakers) {&#10;      return@any true&#10;    }&#10;    // ... more checks&#10;    false&#10;  } eq true&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/LocalExtensions.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/LocalExtensions.kt" />
                                      <option name="text" value="// LocalFunctions/LocalExtensions.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  fun String.exclaim() = &quot;$this!&quot;&#10;  &quot;Hello&quot;.exclaim() eq &quot;Hello!&quot;&#10;  &quot;Hallo&quot;.exclaim() eq &quot;Hallo!&quot;&#10;  &quot;Bonjour&quot;.exclaim() eq &quot;Bonjour!&quot;&#10;  &quot;Ciao&quot;.exclaim() eq &quot;Ciao!&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/LocalFunctionReference.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/LocalFunctionReference.kt" />
                                      <option name="text" value="// LocalFunctions/LocalFunctionReference.kt&#10;package localfunctions&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  fun interesting(session: Session): Boolean {&#10;    if (session.title.contains(&quot;Kotlin&quot;) &amp;&amp;&#10;      session.speaker in myFavSpeakers) {&#10;      return true&#10;    }&#10;    // ... more checks&#10;    return false&#10;  }&#10;  sessions.any(::interesting) eq true&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/LocalFunctions.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/LocalFunctions.kt" />
                                      <option name="text" value="// LocalFunctions/LocalFunctions.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val logMsg = StringBuilder()&#10;  fun log(message: String) =&#10;    logMsg.appendln(message)&#10;  log(&quot;Starting computation&quot;)&#10;  // Imitating computation&#10;  val x = 42&#10;  log(&quot;Computation result: $x&quot;)&#10;  println(logMsg.toString())&#10;}&#10;/* Output:&#10;Starting computation&#10;Computation result: 42&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/ReturnFromFun.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/ReturnFromFun.kt" />
                                      <option name="text" value="// LocalFunctions/ReturnFromFun.kt&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf(1, 2, 3, 4, 5)&#10;  val value = 3&#10;  list.forEach {&#10;    if (it == value) return           // [1]&#10;  }&#10;  println(&quot;This line is NOT called&quot;)  // [2]&#10;}&#10;/* Output:&#10;*/" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Session.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Session.kt" />
                                      <option name="text" value="// LocalFunctions/Session.kt&#10;package localfunctions&#10;&#10;class Session(&#10;  val title: String,&#10;  val speaker: String&#10;)&#10;&#10;val sessions = listOf(Session(&#10;  &quot;Kotlin in Production&quot;, &quot;Christina Lee&quot;))&#10;&#10;val myFavSpeakers = setOf(&quot;Christina Lee&quot;)" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570450000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Functions Inside Functions (#1)&lt;/h2&gt;&lt;p&gt;Implement &lt;code&gt;find()&lt;/code&gt; via &lt;code&gt;forEach()&lt;/code&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Functions+Inside+Functions+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497923" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="133" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="133" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="if (predicate(it)) return it" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package functionsInsideFunctions1&#10;&#10;import atomictest.eq&#10;&#10;fun &lt;T&gt; List&lt;T&gt;.find(predicate: (T) -&gt; Boolean): T? {&#10;    forEach {&#10;        TODO()&#10;    }&#10;    return null&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    listOf(1, 2, 3).find { it &lt; 0 } eq null&#10;    listOf(1, -2, -3).find { it &lt; 0 } eq -2&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package functionsInsideFunctions1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestFind {&#10;    @Test&#10;    fun test1Sample() {&#10;        Assert.assertEquals(&quot;Wrong result for sample&quot;, null,&#10;                listOf(1, 2, 3).find { it &lt; 0 })&#10;        Assert.assertEquals(&quot;Wrong result for sample&quot;, -2,&#10;                listOf(1, -2, -3).find { it &lt; 0 })&#10;    }&#10;&#10;    @Test&#10;    fun test2() {&#10;        val list = listOf(1, 2, 0, 2, 4)&#10;        Assert.assertEquals(&quot;Wrong result for finding zero in $list&quot;, 0,&#10;                list.find { it == 0 })&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570451000" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="150007" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="175322" />
                      <option name="index" value="14" />
                      <option name="name" value="Folding Lists" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538571107000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Folding Lists&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/107901/step/1&quot;&gt;Read &amp;quot;Folding Lists&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497924" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/FoldAndReduce.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/FoldAndReduce.kt" />
                                      <option name="text" value="// FoldingLists/FoldAndReduce.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf(1, 2, 3, 4)&#10;  list.fold(1) { acc, elem -&gt; acc * elem } eq&#10;    1 * 1 * 2 * 3 * 4&#10;&#10;  list.reduce { acc, elem -&gt; acc * elem } eq&#10;    1 * 2 * 3 * 4&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/FoldRight.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/FoldRight.kt" />
                                      <option name="text" value="// FoldingLists/FoldRight.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf('a', 'b', 'c', 'd')&#10;&#10;  list.fold(&quot;*&quot;) {&#10;    accumulator, element -&gt;&#10;    &quot;($accumulator) + $element&quot;&#10;  } eq &quot;((((*) + a) + b) + c) + d&quot;&#10;&#10;  list.foldRight(&quot;*&quot;) {&#10;    element, accumulator -&gt;&#10;    &quot;$element + ($accumulator)&quot;&#10;  } eq &quot;a + (b + (c + (d + (*))))&quot;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/FoldVsForLoop.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/FoldVsForLoop.kt" />
                                      <option name="text" value="// FoldingLists/FoldVsForLoop.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf(1, 10, 100, 1000)&#10;&#10;  val initial = 0&#10;  val operation =&#10;    { sum: Int, i: Int -&gt; sum + i }&#10;&#10;  val s = list.fold(initial) {&#10;    sum, i -&gt; operation(sum, i)&#10;  }&#10;  s eq 1111&#10;&#10;  var accumulator = initial&#10;  for (i in list) {&#10;    accumulator = operation(accumulator, i)&#10;  }&#10;  accumulator eq 1111&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/SumViaFold.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/SumViaFold.kt" />
                                      <option name="text" value="// FoldingLists/SumViaFold.kt&#10;import atomictest.eq&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  val list = listOf(1, 10, 100, 1000)&#10;  list.fold(0) {&#10;    sum, n -&gt; sum + n&#10;  } eq 1111&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570454000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Folding Lists (#1)&lt;/h2&gt;&lt;p&gt;Implement &lt;code&gt;size()&lt;/code&gt; using &lt;code&gt;fold()&lt;/code&gt;. &#10;&lt;code&gt;size()&lt;/code&gt; returns the number of elements in the list.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Folding+Lists+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497925" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="23" />
                                                <option name="offset" value="84" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="23" />
                                            <option name="offset" value="84" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO(&quot;fold(0) { ??? }&quot;)" />
                                            <option name="possibleAnswer" value="fold(0) { length, _ -&gt;&#10;            length + 1&#10;        }" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package foldingLists01&#10;&#10;import atomictest.eq&#10;&#10;fun &lt;T&gt; List&lt;T&gt;.size(): Int =&#10;        TODO(&quot;fold(0) { ??? }&quot;)&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val list = listOf(1, 2, 3)&#10;    list.size() eq 3&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package foldingLists01&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestSize {&#10;    private fun &lt;T&gt; checkSize(list: List&lt;T&gt;) {&#10;        Assert.assertEquals(&quot;Wrong 'size' for $list:&quot;, list.size, list.size())&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = checkSize(listOf(1, 2, 3))&#10;&#10;    @Test&#10;    fun test2() = checkSize(listOf('a', 'b', 'c', 'd', 'e'))&#10;&#10;    @Test&#10;    fun test3() = checkSize(listOf&lt;Int&gt;())&#10;&#10;    @Test&#10;    fun test4() = checkSize(listOf(null))&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570455000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Folding Lists (#2)&lt;/h2&gt;&lt;p&gt;Implement &lt;code&gt;count()&lt;/code&gt; using &lt;code&gt;fold()&lt;/code&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Folding+Lists+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497926" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="25" />
                                                <option name="offset" value="110" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="25" />
                                            <option name="offset" value="110" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO(&quot;fold(???) { ??? }&quot;)" />
                                            <option name="possibleAnswer" value="fold(0) {&#10;            count, element -&gt;&#10;            if (predicate(element)) count + 1 else count&#10;        }" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package foldingLists02&#10;&#10;import atomictest.eq&#10;&#10;fun &lt;T&gt; List&lt;T&gt;.count(predicate: (T) -&gt; Boolean): Int =&#10;        TODO(&quot;fold(???) { ??? }&quot;)&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val list = listOf(1, -2, 3)&#10;    list.count { it &gt; 0 } eq 2&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package foldingLists02&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;import kotlin.collections.count as countLibrary&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestCount {&#10;    private fun &lt;T&gt; checkCount(list: List&lt;T&gt;, predicateString: String, predicate: (T) -&gt; Boolean) {&#10;        Assert.assertEquals(&quot;Wrong implementation for 'count'. Wrong result for counting $predicateString in $list&quot;, list.countLibrary(predicate), list.count(predicate))&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = checkCount(listOf(1, -2, 3), &quot;{ it &gt; 0 }&quot;) { it &gt; 0 }&#10;&#10;    @Test&#10;    fun test2() = checkCount(listOf(&quot;abc&quot;, &quot;cd&quot;, &quot;eea&quot;), &quot;{ it.contains('a') }&quot;) { it.contains('a') }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570456000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Folding Lists (#3)&lt;/h2&gt;&lt;p&gt;Implement &lt;code&gt;any()&lt;/code&gt; using &lt;code&gt;fold()&lt;/code&gt;.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Folding+Lists+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497927" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="25" />
                                                <option name="offset" value="111" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="25" />
                                            <option name="offset" value="111" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO(&quot;fold(???) { ??? }&quot;)" />
                                            <option name="possibleAnswer" value="fold(false) {&#10;            found, element -&gt;&#10;            if (predicate(element)) true else found&#10;        }" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package foldingLists3&#10;&#10;import atomictest.eq&#10;&#10;fun &lt;T&gt; List&lt;T&gt;.any(predicate: (T) -&gt; Boolean): Boolean =&#10;        TODO(&quot;fold(???) { ??? }&quot;)&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val list = listOf(1, -2, 3)&#10;    list.any { it &lt; 0 } eq true&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package foldingLists3&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;import kotlin.collections.any as anyLibrary&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestMapImpl {&#10;    private fun &lt;T&gt; checkAny(list: List&lt;T&gt;, predicateString: String, predicate: (T) -&gt; Boolean) {&#10;        Assert.assertEquals(&quot;Wrong 'any' implementation. Wrong result for checking $predicateString in $list:&quot;, list.anyLibrary(predicate), list.any(predicate))&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = checkAny(listOf(1, -2, 3), &quot;{ it &lt; 0 }&quot;) { it &lt; 0 }&#10;&#10;    @Test&#10;    fun test2() = checkAny(listOf(&quot;abc&quot;, &quot;cd&quot;, &quot;eea&quot;), &quot;{ it.contains('a') }&quot;) { it.contains('a') }&#10;&#10;    @Test&#10;    fun test3() = checkAny(listOf(&quot;abc&quot;, &quot;cd&quot;, &quot;eea&quot;), &quot;{ it.contains('f') }&quot;) { it.contains('f') }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570457000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Folding Lists (#4)&lt;/h2&gt;&lt;p&gt;Complete the implementation of the &lt;code&gt;combineAll()&lt;/code&gt; function using &lt;code&gt;reduce()&lt;/code&gt;.&#10;It allows to combine several conditions (you can assume that a list is non-empty).&#10;&lt;code&gt;Condition.combine()&lt;/code&gt; function which combines two conditions is already &#10;provided.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Folding+Lists+%2F+Exercise4&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="5" />
                            <option name="name" value="Exercise 4" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497928" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="249" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="249" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="Condition::combine" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package foldingLists4&#10;&#10;import atomictest.eq&#10;&#10;class Condition(val check: (Int) -&gt; Boolean)&#10;&#10;fun Condition.combine(other: Condition): Condition =&#10;        Condition { check(it) &amp;&amp; other.check(it) }&#10;&#10;fun List&lt;Condition&gt;.combineAll(): Condition = reduce(TODO())&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val isPositive = Condition { it &gt; 0 }&#10;    val isEven = Condition { it % 2 == 0 }&#10;    val lessThan10 = Condition { it &lt; 10 }&#10;&#10;    val conditions = listOf(isPositive, isEven, lessThan10)&#10;    val isEvenPositiveAndLessThan10 = conditions.combineAll()&#10;&#10;    isEvenPositiveAndLessThan10.check(8) eq true&#10;&#10;    isEvenPositiveAndLessThan10.check(5) eq false&#10;    isEvenPositiveAndLessThan10.check(12) eq false&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package foldingLists4&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;import kotlin.collections.any as anyLibrary&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestConditions {&#10;&#10;    private fun checkSample(isEvenPositiveAndLessThan10: Condition, result: Boolean, value: Int) {&#10;        Assert.assertEquals(&quot;Wrong result for 'isEvenPositiveAndLessThan10.check(8)'&quot;,&#10;                result, isEvenPositiveAndLessThan10.check(value))&#10;    }&#10;&#10;    @Test&#10;    fun testSample() {&#10;        val isPositive = Condition { it &gt; 0 }&#10;        val isEven = Condition { it % 2 == 0 }&#10;        val lessThan10 = Condition { it &lt; 10 }&#10;&#10;        val conditions = listOf(isPositive, isEven, lessThan10)&#10;        val isEvenPositiveAndLessThan10 = conditions.combineAll()&#10;&#10;        checkSample(isEvenPositiveAndLessThan10, true, 8)&#10;        checkSample(isEvenPositiveAndLessThan10, false, 5)&#10;        checkSample(isEvenPositiveAndLessThan10, false, 12)&#10;    }&#10;&#10;    @Test&#10;    fun test2() {&#10;        val isPositive = Condition { it &gt; 0 }&#10;        val isEven = Condition { it % 2 == 0 }&#10;        val lessThan10 = Condition { it &lt; 10 }&#10;&#10;        val conditions = listOf(isPositive, isEven, lessThan10)&#10;        val isEvenPositiveAndLessThan10 = conditions.combineAll()&#10;&#10;        checkSample(isEvenPositiveAndLessThan10, true, 2)&#10;        checkSample(isEvenPositiveAndLessThan10, false, 7)&#10;        checkSample(isEvenPositiveAndLessThan10, false, 13)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570458000" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="150008" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="175323" />
                      <option name="index" value="15" />
                      <option name="name" value="Recursion" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1538571117000" />
                      <option name="taskList">
                        <list>
                          <TheoryTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Recursion&lt;/h2&gt;&lt;p&gt;Examples accompanying the atom.&#10;&lt;a href=&quot;https://stepik.org/lesson/107902/step/1&quot;&gt;Read &amp;quot;Recursion&amp;quot; atom online.&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="NONE" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Examples" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497929" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/CallStack.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/CallStack.kt" />
                                      <option name="text" value="// Recursion/CallStack.kt&#10;package recursion&#10;&#10;fun illegalState() {&#10;  // throw IllegalStateException()&#10;}&#10;&#10;fun fail() = illegalState()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  fail()&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Factorial.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Factorial.kt" />
                                      <option name="text" value="// Recursion/Factorial.kt&#10;package recursion&#10;import atomictest.eq&#10;&#10;fun factorial(n: Long): Long {&#10;  if (n &lt;= 1) return 1&#10;  return n * factorial(n - 1)&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  factorial(5) eq 120&#10;  factorial(17) eq 355687428096000&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Fibonacci.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Fibonacci.kt" />
                                      <option name="text" value="// Recursion/Fibonacci.kt&#10;package recursion&#10;import atomictest.eq&#10;&#10;fun fibonacci(n: Int): Long {&#10;  tailrec fun fibonacci(&#10;    n: Int,&#10;    current: Long,&#10;    next: Long&#10;  ): Long {&#10;    if (n == 0) return current&#10;    return fibonacci(&#10;      n - 1, next, current + next)&#10;  }&#10;  return fibonacci(n, 0L, 1L)&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  (0..8).map { fibonacci(it) } eq&#10;    &quot;[0, 1, 1, 2, 3, 5, 8, 13, 21]&quot;&#10;  fibonacci(22) eq 17711&#10;  fibonacci(50) eq 12586269025&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/InfiniteRecursion.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/InfiniteRecursion.kt" />
                                      <option name="text" value="// Recursion/InfiniteRecursion.kt&#10;package recursion&#10;&#10;fun recurse(i: Int): Int = recurse(i + 1)&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  // println(recurse(1))&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Iteration.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Iteration.kt" />
                                      <option name="text" value="// Recursion/Iteration.kt&#10;package iteration&#10;import atomictest.eq&#10;&#10;fun sum(n: Long): Long {&#10;  var accumulator = 0L&#10;  for (i in 1..n)&#10;    accumulator += i&#10;  return accumulator&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  sum(10000) eq 50005000&#10;  sum(100000) eq 5000050000&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/RecursionLimits.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/RecursionLimits.kt" />
                                      <option name="text" value="// Recursion/RecursionLimits.kt&#10;package recursion&#10;import atomictest.eq&#10;&#10;fun sum(n: Long): Long {&#10;  if (n == 0L) return 0&#10;  return n + sum(n - 1)&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  sum(2) eq 3&#10;  sum(1000) eq 500500&#10;  // sum(100_000) eq 500050000       // [1]&#10;  (1..100_000L).sum() eq 5000050000  // [2]&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/TailRecursiveSum.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/TailRecursiveSum.kt" />
                                      <option name="text" value="// Recursion/TailRecursiveSum.kt&#10;package tailrecursion&#10;import atomictest.eq&#10;&#10;private tailrec fun sum(&#10;  n: Long,&#10;  accumulator: Long&#10;): Long =&#10;  if (n == 0L) accumulator&#10;  else sum(n - 1, accumulator + n)&#10;&#10;fun sum(n: Long) = sum(n, 0)&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  sum(2) eq 3&#10;  sum(10000) eq 50005000&#10;  sum(100000) eq 5000050000&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/VerySlowFibonacci.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/VerySlowFibonacci.kt" />
                                      <option name="text" value="// Recursion/VerySlowFibonacci.kt&#10;package slowfibonacci&#10;import atomictest.eq&#10;&#10;fun fibonacci(n: Long): Long {&#10;  return when (n) {&#10;    0L -&gt; 0&#10;    1L -&gt; 1&#10;    else -&gt;&#10;      fibonacci(n - 1) + fibonacci(n - 2)&#10;  }&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;  fibonacci(0) eq 0&#10;  fibonacci(22) eq 17711&#10;  // Very time-consuming:&#10;  // fibonacci(50) eq 12586269025&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570460000" />
                          </TheoryTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Recursion (#1)&lt;/h2&gt;&lt;p&gt;Implement &lt;code&gt;factorial()&lt;/code&gt; using an auxiliary tail recursive function.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Recursion+%2F+Exercise1&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Exercise 1" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497930" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="77" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="77" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="&#10;    tailrec fun factorial(&#10;            n: Long,&#10;            accumulator: Long&#10;    ): Long =&#10;            if (n == 1L) accumulator&#10;            else factorial(n - 1, accumulator * n)&#10;&#10;    return factorial(n, 1)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package recursion1&#10;&#10;import atomictest.eq&#10;&#10;fun factorial(n: Long): Long {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    factorial(3) eq 6&#10;    factorial(4) eq 24&#10;    factorial(11) eq 39916800&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package recursion1&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestFactorial {&#10;    private fun check(number: Long, expected: Long) {&#10;        Assert.assertEquals(&quot;Wrong result for 'factorial($number)'&quot;,&#10;                expected,&#10;                factorial(number))&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() = check(3, 6)&#10;&#10;    @Test&#10;    fun test2Sample() = check(4, 24)&#10;&#10;    @Test&#10;    fun test3Sample() = check(11, 39916800)&#10;&#10;    @Test&#10;    fun test4() = check(13, 6227020800)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570461000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Recursion (#2)&lt;/h2&gt;&lt;p&gt;As an exercise, implement &lt;code&gt;fibonacci()&lt;/code&gt; as an iterative function, &#10;without any recursion. The tail recursive version is given for comparison.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Recursion+%2F+Exercise2&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Exercise 2" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497931" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="401" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="401" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="var current = 0L&#10;    var next = 1L&#10;    repeat(n) {&#10;        val new = current + next&#10;        current = next&#10;        next = new&#10;    }&#10;    return current" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package recursion2&#10;&#10;import atomictest.eq&#10;&#10;// For comparison&#10;fun fibonacciRecursive(n: Int): Long {&#10;    tailrec fun fibonacci(&#10;            n: Int,&#10;            current: Long,&#10;            next: Long&#10;    ): Long {&#10;        if (n == 0) return current&#10;        return fibonacci(&#10;                n - 1, next, current + next)&#10;    }&#10;&#10;    return fibonacci(n, 0L, 1L)&#10;}&#10;&#10;fun fibonacciIterative(n: Int): Long {&#10;    TODO()&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    (0..8).map { fibonacciRecursive(it) } eq&#10;            &quot;[0, 1, 1, 2, 3, 5, 8, 13, 21]&quot;&#10;    fibonacciRecursive(22) eq 17711&#10;    fibonacciRecursive(50) eq 12586269025&#10;&#10;    (0..8).map { fibonacciIterative(it) } eq&#10;            &quot;[0, 1, 1, 2, 3, 5, 8, 13, 21]&quot;&#10;    fibonacciIterative(22) eq 17711&#10;    fibonacciIterative(50) eq 12586269025&#10;&#10;    println(fibonacciIterative(17))&#10;    println(fibonacciIterative(33))&#10;    println(fibonacciIterative(39))&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package recursion2&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestPersonsMap {&#10;    @Test&#10;    fun test1Sample() {&#10;        Assert.assertEquals(&quot;Wrong result for sample&quot;,&#10;                &quot;[0, 1, 1, 2, 3, 5, 8, 13, 21]&quot;,&#10;                (0..8).map { fibonacciIterative(it) }.toString())&#10;        Assert.assertEquals(&quot;Wrong result for sample&quot;,&#10;                17711, fibonacciIterative(22))&#10;        Assert.assertEquals(&quot;Wrong result for sample&quot;,&#10;                12586269025, fibonacciIterative(50))&#10;    }&#10;&#10;    private fun checkNumber(n: Int, fib: Long) {&#10;        Assert.assertEquals(&quot;Wrong Fibonacci value for $n&quot;,&#10;                fib, fibonacciIterative(n))&#10;    }&#10;&#10;    @Test&#10;    fun test2() = checkNumber(17, 1597)&#10;&#10;    @Test&#10;    fun test3() = checkNumber(33, 3524578)&#10;&#10;    @Test&#10;    fun test4() = checkNumber(39, 63245986)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570462000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;body&gt;&lt;h2&gt;Recursion (#3)&lt;/h2&gt;&lt;p&gt;Complete the implementations of two functions &lt;code&gt;isReachableRecursive()&lt;/code&gt; and &#10;&lt;code&gt;isReachableIterative()&lt;/code&gt; which both check whether a city is reachable from &#10;another city.&lt;/p&gt;&lt;p&gt;The direct connections for each &lt;code&gt;City&lt;/code&gt; are stored in &lt;code&gt;connections&lt;/code&gt; property.&#10;&lt;code&gt;isReachable&lt;/code&gt; functions should check whether a city is reachable via non&#10;direct connections.&lt;/p&gt;&lt;p&gt;For instance, look at the following connections graph:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Cities: Dublin, Liverpool, Manchester, Leeds&#10;Connections: Liverpool - Manchester; Manchester - Leeds&#10;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Both cities Manchester and Leeds are reachable from Liverpool, while Dublin isn't.&#10;The path from Liverpool to Leeds goes via Manchester.&lt;/p&gt;&lt;/body&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" value="https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&amp;entry.189755027=Functional+Programming+%2F+Recursion+%2F+Exercise3&#10;" />
                                <option name="type" value="CUSTOM" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Exercise 3" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="497932" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="489" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="489" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="&#10;        if (current in connections) return&#10;        connections += current&#10;&#10;        if (current == to) return&#10;&#10;        current.connections.forEach {&#10;            buildConnections(it)&#10;        }&#10;        " />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="838" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="838" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="&#10;        if (current == to) return true&#10;        if (current in connections) continue&#10;        connections += current&#10;&#10;        current.connections.forEach {&#10;            citiesToVisit += it&#10;        }&#10;        " />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package recursion3&#10;&#10;import atomictest.eq&#10;&#10;class City(val name: String) {&#10;    val connections = mutableListOf&lt;City&gt;()&#10;&#10;    override fun toString() = &quot;($name, &quot; +&#10;            &quot;connections: ${connections.map { it.name }})&quot;&#10;}&#10;&#10;fun addConnection(first: City, second: City) {&#10;    first.connections += second&#10;    second.connections += first&#10;}&#10;&#10;fun isReachableRecursive(from: City, to: City): Boolean {&#10;    val connections = mutableSetOf&lt;City&gt;()&#10;&#10;    fun buildConnections(current: City) {&#10;        TODO()&#10;    }&#10;&#10;    buildConnections(from)&#10;    return to in connections&#10;}&#10;&#10;fun isReachableIterative(from: City, to: City): Boolean {&#10;    val connections = mutableSetOf&lt;City&gt;()&#10;    val citiesToVisit = mutableSetOf(from)&#10;    while (citiesToVisit.isNotEmpty()) {&#10;        val current = citiesToVisit.first()&#10;        citiesToVisit.remove(current)&#10;&#10;        TODO()&#10;    }&#10;    return false&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val dublin = City(&quot;Dublin&quot;)&#10;    val liverpool = City(&quot;Liverpool&quot;)&#10;    val manchester = City(&quot;Manchester&quot;)&#10;    val leeds = City(&quot;Leeds&quot;)&#10;&#10;    addConnection(liverpool, manchester)&#10;    addConnection(manchester, leeds)&#10;&#10;    isReachableRecursive(liverpool, leeds) eq true&#10;    isReachableRecursive(liverpool, dublin) eq false&#10;&#10;    isReachableIterative(liverpool, leeds) eq true&#10;    isReachableIterative(liverpool, dublin) eq false&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="package recursion3&#10;&#10;import org.junit.Assert&#10;import org.junit.FixMethodOrder&#10;import org.junit.Test&#10;import org.junit.runners.MethodSorters&#10;&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;class TestReachable {&#10;    private fun checkRecursiveSample(from: City, to: City, result: Boolean) {&#10;        Assert.assertEquals(&quot;Wrong result for sample 'isReachableRecursive(${from.name}, ${to.name})'&quot;, result,&#10;                isReachableRecursive(from, to))&#10;    }&#10;&#10;    private fun checkIterativeSample(from: City, to: City, result: Boolean) {&#10;        Assert.assertEquals(&quot;Wrong result for sample 'isReachableRecursive(${from.name}, ${to.name})'&quot;, result,&#10;                isReachableIterative(from, to))&#10;    }&#10;&#10;    private fun checkRecursive(cities: List&lt;City&gt;, from: City, to: City, result: Boolean) {&#10;        Assert.assertEquals(&quot;Wrong result for 'isReachableRecursive(${from.name}, ${to.name})' in $cities&quot;, result,&#10;                isReachableRecursive(from, to))&#10;    }&#10;&#10;    private fun checkIterative(cities: List&lt;City&gt;, from: City, to: City, result: Boolean) {&#10;        Assert.assertEquals(&quot;Wrong result for 'isReachableRecursive(${from.name}, ${to.name})' in $cities&quot;, result,&#10;                isReachableIterative(from, to))&#10;    }&#10;&#10;    @Test&#10;    fun test1Sample() {&#10;        val dublin = City(&quot;Dublin&quot;)&#10;        val liverpool = City(&quot;Liverpool&quot;)&#10;        val manchester = City(&quot;Manchester&quot;)&#10;        val leeds = City(&quot;Leeds&quot;)&#10;&#10;        addConnection(liverpool, manchester)&#10;        addConnection(manchester, leeds)&#10;&#10;        checkRecursiveSample(liverpool, leeds, true)&#10;        checkRecursiveSample(liverpool, dublin, false)&#10;        checkIterativeSample(liverpool, leeds, true)&#10;        checkIterativeSample(liverpool, dublin, false)&#10;    }&#10;&#10;    @Test&#10;    fun test2() {&#10;        val cities = (0..4).map { City(&quot;City$it&quot;) }&#10;&#10;        addConnections(cities, 0 to 1, 1 to 2, 2 to 3, 3 to 4)&#10;&#10;        checkRecursive(cities, cities[0], cities[4], true)&#10;        checkIterative(cities, cities[0], cities[4], true)&#10;    }&#10;&#10;    @Test&#10;    fun test3() {&#10;        val cities = (0..1).map { City(&quot;City$it&quot;) }&#10;        addConnections(cities)&#10;&#10;        checkRecursive(cities, cities[0], cities[1], false)&#10;        checkIterative(cities, cities[0], cities[1], false)&#10;    }&#10;&#10;    private fun addConnections(cities: List&lt;City&gt;, vararg pairs: Pair&lt;Int, Int&gt;) {&#10;        pairs.forEach {&#10;            addConnection(cities[it.first], cities[it.second])&#10;        }&#10;    }&#10;&#10;    @Test&#10;    fun test4() {&#10;        val cities = (0..9).map { City(&quot;City$it&quot;) }&#10;        addConnections(cities, 1 to 2, 2 to 4, 4 to 5, 1 to 3, 3 to 6, 3 to 7, 8 to 9)&#10;&#10;        checkRecursive(cities, cities[1], cities[5], true)&#10;        checkRecursive(cities, cities[1], cities[8], false)&#10;        checkIterative(cities, cities[1], cities[5], true)&#10;        checkIterative(cities, cities[1], cities[8], false)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1538570463000" />
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="150009" />
                    </Lesson>
                  </list>
                </option>
              </Section>
            </list>
          </option>
        </EduCourse>
      </option>
    </StudyTaskManager>
  </component>
</project>